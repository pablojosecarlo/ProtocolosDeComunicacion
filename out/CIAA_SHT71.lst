
examples_c/sapi/CIAA_SHT71/out/CIAA_SHT71.elf:     file format elf32-littlearm
examples_c/sapi/CIAA_SHT71/out/CIAA_SHT71.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001311

Program Header:
0x70000001 off    0x00014394 vaddr 0x1a004394 paddr 0x1a004394 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000052c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000439c memsz 0x0000439c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00439c align 2**16
         filesz 0x000004b8 memsz 0x000004b8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004390  1a000000  1a000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004b8  10000000  1a00439c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000204b8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000204b8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000204b8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000204b8  2**2
                  CONTENTS
  6 .bss          00000074  100004b8  100004b8  000004b8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000204b8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000204b8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000204b8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000204b8  2**2
                  CONTENTS
 11 .init_array   00000004  1a004390  1a004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004394  1a004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000204b8  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000204b8  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000204b8  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000204b8  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000204b8  2**2
                  CONTENTS
 18 .noinit       00000000  1000052c  1000052c  000204b8  2**2
                  CONTENTS
 19 .debug_info   00023d3c  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004b78  00000000  00000000  000441f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007e04  00000000  00000000  00048d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000c18  00000000  00000000  00050b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000ba0  00000000  00000000  00051788  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000dd1a  00000000  00000000  00052328  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000f906  00000000  00000000  00060042  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00027c6a  00000000  00000000  0006f948  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000975b2  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  00097631  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000021f0  00000000  00000000  00097668  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100004b8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004390 l    d  .init_array	00000000 .init_array
1a004394 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000052c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ciaa_sht71.c
100004b8 l     O .bss	00000002 cont.13589
00000000 l    df *ABS*	00000000 sht71.c
00000000 l    df *ABS*	00000000 lcd_i2c.c
00000000 l    df *ABS*	00000000 board.c
1a00139c l     F .text	00000044 Board_LED_Init
1a0013e0 l     F .text	00000040 Board_TEC_Init
1a001420 l     F .text	00000040 Board_GPIO_Init
1a001460 l     F .text	00000030 Board_ADC_Init
1a001490 l     F .text	00000038 Board_SPI_Init
1a0014c8 l     F .text	00000024 Board_I2C_Init
1a004090 l     O .text	00000008 GpioButtons
1a004098 l     O .text	0000000c GpioLeds
1a0040a4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0040bc l     O .text	00000004 InitClkStates
1a0040c0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0015f4 l     F .text	0000002c Chip_UART_GetIndex
1a004134 l     O .text	00000008 UART_BClock
1a00413c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00179c l     F .text	00000014 Chip_ADC_GetClockIndex
1a0017b0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001878 l     F .text	000000a4 pll_calc_divs
1a00191c l     F .text	0000010c pll_get_frac
1a001a28 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001c9c l     F .text	00000022 Chip_Clock_GetDivRate
100004c4 l     O .bss	00000008 audio_usb_pll_freq
1a004150 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0041bc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00208c l     F .text	00000014 Chip_SSP_GetClockIndex
1a0020a0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004204 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
100004cc l     O .bss	00000004 callBackFuncParams
100004d0 l     O .bss	00000008 tickCounter
100004d8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a0026b4 l     F .text	00000030 i2cHardwareInit
1a0026e4 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002748 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100004dc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002b68 l     F .text	00000010 clearInterrupt
1a002b78 l     F .text	0000005c serveInterrupt
1000003c l     O .data	00000048 ultrasonicSensors
1a004384 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 w_log10.c
00000000 l    df *ABS*	00000000 e_log10.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
10000090 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a004394 l       .init_array	00000000 __init_array_end
1a004390 l       .bss_RAM5	00000000 __preinit_array_end
1a004390 l       .init_array	00000000 __init_array_start
1a004390 l       .bss_RAM5	00000000 __preinit_array_start
1a003aa8 g     F .text	0000002c .hidden __aeabi_dcmpun
1a001ac0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002058 g     F .text	0000000e Chip_I2CM_Xfer
1a003a6c g     F .text	00000012 .hidden __aeabi_dcmple
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002410 g     F .text	00000014 uartRxRead
1a0039a8 g     F .text	0000007a .hidden __cmpdf2
1a002720 g     F .text	0000000e i2cInit
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0039a8 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
100004ec g     O .bss	00000009 TxtBLE
1a001000 g     F .text	00000014 setup_lcd
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a003518 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0024b4 g     F .text	0000001e uartReadByte
1a000a30 g     F .text	00000010 SHT71_SET_STATUS
1a00153c g     F .text	00000008 __stdio_init
100004f5 g     O .bss	00000001 TX_BUFFER
1a002b24 g     F .text	00000042 delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a002160 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a001856 g     F .text	0000000c Chip_ADC_SetResolution
100004f6 g     O .bss	00000001 RX_BUFFER
1a002680 g     F .text	00000034 SysTick_Handler
1a001674 g     F .text	00000040 Chip_UART_SetBaud
1a00130c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000730 g     F .text	000000dc SHT71_DEW_POINT
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00439c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a003998 g     F .text	0000008a .hidden __gtdf2
1a003e74 g     F .text	0000000c __errno
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a001124 g     F .text	0000001c noCursor
53ff657e g       *ABS*	00000000 __valid_user_code_checksum
100004e0 g     O .bss	00000001 _backlight
1a00439c g       .ARM.exidx	00000000 _etext
1a003a34 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0024d2 g     F .text	00000080 waitForReceiveStringOrTimeout
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a000bd4 g     F .text	000000c4 SHT71_READ_HUMEDAD
1a001d3e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003a24 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0034a0 g     F .text	00000022 .hidden __floatsidf
1a00230c g     F .text	00000030 Chip_I2C_MasterStateHandler
1a0039a0 g     F .text	00000082 .hidden __ltdf2
1a003b74 g     F .text	00000000 .hidden __aeabi_uldivmod
1000052c g       .noinit	00000000 _noinit
1a0025a6 g     F .text	00000018 uartWriteString
10000518 g     O .bss	00000004 SystemCoreClock
1a001620 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001dbc g     F .text	0000004c Chip_Clock_GetRate
1a000300 g     F .text	00000288 myTickHook
100004c1 g     O .bss	00000001 REG_CHECKSUM
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
100004e1 g     O .bss	00000001 _displaycontrol
1a00157c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003480 g     F .text	0000001e .hidden __aeabi_ui2d
100004e2 g     O .bss	00000001 _Addr
1a0022dc g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a00080c g     F .text	0000006c START_CONDITION_SHT71
1a003ba4 g     F .text	000002cc .hidden __udivmoddi4
1a0031fc g     F .text	00000000 .hidden __aeabi_drsub
1a00408c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000b64 g     F .text	00000070 SHT71_READ_HUMEDAD_CRUDA
1a002cf8 g     F .text	0000013c __ieee754_log10
1a003a58 g     F .text	00000012 .hidden __aeabi_dcmplt
1a002bde g     F .text	0000000a GPIO1_IRQHandler
1a0034c4 g     F .text	00000042 .hidden __extendsfdf2
1a0037c8 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003208 g     F .text	00000276 .hidden __adddf3
1a0023e0 g     F .text	00000018 uartRxReady
1a004394 g       .ARM.exidx	00000000 __exidx_start
1a003574 g     F .text	00000254 .hidden __aeabi_dmul
10000084 g     O .data	00000001 __fdlib_version
1a0002fc g     O .text	00000004 CRP_WORD
1a003e80 g     F .text	00000048 __libc_init_array
1a001108 g     F .text	0000001c display
1a000a98 g     F .text	00000070 SHT71_READ_TEMPERATURA_CRUDA
1a003480 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001510 g     F .text	0000002c Board_Init
1a00139a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a003ad4 g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1a000a04 g     F .text	0000002c SHT71_WRITE_STATUS_REGISTER
1000052c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a001310 g     F .text	00000088 Reset_Handler
1a002604 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002066 g     F .text	00000024 Chip_I2CM_XferBlocking
100004f8 g     O .bss	00000010 TxtSTS
1a0022a4 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000c98 g     F .text	00000218 BIN16_A_DIGITAL5
1a001a74 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000588 g     F .text	00000030 hm10bleTest
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00115c g     F .text	00000060 setCursor
100004e3 g     O .bss	00000001 _displaymode
1a001140 g     F .text	0000001c noBlink
1a003208 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a001224 g     F .text	00000034 clear
1a0039a0 g     F .text	00000082 .hidden __ledf2
100004c2 g     O .bss	00000001 REG_STATUS_REGISTER
1a003508 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
100004e4 g     O .bss	00000001 _displayfunction
1a002280 g     F .text	00000024 Chip_I2C_Init
10000508 g     O .bss	00000004 humedad
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001c30 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00424c g     O .text	00000136 gpioPinsInit
1a00099c g     F .text	00000034 SEND_ACK
1a00258c g     F .text	0000001a uartWriteByte
1a0020b8 g     F .text	00000012 Chip_SSP_SetClockRate
1a003a94 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a002be8 g     F .text	0000000a GPIO2_IRQHandler
1a000ed4 g     F .text	0000012c FLOAT_A_LCD_BLE
1a001d18 g     F .text	00000026 Chip_Clock_GetBaseClock
1a003a80 g     F .text	00000012 .hidden __aeabi_dcmpge
100004b8 g       .bss	00000000 _bss
1a001824 g     F .text	00000032 Chip_ADC_SetSampleRate
1a003204 g     F .text	0000027a .hidden __aeabi_dsub
1a002b04 g     F .text	00000020 delayInit
1a003508 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0020ca g     F .text	0000003e Chip_SSP_SetBitRate
1a0010a8 g     F .text	00000028 _sendNibble
1a00208a g     F .text	00000002 Chip_GPIO_Init
1a0040b8 g     O .text	00000004 OscRateIn
1a0011dc g     F .text	0000001a print_lcd
1a002438 g     F .text	0000007c uartInit
1000052c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a002bf4 g     F .text	00000100 log10
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000b08 g     F .text	0000005c SHT71_READ_TEMPERATURA
1a000178 g       .text	00000000 __bss_section_table_end
1a001258 g     F .text	000000b4 begin
1a0034a0 g     F .text	00000022 .hidden __aeabi_i2d
1a00277c g     F .text	00000194 gpioInit
100004bc g     O .bss	00000005 NUM
1a000a40 g     F .text	00000058 SHT71_READ_STATUS_REGISTER
1a003e70  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0037c8 g     F .text	000001d0 .hidden __divdf3
1a003574 g     F .text	00000254 .hidden __muldf3
1a0029bc g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a000eb0 g     F .text	00000024 FLOAT_A_DIGITAL5
1a00233c g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001adc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003ec8 g     F .text	00000094 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005b8 g     F .text	00000178 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002e34 g     F .text	00000004 matherr
1a003ad4 g     F .text	0000009e .hidden __truncdfsf2
1a003518 g     F .text	0000005a .hidden __aeabi_l2d
1a0023f8 g     F .text	00000018 uartTxReady
1a0010d0 g     F .text	00000018 _send
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001d4c g     F .text	0000003c Chip_Clock_EnableOpts
1a001af8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001bb0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00094c g     F .text	00000050 GET_ACK
1a00238c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a002acc g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0039a8 g     F .text	0000007a .hidden __nedf2
1a002910 g     F .text	00000056 gpioWrite
1a001398  w    F .text	00000002 _fini
1a0017e4 g     F .text	00000040 Chip_ADC_Init
100004e5 g     O .bss	00000001 _numCols
10000528 g     O .bss	00000004 g_pUsbApi
1a001544 g     F .text	00000038 Board_SetupMuxing
1a0016b4 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0025c0 g     F .text	0000000c tickRead
10000520 g     O .bss	00000008 tickRateMS
1000050c g     O .bss	00000004 tempDewPoint
1a0001ba  w    F .text	00000002 ETH_IRQHandler
100004e8 g     O .bss	00000002 posc
10000088 g     O .data	00000004 _impure_ptr
1a0009d0 g     F .text	00000034 NO_ACK
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002552 g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a002e48 g     F .text	000003b4 __ieee754_log
1a002424 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a001f5c g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a0025cc g     F .text	00000020 tickCallbackSet
1000052c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002108 g     F .text	00000038 Chip_SSP_Init
1a002354 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002e38 g     F .text	00000010 nan
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a00272e g     F .text	00000018 i2cWrite
1a0014ec g     F .text	00000024 Board_Debug_Init
1a003a44 g     F .text	00000012 .hidden __aeabi_dcmpeq
100004ea g     O .bss	00000001 _numLines
100004b8 g       .data	00000000 _edata
10000510 g     O .bss	00000002 FLAGS_I2C
1a000878 g     F .text	00000068 I2C_OUTPUT
1a002140 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001e08 g     F .text	00000154 Chip_SetupCoreClock
1a002bd4 g     F .text	0000000a GPIO0_IRQHandler
10000514 g     O .bss	00000004 temperatura
1a0010e8 g     F .text	00000020 home
1a000000 g     O .text	00000040 g_pfnVectors
1a001864 g     F .text	00000014 SystemCoreClockUpdate
100004ba g     O .bss	00000001 LAST_STATUS_REG_SET
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003e70  w    F .text	00000002 .hidden __aeabi_idiv0
1a003aa8 g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
1a001d88 g     F .text	00000034 Chip_Clock_Enable
1a003a34 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a003998 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002966 g     F .text	00000054 gpioRead
1a0034c4 g     F .text	00000042 .hidden __aeabi_f2d
1a0029d8 g     F .text	000000f4 boardInit
1a001050 g     F .text	00000058 _write2Wire
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0011f8 g     F .text	0000002c clearLinea
1a003204 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0011bc g     F .text	00000020 write_lcd
1a0025ec g     F .text	00000018 tickPowerSet
1a0008e0 g     F .text	0000006c I2C_INPUT
1a001cc0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0023c4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a001014 g     F .text	0000003c _incrementarPosc
1a0015e8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 11 13 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7e 65 ff 53     }...........~e.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	81 26 00 1a                                         .&..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bd 29 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .)..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	d5 2b 00 1a df 2b 00 1a e9 2b 00 1a bb 01 00 1a     .+...+...+......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00439c 	.word	0x1a00439c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000004b8 	.word	0x000004b8
1a000120:	1a00439c 	.word	0x1a00439c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00439c 	.word	0x1a00439c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00439c 	.word	0x1a00439c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00439c 	.word	0x1a00439c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100004b8 	.word	0x100004b8
1a000154:	00000074 	.word	0x00000074
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTickHook>:
                                                 "OK\r\n", strlen("OK\r\n"),
                                                 1000 );
}

void myTickHook( void *ptr )
{
1a000300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint16_t cont = 0;
	cont++;
1a000304:	4a90      	ldr	r2, [pc, #576]	; (1a000548 <myTickHook+0x248>)
1a000306:	8813      	ldrh	r3, [r2, #0]
1a000308:	3301      	adds	r3, #1
1a00030a:	b29b      	uxth	r3, r3
1a00030c:	8013      	strh	r3, [r2, #0]

	if( cont == 20 ){ //cada 1 segundo
1a00030e:	2b14      	cmp	r3, #20
1a000310:	d001      	beq.n	1a000316 <myTickHook+0x16>
	   	   TxtSTS[10] = '4'; TxtSTS[11] = 'T';
	   }
	   TxtSTS[12]  = ' '; TxtSTS[13] = ' '; TxtSTS[14] = ' '; TxtSTS[15] = ' ';
	   uartWriteString( UART_BLUETOOTH, TxtSTS );
	}
}
1a000312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cont = 0;
1a000316:	2400      	movs	r4, #0
1a000318:	8014      	strh	r4, [r2, #0]
	   temperatura = SHT71_READ_TEMPERATURA();
1a00031a:	f000 fbf5 	bl	1a000b08 <SHT71_READ_TEMPERATURA>
1a00031e:	4f8b      	ldr	r7, [pc, #556]	; (1a00054c <myTickHook+0x24c>)
1a000320:	ed87 0a00 	vstr	s0, [r7]
	   setCursor(1,1);
1a000324:	2101      	movs	r1, #1
1a000326:	4608      	mov	r0, r1
1a000328:	f000 ff18 	bl	1a00115c <setCursor>
	   print_lcd( "T=", 2 );
1a00032c:	2102      	movs	r1, #2
1a00032e:	4888      	ldr	r0, [pc, #544]	; (1a000550 <myTickHook+0x250>)
1a000330:	f000 ff54 	bl	1a0011dc <print_lcd>
	   FLOAT_A_LCD_BLE( temperatura );
1a000334:	ed97 0a00 	vldr	s0, [r7]
1a000338:	f000 fdcc 	bl	1a000ed4 <FLOAT_A_LCD_BLE>
	   write_lcd( 'C' );
1a00033c:	2043      	movs	r0, #67	; 0x43
1a00033e:	f000 ff3d 	bl	1a0011bc <write_lcd>
	   TxtBLE[1] = 'T'; TxtBLE[2] = '=';
1a000342:	4d84      	ldr	r5, [pc, #528]	; (1a000554 <myTickHook+0x254>)
1a000344:	f04f 0954 	mov.w	r9, #84	; 0x54
1a000348:	f885 9001 	strb.w	r9, [r5, #1]
1a00034c:	263d      	movs	r6, #61	; 0x3d
1a00034e:	70ae      	strb	r6, [r5, #2]
	   uartWriteString( UART_BLUETOOTH, TxtBLE );
1a000350:	4629      	mov	r1, r5
1a000352:	2005      	movs	r0, #5
1a000354:	f002 f927 	bl	1a0025a6 <uartWriteString>
	   humedad = SHT71_READ_HUMEDAD();
1a000358:	f000 fc3c 	bl	1a000bd4 <SHT71_READ_HUMEDAD>
1a00035c:	f8df 8224 	ldr.w	r8, [pc, #548]	; 1a000584 <myTickHook+0x284>
1a000360:	ed88 0a00 	vstr	s0, [r8]
	   setCursor(1,11);
1a000364:	210b      	movs	r1, #11
1a000366:	2001      	movs	r0, #1
1a000368:	f000 fef8 	bl	1a00115c <setCursor>
	   print_lcd( "H=", 2 );
1a00036c:	2102      	movs	r1, #2
1a00036e:	487a      	ldr	r0, [pc, #488]	; (1a000558 <myTickHook+0x258>)
1a000370:	f000 ff34 	bl	1a0011dc <print_lcd>
	   FLOAT_A_LCD_BLE( humedad );
1a000374:	ed98 0a00 	vldr	s0, [r8]
1a000378:	f000 fdac 	bl	1a000ed4 <FLOAT_A_LCD_BLE>
	   write_lcd( '%' );
1a00037c:	2025      	movs	r0, #37	; 0x25
1a00037e:	f000 ff1d 	bl	1a0011bc <write_lcd>
	   TxtBLE[1] = 'H'; TxtBLE[2] = '=';
1a000382:	2348      	movs	r3, #72	; 0x48
1a000384:	706b      	strb	r3, [r5, #1]
1a000386:	70ae      	strb	r6, [r5, #2]
	   uartWriteString( UART_BLUETOOTH, TxtBLE );
1a000388:	4629      	mov	r1, r5
1a00038a:	2005      	movs	r0, #5
1a00038c:	f002 f90b 	bl	1a0025a6 <uartWriteString>
	   tempDewPoint =  SHT71_DEW_POINT( temperatura, humedad );
1a000390:	edd8 0a00 	vldr	s1, [r8]
1a000394:	ed97 0a00 	vldr	s0, [r7]
1a000398:	f000 f9ca 	bl	1a000730 <SHT71_DEW_POINT>
1a00039c:	4f6f      	ldr	r7, [pc, #444]	; (1a00055c <myTickHook+0x25c>)
1a00039e:	ed87 0a00 	vstr	s0, [r7]
	   setCursor( 2, 3 );
1a0003a2:	2103      	movs	r1, #3
1a0003a4:	2002      	movs	r0, #2
1a0003a6:	f000 fed9 	bl	1a00115c <setCursor>
	   print_lcd( "T Rocio=", 8 );
1a0003aa:	2108      	movs	r1, #8
1a0003ac:	486c      	ldr	r0, [pc, #432]	; (1a000560 <myTickHook+0x260>)
1a0003ae:	f000 ff15 	bl	1a0011dc <print_lcd>
	   FLOAT_A_LCD_BLE( tempDewPoint );
1a0003b2:	ed97 0a00 	vldr	s0, [r7]
1a0003b6:	f000 fd8d 	bl	1a000ed4 <FLOAT_A_LCD_BLE>
	   write_lcd( 'C' );
1a0003ba:	2043      	movs	r0, #67	; 0x43
1a0003bc:	f000 fefe 	bl	1a0011bc <write_lcd>
	   TxtBLE[0] = 'T'; TxtBLE[1] = 'r'; TxtBLE[2] = '=';
1a0003c0:	f885 9000 	strb.w	r9, [r5]
1a0003c4:	2372      	movs	r3, #114	; 0x72
1a0003c6:	706b      	strb	r3, [r5, #1]
1a0003c8:	70ae      	strb	r6, [r5, #2]
	   uartWriteString( UART_BLUETOOTH, TxtBLE );
1a0003ca:	4629      	mov	r1, r5
1a0003cc:	2005      	movs	r0, #5
1a0003ce:	f002 f8ea 	bl	1a0025a6 <uartWriteString>
	   REG_STATUS_REGISTER = SHT71_READ_STATUS_REGISTER();
1a0003d2:	f000 fb35 	bl	1a000a40 <SHT71_READ_STATUS_REGISTER>
1a0003d6:	4b63      	ldr	r3, [pc, #396]	; (1a000564 <myTickHook+0x264>)
1a0003d8:	7018      	strb	r0, [r3, #0]
	   for(uint8_t i = 0; i < 16; i++) TxtSTS[1] = ' ';
1a0003da:	4623      	mov	r3, r4
1a0003dc:	e001      	b.n	1a0003e2 <myTickHook+0xe2>
1a0003de:	3301      	adds	r3, #1
1a0003e0:	b2db      	uxtb	r3, r3
1a0003e2:	2b0f      	cmp	r3, #15
1a0003e4:	d9fb      	bls.n	1a0003de <myTickHook+0xde>
	   TxtSTS[0] = 'S'; TxtSTS[1] = 't'; TxtSTS[2] = '0'; TxtSTS[3] = '=';
1a0003e6:	4b60      	ldr	r3, [pc, #384]	; (1a000568 <myTickHook+0x268>)
1a0003e8:	2253      	movs	r2, #83	; 0x53
1a0003ea:	701a      	strb	r2, [r3, #0]
1a0003ec:	2274      	movs	r2, #116	; 0x74
1a0003ee:	705a      	strb	r2, [r3, #1]
1a0003f0:	2230      	movs	r2, #48	; 0x30
1a0003f2:	709a      	strb	r2, [r3, #2]
1a0003f4:	223d      	movs	r2, #61	; 0x3d
1a0003f6:	70da      	strb	r2, [r3, #3]
	   setCursor( 3, 0 );
1a0003f8:	2100      	movs	r1, #0
1a0003fa:	2003      	movs	r0, #3
1a0003fc:	f000 feae 	bl	1a00115c <setCursor>
	   if ( REG_STATUS_REGISTER & SHT71_LOW_BATT ){
1a000400:	4b58      	ldr	r3, [pc, #352]	; (1a000564 <myTickHook+0x264>)
1a000402:	781b      	ldrb	r3, [r3, #0]
1a000404:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000408:	d030      	beq.n	1a00046c <myTickHook+0x16c>
		   print_lcd( "B=Lo,", 5);
1a00040a:	2105      	movs	r1, #5
1a00040c:	4857      	ldr	r0, [pc, #348]	; (1a00056c <myTickHook+0x26c>)
1a00040e:	f000 fee5 	bl	1a0011dc <print_lcd>
		   TxtSTS[4] = 'B'; TxtSTS[5] = '='; TxtSTS[6] = 'L';
1a000412:	4b55      	ldr	r3, [pc, #340]	; (1a000568 <myTickHook+0x268>)
1a000414:	2242      	movs	r2, #66	; 0x42
1a000416:	711a      	strb	r2, [r3, #4]
1a000418:	223d      	movs	r2, #61	; 0x3d
1a00041a:	715a      	strb	r2, [r3, #5]
1a00041c:	224c      	movs	r2, #76	; 0x4c
1a00041e:	719a      	strb	r2, [r3, #6]
	   	   TxtSTS[7] = 'o'; TxtSTS[8] = ',';
1a000420:	226f      	movs	r2, #111	; 0x6f
1a000422:	71da      	strb	r2, [r3, #7]
1a000424:	222c      	movs	r2, #44	; 0x2c
1a000426:	721a      	strb	r2, [r3, #8]
	   setCursor( 3, 5 );
1a000428:	2105      	movs	r1, #5
1a00042a:	2003      	movs	r0, #3
1a00042c:	f000 fe96 	bl	1a00115c <setCursor>
	   if ( REG_STATUS_REGISTER & SHT71_HEAT_ON ){
1a000430:	4b4c      	ldr	r3, [pc, #304]	; (1a000564 <myTickHook+0x264>)
1a000432:	781b      	ldrb	r3, [r3, #0]
1a000434:	f013 0f04 	tst.w	r3, #4
1a000438:	d028      	beq.n	1a00048c <myTickHook+0x18c>
		   print_lcd( "He=On, ", 7);
1a00043a:	2107      	movs	r1, #7
1a00043c:	484c      	ldr	r0, [pc, #304]	; (1a000570 <myTickHook+0x270>)
1a00043e:	f000 fecd 	bl	1a0011dc <print_lcd>
		   TxtSTS[9]  = 'H'; TxtSTS[10] = 'e'; TxtSTS[11] = '=';
1a000442:	4b49      	ldr	r3, [pc, #292]	; (1a000568 <myTickHook+0x268>)
1a000444:	2248      	movs	r2, #72	; 0x48
1a000446:	725a      	strb	r2, [r3, #9]
1a000448:	2265      	movs	r2, #101	; 0x65
1a00044a:	729a      	strb	r2, [r3, #10]
1a00044c:	223d      	movs	r2, #61	; 0x3d
1a00044e:	72da      	strb	r2, [r3, #11]
	   	   TxtSTS[12] = 'O'; TxtSTS[13] = 'n'; TxtSTS[14] = ',';
1a000450:	224f      	movs	r2, #79	; 0x4f
1a000452:	731a      	strb	r2, [r3, #12]
1a000454:	226e      	movs	r2, #110	; 0x6e
1a000456:	735a      	strb	r2, [r3, #13]
1a000458:	222c      	movs	r2, #44	; 0x2c
1a00045a:	739a      	strb	r2, [r3, #14]
	   	   TxtSTS[15] = ' ';
1a00045c:	2220      	movs	r2, #32
1a00045e:	73da      	strb	r2, [r3, #15]
	   uartWriteString( UART_BLUETOOTH, TxtSTS );
1a000460:	4941      	ldr	r1, [pc, #260]	; (1a000568 <myTickHook+0x268>)
1a000462:	2005      	movs	r0, #5
1a000464:	f002 f89f 	bl	1a0025a6 <uartWriteString>
	   for(uint8_t i = 0; i < 16; i++) TxtSTS[1] = ' ';
1a000468:	2300      	movs	r3, #0
1a00046a:	e024      	b.n	1a0004b6 <myTickHook+0x1b6>
		   print_lcd( "B=Ok,", 5);
1a00046c:	2105      	movs	r1, #5
1a00046e:	4841      	ldr	r0, [pc, #260]	; (1a000574 <myTickHook+0x274>)
1a000470:	f000 feb4 	bl	1a0011dc <print_lcd>
		   TxtSTS[4] = 'B'; TxtSTS[5] = '='; TxtSTS[6] = 'O';
1a000474:	4b3c      	ldr	r3, [pc, #240]	; (1a000568 <myTickHook+0x268>)
1a000476:	2242      	movs	r2, #66	; 0x42
1a000478:	711a      	strb	r2, [r3, #4]
1a00047a:	223d      	movs	r2, #61	; 0x3d
1a00047c:	715a      	strb	r2, [r3, #5]
1a00047e:	224f      	movs	r2, #79	; 0x4f
1a000480:	719a      	strb	r2, [r3, #6]
	   	   TxtSTS[7] = 'k'; TxtSTS[8] = ',';
1a000482:	226b      	movs	r2, #107	; 0x6b
1a000484:	71da      	strb	r2, [r3, #7]
1a000486:	222c      	movs	r2, #44	; 0x2c
1a000488:	721a      	strb	r2, [r3, #8]
1a00048a:	e7cd      	b.n	1a000428 <myTickHook+0x128>
		   print_lcd( "He=Off,", 7);
1a00048c:	2107      	movs	r1, #7
1a00048e:	483a      	ldr	r0, [pc, #232]	; (1a000578 <myTickHook+0x278>)
1a000490:	f000 fea4 	bl	1a0011dc <print_lcd>
		   TxtSTS[9]  = 'H'; TxtSTS[10] = 'e'; TxtSTS[11]  = '=';
1a000494:	4b34      	ldr	r3, [pc, #208]	; (1a000568 <myTickHook+0x268>)
1a000496:	2248      	movs	r2, #72	; 0x48
1a000498:	725a      	strb	r2, [r3, #9]
1a00049a:	2265      	movs	r2, #101	; 0x65
1a00049c:	729a      	strb	r2, [r3, #10]
1a00049e:	223d      	movs	r2, #61	; 0x3d
1a0004a0:	72da      	strb	r2, [r3, #11]
	   	   TxtSTS[12] = 'O'; TxtSTS[13] = 'f'; TxtSTS[14] = 'f';
1a0004a2:	224f      	movs	r2, #79	; 0x4f
1a0004a4:	731a      	strb	r2, [r3, #12]
1a0004a6:	2266      	movs	r2, #102	; 0x66
1a0004a8:	735a      	strb	r2, [r3, #13]
1a0004aa:	739a      	strb	r2, [r3, #14]
	   	   TxtSTS[15] = ',';
1a0004ac:	222c      	movs	r2, #44	; 0x2c
1a0004ae:	73da      	strb	r2, [r3, #15]
1a0004b0:	e7d6      	b.n	1a000460 <myTickHook+0x160>
	   for(uint8_t i = 0; i < 16; i++) TxtSTS[1] = ' ';
1a0004b2:	3301      	adds	r3, #1
1a0004b4:	b2db      	uxtb	r3, r3
1a0004b6:	2b0f      	cmp	r3, #15
1a0004b8:	d9fb      	bls.n	1a0004b2 <myTickHook+0x1b2>
	   TxtSTS[0] = 'S'; TxtSTS[1] = 't'; TxtSTS[2] = '1'; TxtSTS[3] = '=';
1a0004ba:	4b2b      	ldr	r3, [pc, #172]	; (1a000568 <myTickHook+0x268>)
1a0004bc:	2253      	movs	r2, #83	; 0x53
1a0004be:	701a      	strb	r2, [r3, #0]
1a0004c0:	2274      	movs	r2, #116	; 0x74
1a0004c2:	705a      	strb	r2, [r3, #1]
1a0004c4:	2231      	movs	r2, #49	; 0x31
1a0004c6:	709a      	strb	r2, [r3, #2]
1a0004c8:	223d      	movs	r2, #61	; 0x3d
1a0004ca:	70da      	strb	r2, [r3, #3]
	   setCursor( 3, 12 );
1a0004cc:	210c      	movs	r1, #12
1a0004ce:	2003      	movs	r0, #3
1a0004d0:	f000 fe44 	bl	1a00115c <setCursor>
	   if ( REG_STATUS_REGISTER & SHT71_LOW_RES ){
1a0004d4:	4b23      	ldr	r3, [pc, #140]	; (1a000564 <myTickHook+0x264>)
1a0004d6:	781b      	ldrb	r3, [r3, #0]
1a0004d8:	f013 0f01 	tst.w	r3, #1
1a0004dc:	d01e      	beq.n	1a00051c <myTickHook+0x21c>
		   print_lcd( "8RH,12T", 7);
1a0004de:	2107      	movs	r1, #7
1a0004e0:	4826      	ldr	r0, [pc, #152]	; (1a00057c <myTickHook+0x27c>)
1a0004e2:	f000 fe7b 	bl	1a0011dc <print_lcd>
		   TxtSTS[4]  = '8'; TxtSTS[5]  = 'R'; TxtSTS[6] = 'H';
1a0004e6:	4b20      	ldr	r3, [pc, #128]	; (1a000568 <myTickHook+0x268>)
1a0004e8:	2238      	movs	r2, #56	; 0x38
1a0004ea:	711a      	strb	r2, [r3, #4]
1a0004ec:	2252      	movs	r2, #82	; 0x52
1a0004ee:	715a      	strb	r2, [r3, #5]
1a0004f0:	2248      	movs	r2, #72	; 0x48
1a0004f2:	719a      	strb	r2, [r3, #6]
	   	   TxtSTS[7]  = ','; TxtSTS[8]  = '1'; TxtSTS[9] = '2';
1a0004f4:	222c      	movs	r2, #44	; 0x2c
1a0004f6:	71da      	strb	r2, [r3, #7]
1a0004f8:	2231      	movs	r2, #49	; 0x31
1a0004fa:	721a      	strb	r2, [r3, #8]
1a0004fc:	2232      	movs	r2, #50	; 0x32
1a0004fe:	725a      	strb	r2, [r3, #9]
	   	   TxtSTS[10] = 'T'; TxtSTS[11] = ' ';
1a000500:	2254      	movs	r2, #84	; 0x54
1a000502:	729a      	strb	r2, [r3, #10]
1a000504:	2220      	movs	r2, #32
1a000506:	72da      	strb	r2, [r3, #11]
	   TxtSTS[12]  = ' '; TxtSTS[13] = ' '; TxtSTS[14] = ' '; TxtSTS[15] = ' ';
1a000508:	4917      	ldr	r1, [pc, #92]	; (1a000568 <myTickHook+0x268>)
1a00050a:	2320      	movs	r3, #32
1a00050c:	730b      	strb	r3, [r1, #12]
1a00050e:	734b      	strb	r3, [r1, #13]
1a000510:	738b      	strb	r3, [r1, #14]
1a000512:	73cb      	strb	r3, [r1, #15]
	   uartWriteString( UART_BLUETOOTH, TxtSTS );
1a000514:	2005      	movs	r0, #5
1a000516:	f002 f846 	bl	1a0025a6 <uartWriteString>
}
1a00051a:	e6fa      	b.n	1a000312 <myTickHook+0x12>
		   print_lcd( "12RH,14T", 8);
1a00051c:	2108      	movs	r1, #8
1a00051e:	4818      	ldr	r0, [pc, #96]	; (1a000580 <myTickHook+0x280>)
1a000520:	f000 fe5c 	bl	1a0011dc <print_lcd>
		   TxtSTS[4]  = '1'; TxtSTS[5]  = '2'; TxtSTS[6] = 'R';
1a000524:	4b10      	ldr	r3, [pc, #64]	; (1a000568 <myTickHook+0x268>)
1a000526:	2231      	movs	r2, #49	; 0x31
1a000528:	711a      	strb	r2, [r3, #4]
1a00052a:	2132      	movs	r1, #50	; 0x32
1a00052c:	7159      	strb	r1, [r3, #5]
1a00052e:	2152      	movs	r1, #82	; 0x52
1a000530:	7199      	strb	r1, [r3, #6]
	   	   TxtSTS[7]  = 'H'; TxtSTS[8]  = ','; TxtSTS[9] = '1';
1a000532:	2148      	movs	r1, #72	; 0x48
1a000534:	71d9      	strb	r1, [r3, #7]
1a000536:	212c      	movs	r1, #44	; 0x2c
1a000538:	7219      	strb	r1, [r3, #8]
1a00053a:	725a      	strb	r2, [r3, #9]
	   	   TxtSTS[10] = '4'; TxtSTS[11] = 'T';
1a00053c:	2234      	movs	r2, #52	; 0x34
1a00053e:	729a      	strb	r2, [r3, #10]
1a000540:	2254      	movs	r2, #84	; 0x54
1a000542:	72da      	strb	r2, [r3, #11]
1a000544:	e7e0      	b.n	1a000508 <myTickHook+0x208>
1a000546:	bf00      	nop
1a000548:	100004b8 	.word	0x100004b8
1a00054c:	10000514 	.word	0x10000514
1a000550:	1a004034 	.word	0x1a004034
1a000554:	100004ec 	.word	0x100004ec
1a000558:	1a004038 	.word	0x1a004038
1a00055c:	1000050c 	.word	0x1000050c
1a000560:	1a00403c 	.word	0x1a00403c
1a000564:	100004c2 	.word	0x100004c2
1a000568:	100004f8 	.word	0x100004f8
1a00056c:	1a004048 	.word	0x1a004048
1a000570:	1a004058 	.word	0x1a004058
1a000574:	1a004050 	.word	0x1a004050
1a000578:	1a004060 	.word	0x1a004060
1a00057c:	1a004068 	.word	0x1a004068
1a000580:	1a004070 	.word	0x1a004070
1a000584:	10000508 	.word	0x10000508

1a000588 <hm10bleTest>:
{
1a000588:	b510      	push	{r4, lr}
1a00058a:	b082      	sub	sp, #8
   uartWriteString( uart, "AT\r\n" );
1a00058c:	b2c4      	uxtb	r4, r0
1a00058e:	4908      	ldr	r1, [pc, #32]	; (1a0005b0 <hm10bleTest+0x28>)
1a000590:	4620      	mov	r0, r4
1a000592:	f002 f808 	bl	1a0025a6 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart,
1a000596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00059a:	2300      	movs	r3, #0
1a00059c:	e9cd 2300 	strd	r2, r3, [sp]
1a0005a0:	2204      	movs	r2, #4
1a0005a2:	4904      	ldr	r1, [pc, #16]	; (1a0005b4 <hm10bleTest+0x2c>)
1a0005a4:	4620      	mov	r0, r4
1a0005a6:	f001 ffd4 	bl	1a002552 <waitForReceiveStringOrTimeoutBlocking>
}
1a0005aa:	b002      	add	sp, #8
1a0005ac:	bd10      	pop	{r4, pc}
1a0005ae:	bf00      	nop
1a0005b0:	1a003f5c 	.word	0x1a003f5c
1a0005b4:	1a003f64 	.word	0x1a003f64

1a0005b8 <main>:
int main(void){
1a0005b8:	b500      	push	{lr}
1a0005ba:	b083      	sub	sp, #12
   boardConfig();
1a0005bc:	f002 fa0c 	bl	1a0029d8 <boardInit>
   tickConfig( 50 );
1a0005c0:	2032      	movs	r0, #50	; 0x32
1a0005c2:	2100      	movs	r1, #0
1a0005c4:	f002 f81e 	bl	1a002604 <tickInit>
   uartConfig( UART_PC, 9600 );
1a0005c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a0005cc:	2003      	movs	r0, #3
1a0005ce:	f001 ff33 	bl	1a002438 <uartInit>
   uartWriteString( UART_PC, "UART_PC configurada.\r\n" );
1a0005d2:	494e      	ldr	r1, [pc, #312]	; (1a00070c <main+0x154>)
1a0005d4:	2003      	movs	r0, #3
1a0005d6:	f001 ffe6 	bl	1a0025a6 <uartWriteString>
   uartConfig( UART_BLUETOOTH, 9600 );
1a0005da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a0005de:	2005      	movs	r0, #5
1a0005e0:	f001 ff2a 	bl	1a002438 <uartInit>
   uartWriteString( UART_PC, "UART_BLUETOOTH para modulo Bluetooth configurada.\r\n" );
1a0005e4:	494a      	ldr	r1, [pc, #296]	; (1a000710 <main+0x158>)
1a0005e6:	2003      	movs	r0, #3
1a0005e8:	f001 ffdd 	bl	1a0025a6 <uartWriteString>
   uint8_t data = 0;
1a0005ec:	2300      	movs	r3, #0
1a0005ee:	f88d 3007 	strb.w	r3, [sp, #7]
   uartWriteString( UART_PC, "Testeto si el modulo esta conectado enviando: AT\r\n" );
1a0005f2:	4948      	ldr	r1, [pc, #288]	; (1a000714 <main+0x15c>)
1a0005f4:	2003      	movs	r0, #3
1a0005f6:	f001 ffd6 	bl	1a0025a6 <uartWriteString>
   if( hm10bleTest( UART_BLUETOOTH ) ){
1a0005fa:	2005      	movs	r0, #5
1a0005fc:	f7ff ffc4 	bl	1a000588 <hm10bleTest>
1a000600:	b328      	cbz	r0, 1a00064e <main+0x96>
      uartWriteString( UART_PC, "Modulo conectado correctamente.\r\n" );
1a000602:	4945      	ldr	r1, [pc, #276]	; (1a000718 <main+0x160>)
1a000604:	2003      	movs	r0, #3
1a000606:	f001 ffce 	bl	1a0025a6 <uartWriteString>
   i2cInit(I2C0, 100000);
1a00060a:	4944      	ldr	r1, [pc, #272]	; (1a00071c <main+0x164>)
1a00060c:	2000      	movs	r0, #0
1a00060e:	f002 f887 	bl	1a002720 <i2cInit>
   setup_lcd( 0x27 );
1a000612:	2027      	movs	r0, #39	; 0x27
1a000614:	f000 fcf4 	bl	1a001000 <setup_lcd>
   begin( 4, 20, LCD_5x8DOTS );
1a000618:	2200      	movs	r2, #0
1a00061a:	2114      	movs	r1, #20
1a00061c:	2004      	movs	r0, #4
1a00061e:	f000 fe1b 	bl	1a001258 <begin>
   noBlink();
1a000622:	f000 fd8d 	bl	1a001140 <noBlink>
   noCursor();
1a000626:	f000 fd7d 	bl	1a001124 <noCursor>
   home();
1a00062a:	f000 fd5d 	bl	1a0010e8 <home>
   setCursor(0,0);
1a00062e:	2100      	movs	r1, #0
1a000630:	4608      	mov	r0, r1
1a000632:	f000 fd93 	bl	1a00115c <setCursor>
   print_lcd( "    CIAA - SHT71", 16 );
1a000636:	2110      	movs	r1, #16
1a000638:	4839      	ldr	r0, [pc, #228]	; (1a000720 <main+0x168>)
1a00063a:	f000 fdcf 	bl	1a0011dc <print_lcd>
   SHT71_SET_STATUS( STSREG_F_N_12_14 );
1a00063e:	2002      	movs	r0, #2
1a000640:	f000 f9f6 	bl	1a000a30 <SHT71_SET_STATUS>
   tickCallbackSet( myTickHook, 0 );
1a000644:	2100      	movs	r1, #0
1a000646:	4837      	ldr	r0, [pc, #220]	; (1a000724 <main+0x16c>)
1a000648:	f001 ffc0 	bl	1a0025cc <tickCallbackSet>
1a00064c:	e00a      	b.n	1a000664 <main+0xac>
      uartWriteString( UART_PC, "No funciona.\r\n" );
1a00064e:	4936      	ldr	r1, [pc, #216]	; (1a000728 <main+0x170>)
1a000650:	2003      	movs	r0, #3
1a000652:	f001 ffa8 	bl	1a0025a6 <uartWriteString>
1a000656:	e7d8      	b.n	1a00060a <main+0x52>
	  if( uartReadByte( UART_BLUETOOTH, &data ) ) {
1a000658:	f10d 0107 	add.w	r1, sp, #7
1a00065c:	2005      	movs	r0, #5
1a00065e:	f001 ff29 	bl	1a0024b4 <uartReadByte>
1a000662:	b960      	cbnz	r0, 1a00067e <main+0xc6>
	  if( uartReadByte( UART_PC, &data ) ) {
1a000664:	f10d 0107 	add.w	r1, sp, #7
1a000668:	2003      	movs	r0, #3
1a00066a:	f001 ff23 	bl	1a0024b4 <uartReadByte>
1a00066e:	2800      	cmp	r0, #0
1a000670:	d0f2      	beq.n	1a000658 <main+0xa0>
		 uartWriteByte( UART_BLUETOOTH, data );
1a000672:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000676:	2005      	movs	r0, #5
1a000678:	f001 ff88 	bl	1a00258c <uartWriteByte>
1a00067c:	e7ec      	b.n	1a000658 <main+0xa0>
		 if( data == '0' ) {
1a00067e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000682:	2b30      	cmp	r3, #48	; 0x30
1a000684:	d011      	beq.n	1a0006aa <main+0xf2>
	     if( data == '1' ) {
1a000686:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00068a:	2b31      	cmp	r3, #49	; 0x31
1a00068c:	d019      	beq.n	1a0006c2 <main+0x10a>
		 if( data == '2' ) {
1a00068e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000692:	2b32      	cmp	r3, #50	; 0x32
1a000694:	d021      	beq.n	1a0006da <main+0x122>
		 if( data == '3' ) {
1a000696:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00069a:	2b33      	cmp	r3, #51	; 0x33
1a00069c:	d029      	beq.n	1a0006f2 <main+0x13a>
		 uartWriteByte( UART_PC, data );
1a00069e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0006a2:	2003      	movs	r0, #3
1a0006a4:	f001 ff72 	bl	1a00258c <uartWriteByte>
1a0006a8:	e7dc      	b.n	1a000664 <main+0xac>
			gpioWrite( LEDB, OFF );
1a0006aa:	2100      	movs	r1, #0
1a0006ac:	202a      	movs	r0, #42	; 0x2a
1a0006ae:	f002 f92f 	bl	1a002910 <gpioWrite>
			LAST_STATUS_REG_SET &= ~SHT71_HEAT_ON;
1a0006b2:	4b1e      	ldr	r3, [pc, #120]	; (1a00072c <main+0x174>)
1a0006b4:	7818      	ldrb	r0, [r3, #0]
1a0006b6:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
1a0006ba:	7018      	strb	r0, [r3, #0]
			SHT71_SET_STATUS( LAST_STATUS_REG_SET );
1a0006bc:	f000 f9b8 	bl	1a000a30 <SHT71_SET_STATUS>
1a0006c0:	e7e1      	b.n	1a000686 <main+0xce>
			gpioWrite( LEDB, ON );
1a0006c2:	2101      	movs	r1, #1
1a0006c4:	202a      	movs	r0, #42	; 0x2a
1a0006c6:	f002 f923 	bl	1a002910 <gpioWrite>
			LAST_STATUS_REG_SET |= SHT71_HEAT_ON;
1a0006ca:	4b18      	ldr	r3, [pc, #96]	; (1a00072c <main+0x174>)
1a0006cc:	7818      	ldrb	r0, [r3, #0]
1a0006ce:	f040 0004 	orr.w	r0, r0, #4
1a0006d2:	7018      	strb	r0, [r3, #0]
			SHT71_SET_STATUS( LAST_STATUS_REG_SET );
1a0006d4:	f000 f9ac 	bl	1a000a30 <SHT71_SET_STATUS>
1a0006d8:	e7d9      	b.n	1a00068e <main+0xd6>
			gpioWrite( LED1, ON );
1a0006da:	2101      	movs	r1, #1
1a0006dc:	202b      	movs	r0, #43	; 0x2b
1a0006de:	f002 f917 	bl	1a002910 <gpioWrite>
			LAST_STATUS_REG_SET |= SHT71_LOW_RES;
1a0006e2:	4b12      	ldr	r3, [pc, #72]	; (1a00072c <main+0x174>)
1a0006e4:	7818      	ldrb	r0, [r3, #0]
1a0006e6:	f040 0001 	orr.w	r0, r0, #1
1a0006ea:	7018      	strb	r0, [r3, #0]
			SHT71_SET_STATUS( LAST_STATUS_REG_SET );
1a0006ec:	f000 f9a0 	bl	1a000a30 <SHT71_SET_STATUS>
1a0006f0:	e7d1      	b.n	1a000696 <main+0xde>
			gpioWrite( LED1, OFF );
1a0006f2:	2100      	movs	r1, #0
1a0006f4:	202b      	movs	r0, #43	; 0x2b
1a0006f6:	f002 f90b 	bl	1a002910 <gpioWrite>
			LAST_STATUS_REG_SET &= ~SHT71_LOW_RES;
1a0006fa:	4b0c      	ldr	r3, [pc, #48]	; (1a00072c <main+0x174>)
1a0006fc:	7818      	ldrb	r0, [r3, #0]
1a0006fe:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
1a000702:	7018      	strb	r0, [r3, #0]
			SHT71_SET_STATUS( LAST_STATUS_REG_SET );
1a000704:	f000 f994 	bl	1a000a30 <SHT71_SET_STATUS>
1a000708:	e7c9      	b.n	1a00069e <main+0xe6>
1a00070a:	bf00      	nop
1a00070c:	1a003f6c 	.word	0x1a003f6c
1a000710:	1a003f84 	.word	0x1a003f84
1a000714:	1a003fb8 	.word	0x1a003fb8
1a000718:	1a003fec 	.word	0x1a003fec
1a00071c:	000186a0 	.word	0x000186a0
1a000720:	1a004020 	.word	0x1a004020
1a000724:	1a000301 	.word	0x1a000301
1a000728:	1a004010 	.word	0x1a004010
1a00072c:	100004ba 	.word	0x100004ba

1a000730 <SHT71_DEW_POINT>:
	if ( temperatura > 0 ) humedad = (temperatura - 25) * ( t1 + t2 * SOrh ) + humedad;

	return humedad;
}

float SHT71_DEW_POINT( float temp, float hum ){
1a000730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000734:	ee10 6a90 	vmov	r6, s1

//Cálculo de la temperatura de rocío, cuanto más me alejo de los 25C más inexacto se vuelve.

	float logEx, dewPoint;

	logEx = 0.66077 +7.5 * temp / ( 237.3 + temp )+( log10( hum ) - 2 );
1a000738:	ee10 0a10 	vmov	r0, s0
1a00073c:	f002 fec2 	bl	1a0034c4 <__aeabi_f2d>
1a000740:	4680      	mov	r8, r0
1a000742:	4689      	mov	r9, r1
1a000744:	2200      	movs	r2, #0
1a000746:	4b30      	ldr	r3, [pc, #192]	; (1a000808 <SHT71_DEW_POINT+0xd8>)
1a000748:	f002 ff14 	bl	1a003574 <__aeabi_dmul>
1a00074c:	4604      	mov	r4, r0
1a00074e:	460d      	mov	r5, r1
1a000750:	a327      	add	r3, pc, #156	; (adr r3, 1a0007f0 <SHT71_DEW_POINT+0xc0>)
1a000752:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000756:	4640      	mov	r0, r8
1a000758:	4649      	mov	r1, r9
1a00075a:	f002 fd55 	bl	1a003208 <__adddf3>
1a00075e:	4602      	mov	r2, r0
1a000760:	460b      	mov	r3, r1
1a000762:	4620      	mov	r0, r4
1a000764:	4629      	mov	r1, r5
1a000766:	f003 f82f 	bl	1a0037c8 <__aeabi_ddiv>
1a00076a:	a323      	add	r3, pc, #140	; (adr r3, 1a0007f8 <SHT71_DEW_POINT+0xc8>)
1a00076c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000770:	f002 fd4a 	bl	1a003208 <__adddf3>
1a000774:	4604      	mov	r4, r0
1a000776:	460d      	mov	r5, r1
1a000778:	4630      	mov	r0, r6
1a00077a:	f002 fea3 	bl	1a0034c4 <__aeabi_f2d>
1a00077e:	ec41 0b10 	vmov	d0, r0, r1
1a000782:	f002 fa37 	bl	1a002bf4 <log10>
1a000786:	2200      	movs	r2, #0
1a000788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a00078c:	ec51 0b10 	vmov	r0, r1, d0
1a000790:	f002 fd38 	bl	1a003204 <__aeabi_dsub>
1a000794:	4602      	mov	r2, r0
1a000796:	460b      	mov	r3, r1
1a000798:	4620      	mov	r0, r4
1a00079a:	4629      	mov	r1, r5
1a00079c:	f002 fd34 	bl	1a003208 <__adddf3>
1a0007a0:	f003 f998 	bl	1a003ad4 <__aeabi_d2f>

	dewPoint = ( logEx - 0.66077 ) * 237.3 / ( 0.66077 + 7.5 - logEx );
1a0007a4:	f002 fe8e 	bl	1a0034c4 <__aeabi_f2d>
1a0007a8:	4606      	mov	r6, r0
1a0007aa:	460f      	mov	r7, r1
1a0007ac:	a312      	add	r3, pc, #72	; (adr r3, 1a0007f8 <SHT71_DEW_POINT+0xc8>)
1a0007ae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0007b2:	f002 fd27 	bl	1a003204 <__aeabi_dsub>
1a0007b6:	a30e      	add	r3, pc, #56	; (adr r3, 1a0007f0 <SHT71_DEW_POINT+0xc0>)
1a0007b8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0007bc:	f002 feda 	bl	1a003574 <__aeabi_dmul>
1a0007c0:	4604      	mov	r4, r0
1a0007c2:	460d      	mov	r5, r1
1a0007c4:	4632      	mov	r2, r6
1a0007c6:	463b      	mov	r3, r7
1a0007c8:	a10d      	add	r1, pc, #52	; (adr r1, 1a000800 <SHT71_DEW_POINT+0xd0>)
1a0007ca:	e9d1 0100 	ldrd	r0, r1, [r1]
1a0007ce:	f002 fd19 	bl	1a003204 <__aeabi_dsub>
1a0007d2:	4602      	mov	r2, r0
1a0007d4:	460b      	mov	r3, r1
1a0007d6:	4620      	mov	r0, r4
1a0007d8:	4629      	mov	r1, r5
1a0007da:	f002 fff5 	bl	1a0037c8 <__aeabi_ddiv>
1a0007de:	f003 f979 	bl	1a003ad4 <__aeabi_d2f>

	return dewPoint;
}
1a0007e2:	ee00 0a10 	vmov	s0, r0
1a0007e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0007ea:	bf00      	nop
1a0007ec:	f3af 8000 	nop.w
1a0007f0:	9999999a 	.word	0x9999999a
1a0007f4:	406da999 	.word	0x406da999
1a0007f8:	2085b185 	.word	0x2085b185
1a0007fc:	3fe52507 	.word	0x3fe52507
1a000800:	72085b18 	.word	0x72085b18
1a000804:	40205250 	.word	0x40205250
1a000808:	401e0000 	.word	0x401e0000

1a00080c <START_CONDITION_SHT71>:
	SDA_UP;   //Idle State for line & clock
	SCL_UP;
	delay(5);     //Espero 5 mS
}

void START_CONDITION_SHT71(void){
1a00080c:	b508      	push	{r3, lr}
// 4) TRANSICIÓN DE ALTO A BAJO DEL CLOCK  MIENTRAS ESTA EN ALTO EL DATA
// |--\______________/---|-------- DATA
// |------\______/-------|-\______ CLOCK
// RECORDAR QUE EN CNPT LOS DATOS CAMBIAN CUANDO CLOCK ESTA BAJO

	SDA_UP; //Inicio en alto
1a00080e:	2100      	movs	r1, #0
1a000810:	2020      	movs	r0, #32
1a000812:	f001 ffb3 	bl	1a00277c <gpioInit>
	SCL_UP;
1a000816:	2100      	movs	r1, #0
1a000818:	200f      	movs	r0, #15
1a00081a:	f001 ffaf 	bl	1a00277c <gpioInit>
	NOP;
1a00081e:	2001      	movs	r0, #1
1a000820:	2100      	movs	r1, #0
1a000822:	f002 f953 	bl	1a002acc <delay>
	SDA_DOWN;
1a000826:	2101      	movs	r1, #1
1a000828:	2020      	movs	r0, #32
1a00082a:	f001 ffa7 	bl	1a00277c <gpioInit>
	NOP;
1a00082e:	2001      	movs	r0, #1
1a000830:	2100      	movs	r1, #0
1a000832:	f002 f94b 	bl	1a002acc <delay>
	SCL_DOWN;
1a000836:	2101      	movs	r1, #1
1a000838:	200f      	movs	r0, #15
1a00083a:	f001 ff9f 	bl	1a00277c <gpioInit>
	NOP;
1a00083e:	2001      	movs	r0, #1
1a000840:	2100      	movs	r1, #0
1a000842:	f002 f943 	bl	1a002acc <delay>
	SCL_UP;
1a000846:	2100      	movs	r1, #0
1a000848:	200f      	movs	r0, #15
1a00084a:	f001 ff97 	bl	1a00277c <gpioInit>
	NOP;
1a00084e:	2001      	movs	r0, #1
1a000850:	2100      	movs	r1, #0
1a000852:	f002 f93b 	bl	1a002acc <delay>
	SDA_UP;
1a000856:	2100      	movs	r1, #0
1a000858:	2020      	movs	r0, #32
1a00085a:	f001 ff8f 	bl	1a00277c <gpioInit>
	NOP;
1a00085e:	2001      	movs	r0, #1
1a000860:	2100      	movs	r1, #0
1a000862:	f002 f933 	bl	1a002acc <delay>
	SCL_DOWN;
1a000866:	2101      	movs	r1, #1
1a000868:	200f      	movs	r0, #15
1a00086a:	f001 ff87 	bl	1a00277c <gpioInit>
	NOP;   //AQUI RETORNA CON SCK DOWN Y SDA UP
1a00086e:	2001      	movs	r0, #1
1a000870:	2100      	movs	r1, #0
1a000872:	f002 f92b 	bl	1a002acc <delay>
 }
1a000876:	bd08      	pop	{r3, pc}

1a000878 <I2C_OUTPUT>:
	//STOP_BIT();			//OUTPUT THE STOP BIT
*/
	return HUM_CRUDA;
}

void I2C_OUTPUT(void){
1a000878:	b510      	push	{r4, lr}
//LOOPEO LOS BITS DESDE LA IZQUIERDA DEL BYTE A ENVIAR
	for(uint8_t i = 0; i < 8; i++ ){
1a00087a:	2400      	movs	r4, #0
1a00087c:	e01d      	b.n	1a0008ba <I2C_OUTPUT+0x42>
		if (TX_BUFFER & 0b10000000){
			SDA_UP;		//DATA HIGH
1a00087e:	2100      	movs	r1, #0
1a000880:	2020      	movs	r0, #32
1a000882:	f001 ff7b 	bl	1a00277c <gpioInit>
		}else{
			SDA_DOWN;	//DATA LOW
		}
		TX_BUFFER = TX_BUFFER << 1;
1a000886:	4a15      	ldr	r2, [pc, #84]	; (1a0008dc <I2C_OUTPUT+0x64>)
1a000888:	7813      	ldrb	r3, [r2, #0]
1a00088a:	005b      	lsls	r3, r3, #1
1a00088c:	7013      	strb	r3, [r2, #0]
		NOP;
1a00088e:	2001      	movs	r0, #1
1a000890:	2100      	movs	r1, #0
1a000892:	f002 f91b 	bl	1a002acc <delay>
		//PULSO DEL CLOCK
		SCL_UP;			//CLOCK GOES HIGH
1a000896:	2100      	movs	r1, #0
1a000898:	200f      	movs	r0, #15
1a00089a:	f001 ff6f 	bl	1a00277c <gpioInit>
		NOP;
1a00089e:	2001      	movs	r0, #1
1a0008a0:	2100      	movs	r1, #0
1a0008a2:	f002 f913 	bl	1a002acc <delay>
		SCL_DOWN;		//CLOCK GOES ADDLOW AGAIN
1a0008a6:	2101      	movs	r1, #1
1a0008a8:	200f      	movs	r0, #15
1a0008aa:	f001 ff67 	bl	1a00277c <gpioInit>
		NOP;
1a0008ae:	2001      	movs	r0, #1
1a0008b0:	2100      	movs	r1, #0
1a0008b2:	f002 f90b 	bl	1a002acc <delay>
	for(uint8_t i = 0; i < 8; i++ ){
1a0008b6:	3401      	adds	r4, #1
1a0008b8:	b2e4      	uxtb	r4, r4
1a0008ba:	2c07      	cmp	r4, #7
1a0008bc:	d809      	bhi.n	1a0008d2 <I2C_OUTPUT+0x5a>
		if (TX_BUFFER & 0b10000000){
1a0008be:	4b07      	ldr	r3, [pc, #28]	; (1a0008dc <I2C_OUTPUT+0x64>)
1a0008c0:	f993 3000 	ldrsb.w	r3, [r3]
1a0008c4:	2b00      	cmp	r3, #0
1a0008c6:	dbda      	blt.n	1a00087e <I2C_OUTPUT+0x6>
			SDA_DOWN;	//DATA LOW
1a0008c8:	2101      	movs	r1, #1
1a0008ca:	2020      	movs	r0, #32
1a0008cc:	f001 ff56 	bl	1a00277c <gpioInit>
1a0008d0:	e7d9      	b.n	1a000886 <I2C_OUTPUT+0xe>
	}
	NOP;	//POR CULPA DE NO ESPERAR ESTE TIEMPO EL SSP DEL 16F819 NO ME DETECTABA EL STOP BIT
1a0008d2:	2001      	movs	r0, #1
1a0008d4:	2100      	movs	r1, #0
1a0008d6:	f002 f8f9 	bl	1a002acc <delay>
	//SALGO CON SCL DOWN Y SDA INDEFINIDO
}
1a0008da:	bd10      	pop	{r4, pc}
1a0008dc:	100004f5 	.word	0x100004f5

1a0008e0 <I2C_INPUT>:

void I2C_INPUT(void){
1a0008e0:	b510      	push	{r4, lr}
//SI VOY A LEER, EL BIT PASA AL MASTER EN EL FLANCO + DEL CLOCK
	SDA_UP;		//MAKE THE SDA LINE AN INPUT
1a0008e2:	2100      	movs	r1, #0
1a0008e4:	2020      	movs	r0, #32
1a0008e6:	f001 ff49 	bl	1a00277c <gpioInit>
	NOP;
1a0008ea:	2001      	movs	r0, #1
1a0008ec:	2100      	movs	r1, #0
1a0008ee:	f002 f8ed 	bl	1a002acc <delay>

	for(uint8_t i = 0; i < 8; i++ ){
1a0008f2:	2400      	movs	r4, #0
1a0008f4:	e00f      	b.n	1a000916 <I2C_INPUT+0x36>
			RX_BUFFER = RX_BUFFER + 1;
		}else{
			RX_BUFFER = RX_BUFFER + 0;
		}

		if ( i < 7 ) RX_BUFFER = RX_BUFFER << 1;
1a0008f6:	2c06      	cmp	r4, #6
1a0008f8:	d803      	bhi.n	1a000902 <I2C_INPUT+0x22>
1a0008fa:	4a13      	ldr	r2, [pc, #76]	; (1a000948 <I2C_INPUT+0x68>)
1a0008fc:	7813      	ldrb	r3, [r2, #0]
1a0008fe:	005b      	lsls	r3, r3, #1
1a000900:	7013      	strb	r3, [r2, #0]

		SCL_DOWN;	//RETURN CLOCK DOWN
1a000902:	2101      	movs	r1, #1
1a000904:	200f      	movs	r0, #15
1a000906:	f001 ff39 	bl	1a00277c <gpioInit>
		NOP;
1a00090a:	2001      	movs	r0, #1
1a00090c:	2100      	movs	r1, #0
1a00090e:	f002 f8dd 	bl	1a002acc <delay>
	for(uint8_t i = 0; i < 8; i++ ){
1a000912:	3401      	adds	r4, #1
1a000914:	b2e4      	uxtb	r4, r4
1a000916:	2c07      	cmp	r4, #7
1a000918:	d811      	bhi.n	1a00093e <I2C_INPUT+0x5e>
		SCL_UP;		//CLOCK BACK UP => FLANCO + DEL CLOCK
1a00091a:	2100      	movs	r1, #0
1a00091c:	200f      	movs	r0, #15
1a00091e:	f001 ff2d 	bl	1a00277c <gpioInit>
		NOP;
1a000922:	2001      	movs	r0, #1
1a000924:	2100      	movs	r1, #0
1a000926:	f002 f8d1 	bl	1a002acc <delay>
		if ( READ_SDA_PIN ){
1a00092a:	2020      	movs	r0, #32
1a00092c:	f002 f81b 	bl	1a002966 <gpioRead>
1a000930:	2800      	cmp	r0, #0
1a000932:	d0e0      	beq.n	1a0008f6 <I2C_INPUT+0x16>
			RX_BUFFER = RX_BUFFER + 1;
1a000934:	4a04      	ldr	r2, [pc, #16]	; (1a000948 <I2C_INPUT+0x68>)
1a000936:	7813      	ldrb	r3, [r2, #0]
1a000938:	3301      	adds	r3, #1
1a00093a:	7013      	strb	r3, [r2, #0]
1a00093c:	e7db      	b.n	1a0008f6 <I2C_INPUT+0x16>
	}
	NOP;	//POR CULPA DE NO ESPERAR ESTE TIEMPO EL SSP DEL 16F819 NO ME DETECTABA EL STOP BIT
1a00093e:	2001      	movs	r0, #1
1a000940:	2100      	movs	r1, #0
1a000942:	f002 f8c3 	bl	1a002acc <delay>
	//SALGO CON SCL DOWN Y SDA INDEFINIDO
}
1a000946:	bd10      	pop	{r4, pc}
1a000948:	100004f6 	.word	0x100004f6

1a00094c <GET_ACK>:


void GET_ACK(void){		//ACKNOWLEDGE
1a00094c:	b508      	push	{r3, lr}
//EL MASTER LEE Y GENERA UN PULSO PARA RECIBIR EL BIT DE RECONOCIMIENYO (ACK) DEL SLAVE
//CUANDO LO RECIBE, SETEA EN EL REGISTRO 'FLAGS_I2C' EL BOOLEANO  'ACK'
	SDA_UP;		//MAKE THE SDA LINE AN INPUT
1a00094e:	2100      	movs	r1, #0
1a000950:	2020      	movs	r0, #32
1a000952:	f001 ff13 	bl	1a00277c <gpioInit>
	NOP;
1a000956:	2001      	movs	r0, #1
1a000958:	2100      	movs	r1, #0
1a00095a:	f002 f8b7 	bl	1a002acc <delay>
	SCL_UP;		//CLOCK BACK UP
1a00095e:	2100      	movs	r1, #0
1a000960:	200f      	movs	r0, #15
1a000962:	f001 ff0b 	bl	1a00277c <gpioInit>
	NOP;
1a000966:	2001      	movs	r0, #1
1a000968:	2100      	movs	r1, #0
1a00096a:	f002 f8af 	bl	1a002acc <delay>

	//TEST FOR LOW ACK (EL ACK DEBE SER BAJO)
	if ( READ_SDA_PIN ){
1a00096e:	2020      	movs	r0, #32
1a000970:	f001 fff9 	bl	1a002966 <gpioRead>
1a000974:	b958      	cbnz	r0, 1a00098e <GET_ACK+0x42>
		//SET THE ACK FLAG=1 -> I2C SI RECONOCIO! :) -> SHT71 NO RECONOCIO :)
		FLAGS_I2C.ACK = TRUE;
	}else{
		//SET THE ACK FLAG=0 -> I2C NO RECONOCIO! :( -> SHT71 SI RECONOCIO :)
		FLAGS_I2C.ACK = FALSE;
1a000976:	4b08      	ldr	r3, [pc, #32]	; (1a000998 <GET_ACK+0x4c>)
1a000978:	2200      	movs	r2, #0
1a00097a:	701a      	strb	r2, [r3, #0]
	}
	SCL_DOWN;	//RETURN CLOCK ADDLOW
1a00097c:	2101      	movs	r1, #1
1a00097e:	200f      	movs	r0, #15
1a000980:	f001 fefc 	bl	1a00277c <gpioInit>
	NOP;
1a000984:	2001      	movs	r0, #1
1a000986:	2100      	movs	r1, #0
1a000988:	f002 f8a0 	bl	1a002acc <delay>
	//SALGO CON SCL DOWN Y SDA UP
}
1a00098c:	bd08      	pop	{r3, pc}
		FLAGS_I2C.ACK = TRUE;
1a00098e:	4b02      	ldr	r3, [pc, #8]	; (1a000998 <GET_ACK+0x4c>)
1a000990:	2201      	movs	r2, #1
1a000992:	701a      	strb	r2, [r3, #0]
1a000994:	e7f2      	b.n	1a00097c <GET_ACK+0x30>
1a000996:	bf00      	nop
1a000998:	10000510 	.word	0x10000510

1a00099c <SEND_ACK>:

void SEND_ACK(void){
1a00099c:	b508      	push	{r3, lr}
//CUANDO SE LEE (AL SLAVE), EL MASTER DEBE DAR EL ACK POR CADA BYTE RECIBIDO, EXCEPTO EN EL ÚLTIMO DE TODOS
//EL MASTER AL FINAL DEL ÚLTIMO BYTE RECIBIDO DEBE DAR UN NO-ACK, PARA INDICAR QUE SE ACABO LA TRANSACCIÓN
	SDA_DOWN;	//DATA LINE DOWN
1a00099e:	2101      	movs	r1, #1
1a0009a0:	2020      	movs	r0, #32
1a0009a2:	f001 feeb 	bl	1a00277c <gpioInit>
	NOP;
1a0009a6:	2001      	movs	r0, #1
1a0009a8:	2100      	movs	r1, #0
1a0009aa:	f002 f88f 	bl	1a002acc <delay>
	SCL_UP;		//CLOCK GOES HIGH
1a0009ae:	2100      	movs	r1, #0
1a0009b0:	200f      	movs	r0, #15
1a0009b2:	f001 fee3 	bl	1a00277c <gpioInit>
	NOP;
1a0009b6:	2001      	movs	r0, #1
1a0009b8:	2100      	movs	r1, #0
1a0009ba:	f002 f887 	bl	1a002acc <delay>
	SCL_DOWN;	//CLOCK GOES DOWN
1a0009be:	2101      	movs	r1, #1
1a0009c0:	200f      	movs	r0, #15
1a0009c2:	f001 fedb 	bl	1a00277c <gpioInit>
	NOP;
1a0009c6:	2001      	movs	r0, #1
1a0009c8:	2100      	movs	r1, #0
1a0009ca:	f002 f87f 	bl	1a002acc <delay>
 	//SALGO CON SCL DOWN Y SDA DOWN
}
1a0009ce:	bd08      	pop	{r3, pc}

1a0009d0 <NO_ACK>:


//
void NO_ACK(void){
1a0009d0:	b508      	push	{r3, lr}
//AQUI ESTÁ EL NO-ACK QUE EL MASTER DEBE ENVIAR AL FINAL DEL ÚLTIMO BYTE RECIBIDO, PARA INDICAR QUE SE ACABO LA TRANSACCIÓN
	SDA_UP;		//DATA HIGH
1a0009d2:	2100      	movs	r1, #0
1a0009d4:	2020      	movs	r0, #32
1a0009d6:	f001 fed1 	bl	1a00277c <gpioInit>
	NOP;
1a0009da:	2001      	movs	r0, #1
1a0009dc:	2100      	movs	r1, #0
1a0009de:	f002 f875 	bl	1a002acc <delay>
	SCL_UP;		//CLOCK GOES HIGH
1a0009e2:	2100      	movs	r1, #0
1a0009e4:	200f      	movs	r0, #15
1a0009e6:	f001 fec9 	bl	1a00277c <gpioInit>
	NOP;
1a0009ea:	2001      	movs	r0, #1
1a0009ec:	2100      	movs	r1, #0
1a0009ee:	f002 f86d 	bl	1a002acc <delay>
	SCL_DOWN;	//CLOCK GOES DOWN
1a0009f2:	2101      	movs	r1, #1
1a0009f4:	200f      	movs	r0, #15
1a0009f6:	f001 fec1 	bl	1a00277c <gpioInit>
	NOP;
1a0009fa:	2001      	movs	r0, #1
1a0009fc:	2100      	movs	r1, #0
1a0009fe:	f002 f865 	bl	1a002acc <delay>
	//SALGO CON SCL DOWN Y SDA UP
}
1a000a02:	bd08      	pop	{r3, pc}

1a000a04 <SHT71_WRITE_STATUS_REGISTER>:
void SHT71_WRITE_STATUS_REGISTER(uint8_t elStausReg){
1a000a04:	b538      	push	{r3, r4, r5, lr}
1a000a06:	4605      	mov	r5, r0
	START_CONDITION_SHT71();		//OUTPUT THE START CONDITION
1a000a08:	f7ff ff00 	bl	1a00080c <START_CONDITION_SHT71>
	TX_BUFFER = CMD_SHT71_WRITE_STATUS_REG;
1a000a0c:	4c07      	ldr	r4, [pc, #28]	; (1a000a2c <SHT71_WRITE_STATUS_REGISTER+0x28>)
1a000a0e:	2306      	movs	r3, #6
1a000a10:	7023      	strb	r3, [r4, #0]
	I2C_OUTPUT();			//OUTPUT THE DATA ON PORT
1a000a12:	f7ff ff31 	bl	1a000878 <I2C_OUTPUT>
	GET_ACK();				//GET ACK BIT
1a000a16:	f7ff ff99 	bl	1a00094c <GET_ACK>
	TX_BUFFER = elStausReg;	//SEND TO THE BUFFER
1a000a1a:	7025      	strb	r5, [r4, #0]
	I2C_OUTPUT();			//OUTPUT THE DATA ON PORT
1a000a1c:	f7ff ff2c 	bl	1a000878 <I2C_OUTPUT>
	GET_ACK();				//GET ACK BIT
1a000a20:	f7ff ff94 	bl	1a00094c <GET_ACK>
	NO_ACK();				//EL STF71 TERMINA CON UN NO_ACK
1a000a24:	f7ff ffd4 	bl	1a0009d0 <NO_ACK>
}
1a000a28:	bd38      	pop	{r3, r4, r5, pc}
1a000a2a:	bf00      	nop
1a000a2c:	100004f5 	.word	0x100004f5

1a000a30 <SHT71_SET_STATUS>:
void SHT71_SET_STATUS( unsigned char elStatus ){
1a000a30:	b508      	push	{r3, lr}
	LAST_STATUS_REG_SET = elStatus;
1a000a32:	4b02      	ldr	r3, [pc, #8]	; (1a000a3c <SHT71_SET_STATUS+0xc>)
1a000a34:	7018      	strb	r0, [r3, #0]
	SHT71_WRITE_STATUS_REGISTER(elStatus);
1a000a36:	f7ff ffe5 	bl	1a000a04 <SHT71_WRITE_STATUS_REGISTER>
}
1a000a3a:	bd08      	pop	{r3, pc}
1a000a3c:	100004ba 	.word	0x100004ba

1a000a40 <SHT71_READ_STATUS_REGISTER>:
uint8_t SHT71_READ_STATUS_REGISTER(void){
1a000a40:	b538      	push	{r3, r4, r5, lr}
	START_CONDITION_SHT71();		//OUTPUT THE START CONDITION
1a000a42:	f7ff fee3 	bl	1a00080c <START_CONDITION_SHT71>
	TX_BUFFER = CMD_SHT71_READ_STATUS_REG;
1a000a46:	4b10      	ldr	r3, [pc, #64]	; (1a000a88 <SHT71_READ_STATUS_REGISTER+0x48>)
1a000a48:	2207      	movs	r2, #7
1a000a4a:	701a      	strb	r2, [r3, #0]
	I2C_OUTPUT();
1a000a4c:	f7ff ff14 	bl	1a000878 <I2C_OUTPUT>
	GET_ACK();
1a000a50:	f7ff ff7c 	bl	1a00094c <GET_ACK>
	NOP;			//SMALL DELAY
1a000a54:	2001      	movs	r0, #1
1a000a56:	2100      	movs	r1, #0
1a000a58:	f002 f838 	bl	1a002acc <delay>
	I2C_INPUT();	//GET THE DATA BYTE.
1a000a5c:	f7ff ff40 	bl	1a0008e0 <I2C_INPUT>
	REG_STATUS_REGISTER = RX_BUFFER;
1a000a60:	4c0a      	ldr	r4, [pc, #40]	; (1a000a8c <SHT71_READ_STATUS_REGISTER+0x4c>)
1a000a62:	4d0b      	ldr	r5, [pc, #44]	; (1a000a90 <SHT71_READ_STATUS_REGISTER+0x50>)
1a000a64:	782b      	ldrb	r3, [r5, #0]
1a000a66:	7023      	strb	r3, [r4, #0]
 	SEND_ACK();		//SEND ACK BIT
1a000a68:	f7ff ff98 	bl	1a00099c <SEND_ACK>
	NOP;			//SMALL DELAY
1a000a6c:	2001      	movs	r0, #1
1a000a6e:	2100      	movs	r1, #0
1a000a70:	f002 f82c 	bl	1a002acc <delay>
	I2C_INPUT();
1a000a74:	f7ff ff34 	bl	1a0008e0 <I2C_INPUT>
	REG_CHECKSUM = 	RX_BUFFER;
1a000a78:	782a      	ldrb	r2, [r5, #0]
1a000a7a:	4b06      	ldr	r3, [pc, #24]	; (1a000a94 <SHT71_READ_STATUS_REGISTER+0x54>)
1a000a7c:	701a      	strb	r2, [r3, #0]
	NO_ACK();		//SEND A NOT ACK sht71
1a000a7e:	f7ff ffa7 	bl	1a0009d0 <NO_ACK>
}
1a000a82:	7820      	ldrb	r0, [r4, #0]
1a000a84:	bd38      	pop	{r3, r4, r5, pc}
1a000a86:	bf00      	nop
1a000a88:	100004f5 	.word	0x100004f5
1a000a8c:	100004c2 	.word	0x100004c2
1a000a90:	100004f6 	.word	0x100004f6
1a000a94:	100004c1 	.word	0x100004c1

1a000a98 <SHT71_READ_TEMPERATURA_CRUDA>:
uint16_t SHT71_READ_TEMPERATURA_CRUDA(void){
1a000a98:	b570      	push	{r4, r5, r6, lr}
	START_CONDITION_SHT71();	//OUTPUT THE START CONDITION
1a000a9a:	f7ff feb7 	bl	1a00080c <START_CONDITION_SHT71>
	TX_BUFFER = CMD_SHT71_READ_TEMPERATURA;
1a000a9e:	4b18      	ldr	r3, [pc, #96]	; (1a000b00 <SHT71_READ_TEMPERATURA_CRUDA+0x68>)
1a000aa0:	2203      	movs	r2, #3
1a000aa2:	701a      	strb	r2, [r3, #0]
	I2C_OUTPUT();			//OUTPUT THE DATA ON PORT
1a000aa4:	f7ff fee8 	bl	1a000878 <I2C_OUTPUT>
	GET_ACK();				//GET ACK BIT
1a000aa8:	f7ff ff50 	bl	1a00094c <GET_ACK>
	SDA_UP;					//HAGO DE LA LINEA SDA UNA ENTRADA
1a000aac:	2100      	movs	r1, #0
1a000aae:	2020      	movs	r0, #32
1a000ab0:	f001 fe64 	bl	1a00277c <gpioInit>
	gpioWrite(LED2, ON);        //Show de luces
1a000ab4:	2101      	movs	r1, #1
1a000ab6:	202c      	movs	r0, #44	; 0x2c
1a000ab8:	f001 ff2a 	bl	1a002910 <gpioWrite>
		NOP;
1a000abc:	2001      	movs	r0, #1
1a000abe:	2100      	movs	r1, #0
1a000ac0:	f002 f804 	bl	1a002acc <delay>
	}while( READ_SDA_PIN );
1a000ac4:	2020      	movs	r0, #32
1a000ac6:	f001 ff4e 	bl	1a002966 <gpioRead>
1a000aca:	2800      	cmp	r0, #0
1a000acc:	d1f6      	bne.n	1a000abc <SHT71_READ_TEMPERATURA_CRUDA+0x24>
	gpioWrite(LED2, OFF);
1a000ace:	2100      	movs	r1, #0
1a000ad0:	202c      	movs	r0, #44	; 0x2c
1a000ad2:	f001 ff1d 	bl	1a002910 <gpioWrite>
	I2C_INPUT();			//GET THE DATA BYTE.
1a000ad6:	f7ff ff03 	bl	1a0008e0 <I2C_INPUT>
	TEMP_CRUDA = RX_BUFFER;	//AND MOVE IT TO DATA IN
1a000ada:	4d0a      	ldr	r5, [pc, #40]	; (1a000b04 <SHT71_READ_TEMPERATURA_CRUDA+0x6c>)
1a000adc:	782e      	ldrb	r6, [r5, #0]
	SEND_ACK();				//SEND ACK BIT
1a000ade:	f7ff ff5d 	bl	1a00099c <SEND_ACK>
	NOP;					//SMALL DELAY
1a000ae2:	2001      	movs	r0, #1
1a000ae4:	2100      	movs	r1, #0
1a000ae6:	f001 fff1 	bl	1a002acc <delay>
	I2C_INPUT();			//GET THE DATA BYTE.
1a000aea:	f7ff fef9 	bl	1a0008e0 <I2C_INPUT>
	TEMP_CRUDA += RX_BUFFER;
1a000aee:	782c      	ldrb	r4, [r5, #0]
1a000af0:	eb04 2406 	add.w	r4, r4, r6, lsl #8
1a000af4:	b2a4      	uxth	r4, r4
	NO_ACK();				//SI MANDO NOT ACK NO RECIBO EL CHECKSUM Y SE TERMINA AQUI
1a000af6:	f7ff ff6b 	bl	1a0009d0 <NO_ACK>
};
1a000afa:	4620      	mov	r0, r4
1a000afc:	bd70      	pop	{r4, r5, r6, pc}
1a000afe:	bf00      	nop
1a000b00:	100004f5 	.word	0x100004f5
1a000b04:	100004f6 	.word	0x100004f6

1a000b08 <SHT71_READ_TEMPERATURA>:
float SHT71_READ_TEMPERATURA(void){
1a000b08:	b510      	push	{r4, lr}
		tempCruda = SHT71_READ_TEMPERATURA_CRUDA();
1a000b0a:	f7ff ffc5 	bl	1a000a98 <SHT71_READ_TEMPERATURA_CRUDA>
1a000b0e:	4604      	mov	r4, r0
		NOP;
1a000b10:	2001      	movs	r0, #1
1a000b12:	2100      	movs	r1, #0
1a000b14:	f001 ffda 	bl	1a002acc <delay>
	while( tempCruda > 14000 );  //Esta verificación me ahorra del checksum. . . :)
1a000b18:	f243 63b0 	movw	r3, #14000	; 0x36b0
1a000b1c:	429c      	cmp	r4, r3
1a000b1e:	d8f4      	bhi.n	1a000b0a <SHT71_READ_TEMPERATURA+0x2>
	if( LAST_STATUS_REG_SET & 0b00000001 ){
1a000b20:	4b0b      	ldr	r3, [pc, #44]	; (1a000b50 <SHT71_READ_TEMPERATURA+0x48>)
1a000b22:	781b      	ldrb	r3, [r3, #0]
1a000b24:	f013 0f01 	tst.w	r3, #1
1a000b28:	d10f      	bne.n	1a000b4a <SHT71_READ_TEMPERATURA+0x42>
		d2 = 0.01;
1a000b2a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1a000b54 <SHT71_READ_TEMPERATURA+0x4c>
	temperatura = d2 * (float)tempCruda + d1;
1a000b2e:	ee07 4a10 	vmov	s14, r4
1a000b32:	eeb8 0a47 	vcvt.f32.u32	s0, s14
1a000b36:	ee20 0a27 	vmul.f32	s0, s0, s15
1a000b3a:	eddf 7a07 	vldr	s15, [pc, #28]	; 1a000b58 <SHT71_READ_TEMPERATURA+0x50>
1a000b3e:	ee30 0a67 	vsub.f32	s0, s0, s15
1a000b42:	4b06      	ldr	r3, [pc, #24]	; (1a000b5c <SHT71_READ_TEMPERATURA+0x54>)
1a000b44:	ed83 0a00 	vstr	s0, [r3]
}
1a000b48:	bd10      	pop	{r4, pc}
		d2 = 0.04;
1a000b4a:	eddf 7a05 	vldr	s15, [pc, #20]	; 1a000b60 <SHT71_READ_TEMPERATURA+0x58>
1a000b4e:	e7ee      	b.n	1a000b2e <SHT71_READ_TEMPERATURA+0x26>
1a000b50:	100004ba 	.word	0x100004ba
1a000b54:	3c23d70a 	.word	0x3c23d70a
1a000b58:	421ea3d7 	.word	0x421ea3d7
1a000b5c:	10000514 	.word	0x10000514
1a000b60:	3d23d70a 	.word	0x3d23d70a

1a000b64 <SHT71_READ_HUMEDAD_CRUDA>:
uint16_t SHT71_READ_HUMEDAD_CRUDA(void){
1a000b64:	b570      	push	{r4, r5, r6, lr}
	START_CONDITION_SHT71();	//OUTPUT THE START CONDITION
1a000b66:	f7ff fe51 	bl	1a00080c <START_CONDITION_SHT71>
	TX_BUFFER = CMD_SHT71_READ_HUMEDAD;		//TO OUTPUT BUFFER
1a000b6a:	4b18      	ldr	r3, [pc, #96]	; (1a000bcc <SHT71_READ_HUMEDAD_CRUDA+0x68>)
1a000b6c:	2205      	movs	r2, #5
1a000b6e:	701a      	strb	r2, [r3, #0]
	I2C_OUTPUT();				//OUTPUT THE DATA ON PORT
1a000b70:	f7ff fe82 	bl	1a000878 <I2C_OUTPUT>
	GET_ACK();					//GET ACK BIT
1a000b74:	f7ff feea 	bl	1a00094c <GET_ACK>
	SDA_UP;						//HAGO DE LA LINEA SDA UNA ENTRADA
1a000b78:	2100      	movs	r1, #0
1a000b7a:	2020      	movs	r0, #32
1a000b7c:	f001 fdfe 	bl	1a00277c <gpioInit>
	gpioWrite(LED3, ON);        //Show de luces
1a000b80:	2101      	movs	r1, #1
1a000b82:	202d      	movs	r0, #45	; 0x2d
1a000b84:	f001 fec4 	bl	1a002910 <gpioWrite>
		NOP;
1a000b88:	2001      	movs	r0, #1
1a000b8a:	2100      	movs	r1, #0
1a000b8c:	f001 ff9e 	bl	1a002acc <delay>
	}while( READ_SDA_PIN );
1a000b90:	2020      	movs	r0, #32
1a000b92:	f001 fee8 	bl	1a002966 <gpioRead>
1a000b96:	2800      	cmp	r0, #0
1a000b98:	d1f6      	bne.n	1a000b88 <SHT71_READ_HUMEDAD_CRUDA+0x24>
	gpioWrite(LED3, OFF);
1a000b9a:	2100      	movs	r1, #0
1a000b9c:	202d      	movs	r0, #45	; 0x2d
1a000b9e:	f001 feb7 	bl	1a002910 <gpioWrite>
	I2C_INPUT();			//GET THE DATA BYTE.
1a000ba2:	f7ff fe9d 	bl	1a0008e0 <I2C_INPUT>
	HUM_CRUDA = RX_BUFFER;
1a000ba6:	4d0a      	ldr	r5, [pc, #40]	; (1a000bd0 <SHT71_READ_HUMEDAD_CRUDA+0x6c>)
1a000ba8:	782e      	ldrb	r6, [r5, #0]
	SEND_ACK();				//SEND ACK BIT
1a000baa:	f7ff fef7 	bl	1a00099c <SEND_ACK>
	NOP;					//SMALL DELAY
1a000bae:	2001      	movs	r0, #1
1a000bb0:	2100      	movs	r1, #0
1a000bb2:	f001 ff8b 	bl	1a002acc <delay>
	I2C_INPUT();			//GET THE DATA BYTE.
1a000bb6:	f7ff fe93 	bl	1a0008e0 <I2C_INPUT>
	HUM_CRUDA += RX_BUFFER;
1a000bba:	782c      	ldrb	r4, [r5, #0]
1a000bbc:	eb04 2406 	add.w	r4, r4, r6, lsl #8
1a000bc0:	b2a4      	uxth	r4, r4
	NO_ACK();				//SEND A NOT ACK
1a000bc2:	f7ff ff05 	bl	1a0009d0 <NO_ACK>
}
1a000bc6:	4620      	mov	r0, r4
1a000bc8:	bd70      	pop	{r4, r5, r6, pc}
1a000bca:	bf00      	nop
1a000bcc:	100004f5 	.word	0x100004f5
1a000bd0:	100004f6 	.word	0x100004f6

1a000bd4 <SHT71_READ_HUMEDAD>:
float SHT71_READ_HUMEDAD(void){
1a000bd4:	b510      	push	{r4, lr}
		humCruda = SHT71_READ_HUMEDAD_CRUDA();
1a000bd6:	f7ff ffc5 	bl	1a000b64 <SHT71_READ_HUMEDAD_CRUDA>
1a000bda:	4604      	mov	r4, r0
		NOP;
1a000bdc:	2001      	movs	r0, #1
1a000bde:	2100      	movs	r1, #0
1a000be0:	f001 ff74 	bl	1a002acc <delay>
	while( humCruda > 2567 ); //Esta verificación me ahorra del checksum. . . :)
1a000be4:	f640 2307 	movw	r3, #2567	; 0xa07
1a000be8:	429c      	cmp	r4, r3
1a000bea:	d8f4      	bhi.n	1a000bd6 <SHT71_READ_HUMEDAD+0x2>
	if( LAST_STATUS_REG_SET & SHT71_LOW_RES ){
1a000bec:	4b20      	ldr	r3, [pc, #128]	; (1a000c70 <SHT71_READ_HUMEDAD+0x9c>)
1a000bee:	781b      	ldrb	r3, [r3, #0]
1a000bf0:	f013 0f01 	tst.w	r3, #1
1a000bf4:	d035      	beq.n	1a000c62 <SHT71_READ_HUMEDAD+0x8e>
		t1 = 0.01; t2 = 0.00008;
1a000bf6:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 1a000c74 <SHT71_READ_HUMEDAD+0xa0>
		c1 = -4;   c2 = 0.648;  c3 = -7.2e-4;
1a000bfa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1a000c78 <SHT71_READ_HUMEDAD+0xa4>
1a000bfe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 1a000c7c <SHT71_READ_HUMEDAD+0xa8>
	SOrh = (float)humCruda;
1a000c02:	ee07 4a90 	vmov	s15, r4
1a000c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
	humedad = c1 + c2 * SOrh + c3 * SOrh * SOrh;
1a000c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
1a000c0e:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
1a000c12:	ee37 7a65 	vsub.f32	s14, s14, s11
1a000c16:	ee66 6aa7 	vmul.f32	s13, s13, s15
1a000c1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
1a000c1e:	ee37 7a26 	vadd.f32	s14, s14, s13
1a000c22:	4b17      	ldr	r3, [pc, #92]	; (1a000c80 <SHT71_READ_HUMEDAD+0xac>)
1a000c24:	ed83 7a00 	vstr	s14, [r3]
	if ( temperatura > 0 ) humedad = (temperatura - 25) * ( t1 + t2 * SOrh ) + humedad;
1a000c28:	4b16      	ldr	r3, [pc, #88]	; (1a000c84 <SHT71_READ_HUMEDAD+0xb0>)
1a000c2a:	edd3 6a00 	vldr	s13, [r3]
1a000c2e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
1a000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000c36:	dd10      	ble.n	1a000c5a <SHT71_READ_HUMEDAD+0x86>
1a000c38:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
1a000c3c:	ee76 6ae5 	vsub.f32	s13, s13, s11
1a000c40:	ee66 7a27 	vmul.f32	s15, s12, s15
1a000c44:	ed9f 6a10 	vldr	s12, [pc, #64]	; 1a000c88 <SHT71_READ_HUMEDAD+0xb4>
1a000c48:	ee77 7a86 	vadd.f32	s15, s15, s12
1a000c4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
1a000c50:	ee37 7a26 	vadd.f32	s14, s14, s13
1a000c54:	4b0a      	ldr	r3, [pc, #40]	; (1a000c80 <SHT71_READ_HUMEDAD+0xac>)
1a000c56:	ed83 7a00 	vstr	s14, [r3]
}
1a000c5a:	4b09      	ldr	r3, [pc, #36]	; (1a000c80 <SHT71_READ_HUMEDAD+0xac>)
1a000c5c:	ed93 0a00 	vldr	s0, [r3]
1a000c60:	bd10      	pop	{r4, pc}
		t1 = 0.01; t2 = 0.00128;
1a000c62:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 1a000c8c <SHT71_READ_HUMEDAD+0xb8>
		c1 = -4;   c2 = 0.0405; c3 = -2.8e-6;
1a000c66:	eddf 6a0a 	vldr	s13, [pc, #40]	; 1a000c90 <SHT71_READ_HUMEDAD+0xbc>
1a000c6a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1a000c94 <SHT71_READ_HUMEDAD+0xc0>
1a000c6e:	e7c8      	b.n	1a000c02 <SHT71_READ_HUMEDAD+0x2e>
1a000c70:	100004ba 	.word	0x100004ba
1a000c74:	38a7c5ac 	.word	0x38a7c5ac
1a000c78:	ba3cbe62 	.word	0xba3cbe62
1a000c7c:	3f25e354 	.word	0x3f25e354
1a000c80:	10000508 	.word	0x10000508
1a000c84:	10000514 	.word	0x10000514
1a000c88:	3c23d70a 	.word	0x3c23d70a
1a000c8c:	3aa7c5ac 	.word	0x3aa7c5ac
1a000c90:	b63be7a2 	.word	0xb63be7a2
1a000c94:	3d25e354 	.word	0x3d25e354

1a000c98 <BIN16_A_DIGITAL5>:
void BIN16_A_DIGITAL5(uint8_t HADD, uint8_t LADD){
//Si, si. Ya sé Eric. Podria haber hecho directamente que tome un uint16_t pero pienso volver a usar este código y me gusta así

//convierte un uint_16 formando por dos mitades uint8_t en dígitos ascii que guarta en el arreglo NUM[5]

	NUM[0] = 0; NUM[1] = 0; NUM[2] = 0; NUM[3] = 0; NUM[4] = 0;
1a000c98:	4b84      	ldr	r3, [pc, #528]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000c9a:	2200      	movs	r2, #0
1a000c9c:	701a      	strb	r2, [r3, #0]
1a000c9e:	705a      	strb	r2, [r3, #1]
1a000ca0:	709a      	strb	r2, [r3, #2]
1a000ca2:	70da      	strb	r2, [r3, #3]
1a000ca4:	711a      	strb	r2, [r3, #4]

	//BLOQUE DE PASAR DE BINARIO A GRUPOS DE UNIDADES, DECENAS, CENTENAS, MILES. ETC
	if (LADD & 0b00000001){ NUM[0] +=1; }//1
1a000ca6:	f011 0f01 	tst.w	r1, #1
1a000caa:	d001      	beq.n	1a000cb0 <BIN16_A_DIGITAL5+0x18>
1a000cac:	2201      	movs	r2, #1
1a000cae:	701a      	strb	r2, [r3, #0]
	if (LADD & 0b00000010){ NUM[0] +=2; }//2
1a000cb0:	f011 0f02 	tst.w	r1, #2
1a000cb4:	d003      	beq.n	1a000cbe <BIN16_A_DIGITAL5+0x26>
1a000cb6:	4a7d      	ldr	r2, [pc, #500]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000cb8:	7813      	ldrb	r3, [r2, #0]
1a000cba:	3302      	adds	r3, #2
1a000cbc:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00000100){ NUM[0] +=4; }//4
1a000cbe:	f011 0f04 	tst.w	r1, #4
1a000cc2:	d003      	beq.n	1a000ccc <BIN16_A_DIGITAL5+0x34>
1a000cc4:	4a79      	ldr	r2, [pc, #484]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000cc6:	7813      	ldrb	r3, [r2, #0]
1a000cc8:	3304      	adds	r3, #4
1a000cca:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00001000){ NUM[0] +=8; }//8
1a000ccc:	f011 0f08 	tst.w	r1, #8
1a000cd0:	d003      	beq.n	1a000cda <BIN16_A_DIGITAL5+0x42>
1a000cd2:	4a76      	ldr	r2, [pc, #472]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000cd4:	7813      	ldrb	r3, [r2, #0]
1a000cd6:	3308      	adds	r3, #8
1a000cd8:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00010000){ NUM[0] +=6; NUM[1] += 1; }//16
1a000cda:	f011 0f10 	tst.w	r1, #16
1a000cde:	d005      	beq.n	1a000cec <BIN16_A_DIGITAL5+0x54>
1a000ce0:	4b72      	ldr	r3, [pc, #456]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000ce2:	781a      	ldrb	r2, [r3, #0]
1a000ce4:	3206      	adds	r2, #6
1a000ce6:	701a      	strb	r2, [r3, #0]
1a000ce8:	2201      	movs	r2, #1
1a000cea:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b00100000){ NUM[0] +=2; NUM[1] += 3; }//32
1a000cec:	f011 0f20 	tst.w	r1, #32
1a000cf0:	d006      	beq.n	1a000d00 <BIN16_A_DIGITAL5+0x68>
1a000cf2:	4b6e      	ldr	r3, [pc, #440]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000cf4:	781a      	ldrb	r2, [r3, #0]
1a000cf6:	3202      	adds	r2, #2
1a000cf8:	701a      	strb	r2, [r3, #0]
1a000cfa:	785a      	ldrb	r2, [r3, #1]
1a000cfc:	3203      	adds	r2, #3
1a000cfe:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b01000000){ NUM[0] +=4; NUM[1] += 6; }//64
1a000d00:	f011 0f40 	tst.w	r1, #64	; 0x40
1a000d04:	d006      	beq.n	1a000d14 <BIN16_A_DIGITAL5+0x7c>
1a000d06:	4b69      	ldr	r3, [pc, #420]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000d08:	781a      	ldrb	r2, [r3, #0]
1a000d0a:	3204      	adds	r2, #4
1a000d0c:	701a      	strb	r2, [r3, #0]
1a000d0e:	785a      	ldrb	r2, [r3, #1]
1a000d10:	3206      	adds	r2, #6
1a000d12:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b10000000){ NUM[0] +=8; NUM[1] += 2; NUM[2] += 1; }//128
1a000d14:	f011 0f80 	tst.w	r1, #128	; 0x80
1a000d18:	d173      	bne.n	1a000e02 <BIN16_A_DIGITAL5+0x16a>

	if (HADD & 0b00000001){ NUM[0] +=6; NUM[1] += 5; NUM[2] += 2; }//256
1a000d1a:	f010 0f01 	tst.w	r0, #1
1a000d1e:	d009      	beq.n	1a000d34 <BIN16_A_DIGITAL5+0x9c>
1a000d20:	4b62      	ldr	r3, [pc, #392]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000d22:	781a      	ldrb	r2, [r3, #0]
1a000d24:	3206      	adds	r2, #6
1a000d26:	701a      	strb	r2, [r3, #0]
1a000d28:	785a      	ldrb	r2, [r3, #1]
1a000d2a:	3205      	adds	r2, #5
1a000d2c:	705a      	strb	r2, [r3, #1]
1a000d2e:	789a      	ldrb	r2, [r3, #2]
1a000d30:	3202      	adds	r2, #2
1a000d32:	709a      	strb	r2, [r3, #2]
	if (HADD & 0b00000010){ NUM[0] +=2; NUM[1] += 1; NUM[2] += 5; }//512
1a000d34:	f010 0f02 	tst.w	r0, #2
1a000d38:	d009      	beq.n	1a000d4e <BIN16_A_DIGITAL5+0xb6>
1a000d3a:	4b5c      	ldr	r3, [pc, #368]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000d3c:	781a      	ldrb	r2, [r3, #0]
1a000d3e:	3202      	adds	r2, #2
1a000d40:	701a      	strb	r2, [r3, #0]
1a000d42:	785a      	ldrb	r2, [r3, #1]
1a000d44:	3201      	adds	r2, #1
1a000d46:	705a      	strb	r2, [r3, #1]
1a000d48:	789a      	ldrb	r2, [r3, #2]
1a000d4a:	3205      	adds	r2, #5
1a000d4c:	709a      	strb	r2, [r3, #2]
	if (HADD & 0b00000100){ NUM[0] +=4; NUM[1] += 2; NUM[2] += 0; NUM[3] += 1; }//1024
1a000d4e:	f010 0f04 	tst.w	r0, #4
1a000d52:	d008      	beq.n	1a000d66 <BIN16_A_DIGITAL5+0xce>
1a000d54:	4b55      	ldr	r3, [pc, #340]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000d56:	781a      	ldrb	r2, [r3, #0]
1a000d58:	3204      	adds	r2, #4
1a000d5a:	701a      	strb	r2, [r3, #0]
1a000d5c:	785a      	ldrb	r2, [r3, #1]
1a000d5e:	3202      	adds	r2, #2
1a000d60:	705a      	strb	r2, [r3, #1]
1a000d62:	2201      	movs	r2, #1
1a000d64:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00001000){ NUM[0] +=8; NUM[1] += 4; NUM[2] += 0; NUM[3] += 2; }//2048
1a000d66:	f010 0f08 	tst.w	r0, #8
1a000d6a:	d009      	beq.n	1a000d80 <BIN16_A_DIGITAL5+0xe8>
1a000d6c:	4b4f      	ldr	r3, [pc, #316]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000d6e:	781a      	ldrb	r2, [r3, #0]
1a000d70:	3208      	adds	r2, #8
1a000d72:	701a      	strb	r2, [r3, #0]
1a000d74:	785a      	ldrb	r2, [r3, #1]
1a000d76:	3204      	adds	r2, #4
1a000d78:	705a      	strb	r2, [r3, #1]
1a000d7a:	78da      	ldrb	r2, [r3, #3]
1a000d7c:	3202      	adds	r2, #2
1a000d7e:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00010000){ NUM[0] +=6; NUM[1] += 9; NUM[2] += 0; NUM[3] += 4; }//4096
1a000d80:	f010 0f10 	tst.w	r0, #16
1a000d84:	d009      	beq.n	1a000d9a <BIN16_A_DIGITAL5+0x102>
1a000d86:	4b49      	ldr	r3, [pc, #292]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000d88:	781a      	ldrb	r2, [r3, #0]
1a000d8a:	3206      	adds	r2, #6
1a000d8c:	701a      	strb	r2, [r3, #0]
1a000d8e:	785a      	ldrb	r2, [r3, #1]
1a000d90:	3209      	adds	r2, #9
1a000d92:	705a      	strb	r2, [r3, #1]
1a000d94:	78da      	ldrb	r2, [r3, #3]
1a000d96:	3204      	adds	r2, #4
1a000d98:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00100000){ NUM[0] +=2; NUM[1] += 9; NUM[2] += 1; NUM[3] += 8; }//8192
1a000d9a:	f010 0f20 	tst.w	r0, #32
1a000d9e:	d00c      	beq.n	1a000dba <BIN16_A_DIGITAL5+0x122>
1a000da0:	4b42      	ldr	r3, [pc, #264]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000da2:	781a      	ldrb	r2, [r3, #0]
1a000da4:	3202      	adds	r2, #2
1a000da6:	701a      	strb	r2, [r3, #0]
1a000da8:	785a      	ldrb	r2, [r3, #1]
1a000daa:	3209      	adds	r2, #9
1a000dac:	705a      	strb	r2, [r3, #1]
1a000dae:	789a      	ldrb	r2, [r3, #2]
1a000db0:	3201      	adds	r2, #1
1a000db2:	709a      	strb	r2, [r3, #2]
1a000db4:	78da      	ldrb	r2, [r3, #3]
1a000db6:	3208      	adds	r2, #8
1a000db8:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b01000000){ NUM[0] +=4; NUM[1] += 8; NUM[2] += 3; NUM[3] += 6; NUM[4] += 1; }//16384
1a000dba:	f010 0f40 	tst.w	r0, #64	; 0x40
1a000dbe:	d00e      	beq.n	1a000dde <BIN16_A_DIGITAL5+0x146>
1a000dc0:	4b3a      	ldr	r3, [pc, #232]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000dc2:	781a      	ldrb	r2, [r3, #0]
1a000dc4:	3204      	adds	r2, #4
1a000dc6:	701a      	strb	r2, [r3, #0]
1a000dc8:	785a      	ldrb	r2, [r3, #1]
1a000dca:	3208      	adds	r2, #8
1a000dcc:	705a      	strb	r2, [r3, #1]
1a000dce:	789a      	ldrb	r2, [r3, #2]
1a000dd0:	3203      	adds	r2, #3
1a000dd2:	709a      	strb	r2, [r3, #2]
1a000dd4:	78da      	ldrb	r2, [r3, #3]
1a000dd6:	3206      	adds	r2, #6
1a000dd8:	70da      	strb	r2, [r3, #3]
1a000dda:	2201      	movs	r2, #1
1a000ddc:	711a      	strb	r2, [r3, #4]
	if (HADD & 0b10000000){ NUM[0] +=8; NUM[1] += 6; NUM[2] += 7; NUM[3] += 2; NUM[4] += 3; }//32768
1a000dde:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000de2:	d118      	bne.n	1a000e16 <BIN16_A_DIGITAL5+0x17e>
	//BLOQUE DE PASAR DE GRUPOS DE UNIDADES, DECENAS, CENTENAS Y MILES
	//A UNIDADES DE: UNIDAD, DECENA, CENTENA, MIL, DIEZ MIL, ETC.
	while(NUM[0] >= 0) { NUM[0] -= 10; if ( NUM[0] >= 0 ) NUM[1] += 1;} NUM[0] += 10;
1a000de4:	4b31      	ldr	r3, [pc, #196]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000de6:	f993 3000 	ldrsb.w	r3, [r3]
1a000dea:	2b00      	cmp	r3, #0
1a000dec:	db24      	blt.n	1a000e38 <BIN16_A_DIGITAL5+0x1a0>
1a000dee:	3b0a      	subs	r3, #10
1a000df0:	b25b      	sxtb	r3, r3
1a000df2:	4a2e      	ldr	r2, [pc, #184]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000df4:	7013      	strb	r3, [r2, #0]
1a000df6:	2b00      	cmp	r3, #0
1a000df8:	dbf4      	blt.n	1a000de4 <BIN16_A_DIGITAL5+0x14c>
1a000dfa:	7853      	ldrb	r3, [r2, #1]
1a000dfc:	3301      	adds	r3, #1
1a000dfe:	7053      	strb	r3, [r2, #1]
1a000e00:	e7f0      	b.n	1a000de4 <BIN16_A_DIGITAL5+0x14c>
	if (LADD & 0b10000000){ NUM[0] +=8; NUM[1] += 2; NUM[2] += 1; }//128
1a000e02:	4b2a      	ldr	r3, [pc, #168]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e04:	781a      	ldrb	r2, [r3, #0]
1a000e06:	3208      	adds	r2, #8
1a000e08:	701a      	strb	r2, [r3, #0]
1a000e0a:	785a      	ldrb	r2, [r3, #1]
1a000e0c:	3202      	adds	r2, #2
1a000e0e:	705a      	strb	r2, [r3, #1]
1a000e10:	2201      	movs	r2, #1
1a000e12:	709a      	strb	r2, [r3, #2]
1a000e14:	e781      	b.n	1a000d1a <BIN16_A_DIGITAL5+0x82>
	if (HADD & 0b10000000){ NUM[0] +=8; NUM[1] += 6; NUM[2] += 7; NUM[3] += 2; NUM[4] += 3; }//32768
1a000e16:	4b25      	ldr	r3, [pc, #148]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e18:	781a      	ldrb	r2, [r3, #0]
1a000e1a:	3208      	adds	r2, #8
1a000e1c:	701a      	strb	r2, [r3, #0]
1a000e1e:	785a      	ldrb	r2, [r3, #1]
1a000e20:	3206      	adds	r2, #6
1a000e22:	705a      	strb	r2, [r3, #1]
1a000e24:	789a      	ldrb	r2, [r3, #2]
1a000e26:	3207      	adds	r2, #7
1a000e28:	709a      	strb	r2, [r3, #2]
1a000e2a:	78da      	ldrb	r2, [r3, #3]
1a000e2c:	3202      	adds	r2, #2
1a000e2e:	70da      	strb	r2, [r3, #3]
1a000e30:	791a      	ldrb	r2, [r3, #4]
1a000e32:	3203      	adds	r2, #3
1a000e34:	711a      	strb	r2, [r3, #4]
1a000e36:	e7d5      	b.n	1a000de4 <BIN16_A_DIGITAL5+0x14c>
	while(NUM[0] >= 0) { NUM[0] -= 10; if ( NUM[0] >= 0 ) NUM[1] += 1;} NUM[0] += 10;
1a000e38:	330a      	adds	r3, #10
1a000e3a:	4a1c      	ldr	r2, [pc, #112]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e3c:	7013      	strb	r3, [r2, #0]
	while(NUM[1] >= 0) { NUM[1] -= 10; if ( NUM[1] >= 0 ) NUM[2] += 1;} NUM[1] += 10;
1a000e3e:	4b1b      	ldr	r3, [pc, #108]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e40:	f993 3001 	ldrsb.w	r3, [r3, #1]
1a000e44:	2b00      	cmp	r3, #0
1a000e46:	db09      	blt.n	1a000e5c <BIN16_A_DIGITAL5+0x1c4>
1a000e48:	3b0a      	subs	r3, #10
1a000e4a:	b25b      	sxtb	r3, r3
1a000e4c:	4a17      	ldr	r2, [pc, #92]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e4e:	7053      	strb	r3, [r2, #1]
1a000e50:	2b00      	cmp	r3, #0
1a000e52:	dbf4      	blt.n	1a000e3e <BIN16_A_DIGITAL5+0x1a6>
1a000e54:	7893      	ldrb	r3, [r2, #2]
1a000e56:	3301      	adds	r3, #1
1a000e58:	7093      	strb	r3, [r2, #2]
1a000e5a:	e7f0      	b.n	1a000e3e <BIN16_A_DIGITAL5+0x1a6>
1a000e5c:	330a      	adds	r3, #10
1a000e5e:	4a13      	ldr	r2, [pc, #76]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e60:	7053      	strb	r3, [r2, #1]
	while(NUM[2] >= 0) { NUM[2] -= 10; if ( NUM[2] >= 0 ) NUM[3] += 1;} NUM[2] += 10;
1a000e62:	4b12      	ldr	r3, [pc, #72]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e64:	f993 3002 	ldrsb.w	r3, [r3, #2]
1a000e68:	2b00      	cmp	r3, #0
1a000e6a:	db09      	blt.n	1a000e80 <BIN16_A_DIGITAL5+0x1e8>
1a000e6c:	3b0a      	subs	r3, #10
1a000e6e:	b25b      	sxtb	r3, r3
1a000e70:	4a0e      	ldr	r2, [pc, #56]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e72:	7093      	strb	r3, [r2, #2]
1a000e74:	2b00      	cmp	r3, #0
1a000e76:	dbf4      	blt.n	1a000e62 <BIN16_A_DIGITAL5+0x1ca>
1a000e78:	78d3      	ldrb	r3, [r2, #3]
1a000e7a:	3301      	adds	r3, #1
1a000e7c:	70d3      	strb	r3, [r2, #3]
1a000e7e:	e7f0      	b.n	1a000e62 <BIN16_A_DIGITAL5+0x1ca>
1a000e80:	330a      	adds	r3, #10
1a000e82:	4a0a      	ldr	r2, [pc, #40]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e84:	7093      	strb	r3, [r2, #2]
	while(NUM[3] >= 0) { NUM[3] -= 10; if ( NUM[3] >= 0 ) NUM[4] += 1;} NUM[3] += 10;
1a000e86:	4b09      	ldr	r3, [pc, #36]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e88:	f993 3003 	ldrsb.w	r3, [r3, #3]
1a000e8c:	2b00      	cmp	r3, #0
1a000e8e:	db09      	blt.n	1a000ea4 <BIN16_A_DIGITAL5+0x20c>
1a000e90:	3b0a      	subs	r3, #10
1a000e92:	b25b      	sxtb	r3, r3
1a000e94:	4a05      	ldr	r2, [pc, #20]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000e96:	70d3      	strb	r3, [r2, #3]
1a000e98:	2b00      	cmp	r3, #0
1a000e9a:	dbf4      	blt.n	1a000e86 <BIN16_A_DIGITAL5+0x1ee>
1a000e9c:	7913      	ldrb	r3, [r2, #4]
1a000e9e:	3301      	adds	r3, #1
1a000ea0:	7113      	strb	r3, [r2, #4]
1a000ea2:	e7f0      	b.n	1a000e86 <BIN16_A_DIGITAL5+0x1ee>
1a000ea4:	330a      	adds	r3, #10
1a000ea6:	4a01      	ldr	r2, [pc, #4]	; (1a000eac <BIN16_A_DIGITAL5+0x214>)
1a000ea8:	70d3      	strb	r3, [r2, #3]

}
1a000eaa:	4770      	bx	lr
1a000eac:	100004bc 	.word	0x100004bc

1a000eb0 <FLOAT_A_DIGITAL5>:
void FLOAT_A_DIGITAL5(float x){
1a000eb0:	b508      	push	{r3, lr}
	unionX.x = (uint16_t) ( 100 * x );
1a000eb2:	eddf 7a07 	vldr	s15, [pc, #28]	; 1a000ed0 <FLOAT_A_DIGITAL5+0x20>
1a000eb6:	ee20 0a27 	vmul.f32	s0, s0, s15
1a000eba:	eebc 0ac0 	vcvt.u32.f32	s0, s0
1a000ebe:	ee10 3a10 	vmov	r3, s0
1a000ec2:	b298      	uxth	r0, r3
	BIN16_A_DIGITAL5(unionX.sector[1], unionX.sector[0]);	//CONVIERTE HADD Y LADD A NUM[4] -> NUM[0]
1a000ec4:	b2c1      	uxtb	r1, r0
1a000ec6:	0a00      	lsrs	r0, r0, #8
1a000ec8:	f7ff fee6 	bl	1a000c98 <BIN16_A_DIGITAL5>
}
1a000ecc:	bd08      	pop	{r3, pc}
1a000ece:	bf00      	nop
1a000ed0:	42c80000 	.word	0x42c80000

1a000ed4 <FLOAT_A_LCD_BLE>:
void FLOAT_A_LCD_BLE( float x){
1a000ed4:	b510      	push	{r4, lr}
1a000ed6:	ed2d 8b02 	vpush	{d8}
1a000eda:	eeb0 8a40 	vmov.f32	s16, s0
	FLOAT_A_DIGITAL5( x );
1a000ede:	f7ff ffe7 	bl	1a000eb0 <FLOAT_A_DIGITAL5>
	if ( x   <  0  ) write_lcd( '-' );
1a000ee2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
1a000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000eea:	d421      	bmi.n	1a000f30 <FLOAT_A_LCD_BLE+0x5c>
	if ( NUM[4] > 0 ) write_lcd( NUM[4] + 48 );
1a000eec:	4b41      	ldr	r3, [pc, #260]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000eee:	f993 3004 	ldrsb.w	r3, [r3, #4]
1a000ef2:	2b00      	cmp	r3, #0
1a000ef4:	dc20      	bgt.n	1a000f38 <FLOAT_A_LCD_BLE+0x64>
	if ( NUM[3] > 0 ) write_lcd( NUM[3] + 48 );
1a000ef6:	4b3f      	ldr	r3, [pc, #252]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000ef8:	f993 3003 	ldrsb.w	r3, [r3, #3]
1a000efc:	2b00      	cmp	r3, #0
1a000efe:	dc22      	bgt.n	1a000f46 <FLOAT_A_LCD_BLE+0x72>
	write_lcd( NUM[2] + 48 );
1a000f00:	4c3c      	ldr	r4, [pc, #240]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000f02:	78a0      	ldrb	r0, [r4, #2]
1a000f04:	3030      	adds	r0, #48	; 0x30
1a000f06:	b2c0      	uxtb	r0, r0
1a000f08:	f000 f958 	bl	1a0011bc <write_lcd>
	write_lcd( '.' );
1a000f0c:	202e      	movs	r0, #46	; 0x2e
1a000f0e:	f000 f955 	bl	1a0011bc <write_lcd>
	write_lcd( NUM[1] + 48 );
1a000f12:	7860      	ldrb	r0, [r4, #1]
1a000f14:	3030      	adds	r0, #48	; 0x30
1a000f16:	b2c0      	uxtb	r0, r0
1a000f18:	f000 f950 	bl	1a0011bc <write_lcd>
	if( LAST_STATUS_REG_SET & 1 ){
1a000f1c:	4b36      	ldr	r3, [pc, #216]	; (1a000ff8 <FLOAT_A_LCD_BLE+0x124>)
1a000f1e:	781b      	ldrb	r3, [r3, #0]
1a000f20:	f013 0f01 	tst.w	r3, #1
1a000f24:	d016      	beq.n	1a000f54 <FLOAT_A_LCD_BLE+0x80>
		write_lcd( 48 );  //0   -> si no tengo resolucion pongo 0 en el segundo decimal
1a000f26:	2030      	movs	r0, #48	; 0x30
1a000f28:	f000 f948 	bl	1a0011bc <write_lcd>
void FLOAT_A_LCD_BLE( float x){
1a000f2c:	2300      	movs	r3, #0
1a000f2e:	e01d      	b.n	1a000f6c <FLOAT_A_LCD_BLE+0x98>
	if ( x   <  0  ) write_lcd( '-' );
1a000f30:	202d      	movs	r0, #45	; 0x2d
1a000f32:	f000 f943 	bl	1a0011bc <write_lcd>
1a000f36:	e7d9      	b.n	1a000eec <FLOAT_A_LCD_BLE+0x18>
	if ( NUM[4] > 0 ) write_lcd( NUM[4] + 48 );
1a000f38:	b2db      	uxtb	r3, r3
1a000f3a:	f103 0030 	add.w	r0, r3, #48	; 0x30
1a000f3e:	b2c0      	uxtb	r0, r0
1a000f40:	f000 f93c 	bl	1a0011bc <write_lcd>
1a000f44:	e7d7      	b.n	1a000ef6 <FLOAT_A_LCD_BLE+0x22>
	if ( NUM[3] > 0 ) write_lcd( NUM[3] + 48 );
1a000f46:	b2db      	uxtb	r3, r3
1a000f48:	f103 0030 	add.w	r0, r3, #48	; 0x30
1a000f4c:	b2c0      	uxtb	r0, r0
1a000f4e:	f000 f935 	bl	1a0011bc <write_lcd>
1a000f52:	e7d5      	b.n	1a000f00 <FLOAT_A_LCD_BLE+0x2c>
		write_lcd( NUM[0] + 48 );
1a000f54:	4b27      	ldr	r3, [pc, #156]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000f56:	7818      	ldrb	r0, [r3, #0]
1a000f58:	3030      	adds	r0, #48	; 0x30
1a000f5a:	b2c0      	uxtb	r0, r0
1a000f5c:	f000 f92e 	bl	1a0011bc <write_lcd>
1a000f60:	e7e4      	b.n	1a000f2c <FLOAT_A_LCD_BLE+0x58>
	for (; i< 9; i++) TxtBLE[i] = ' ';
1a000f62:	4a26      	ldr	r2, [pc, #152]	; (1a000ffc <FLOAT_A_LCD_BLE+0x128>)
1a000f64:	2120      	movs	r1, #32
1a000f66:	54d1      	strb	r1, [r2, r3]
1a000f68:	3301      	adds	r3, #1
1a000f6a:	b2db      	uxtb	r3, r3
1a000f6c:	2b08      	cmp	r3, #8
1a000f6e:	d9f8      	bls.n	1a000f62 <FLOAT_A_LCD_BLE+0x8e>
	if (   x    < 0 ){ TxtBLE[i] = '-'        ; i++; }
1a000f70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
1a000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000f78:	d433      	bmi.n	1a000fe2 <FLOAT_A_LCD_BLE+0x10e>
	i = 3;
1a000f7a:	2303      	movs	r3, #3
	if ( NUM[4] > 0 ){ TxtBLE[i] = NUM[4] + 48; i++; }
1a000f7c:	4a1d      	ldr	r2, [pc, #116]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000f7e:	f992 2004 	ldrsb.w	r2, [r2, #4]
1a000f82:	2a00      	cmp	r2, #0
1a000f84:	dd05      	ble.n	1a000f92 <FLOAT_A_LCD_BLE+0xbe>
1a000f86:	b2d2      	uxtb	r2, r2
1a000f88:	3230      	adds	r2, #48	; 0x30
1a000f8a:	491c      	ldr	r1, [pc, #112]	; (1a000ffc <FLOAT_A_LCD_BLE+0x128>)
1a000f8c:	54ca      	strb	r2, [r1, r3]
1a000f8e:	3301      	adds	r3, #1
1a000f90:	b2db      	uxtb	r3, r3
	if ( NUM[3] > 0 ){ TxtBLE[i] = NUM[3] + 48; i++; }
1a000f92:	4a18      	ldr	r2, [pc, #96]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000f94:	f992 2003 	ldrsb.w	r2, [r2, #3]
1a000f98:	2a00      	cmp	r2, #0
1a000f9a:	dd05      	ble.n	1a000fa8 <FLOAT_A_LCD_BLE+0xd4>
1a000f9c:	b2d2      	uxtb	r2, r2
1a000f9e:	3230      	adds	r2, #48	; 0x30
1a000fa0:	4916      	ldr	r1, [pc, #88]	; (1a000ffc <FLOAT_A_LCD_BLE+0x128>)
1a000fa2:	54ca      	strb	r2, [r1, r3]
1a000fa4:	3301      	adds	r3, #1
1a000fa6:	b2db      	uxtb	r3, r3
	                   TxtBLE[i] = NUM[2] + 48; i++;
1a000fa8:	4812      	ldr	r0, [pc, #72]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000faa:	7882      	ldrb	r2, [r0, #2]
1a000fac:	3230      	adds	r2, #48	; 0x30
1a000fae:	4913      	ldr	r1, [pc, #76]	; (1a000ffc <FLOAT_A_LCD_BLE+0x128>)
1a000fb0:	54ca      	strb	r2, [r1, r3]
1a000fb2:	1c5a      	adds	r2, r3, #1
1a000fb4:	b2d2      	uxtb	r2, r2
	                   TxtBLE[i] = '.'        ; i++;
1a000fb6:	242e      	movs	r4, #46	; 0x2e
1a000fb8:	548c      	strb	r4, [r1, r2]
1a000fba:	1c9a      	adds	r2, r3, #2
1a000fbc:	b2d2      	uxtb	r2, r2
	                   TxtBLE[i] = NUM[1] + 48; i++;
1a000fbe:	7840      	ldrb	r0, [r0, #1]
1a000fc0:	3030      	adds	r0, #48	; 0x30
1a000fc2:	5488      	strb	r0, [r1, r2]
1a000fc4:	3303      	adds	r3, #3
1a000fc6:	b2db      	uxtb	r3, r3
	if( LAST_STATUS_REG_SET & 1 ){
1a000fc8:	4a0b      	ldr	r2, [pc, #44]	; (1a000ff8 <FLOAT_A_LCD_BLE+0x124>)
1a000fca:	7812      	ldrb	r2, [r2, #0]
1a000fcc:	f012 0f01 	tst.w	r2, #1
1a000fd0:	d10c      	bne.n	1a000fec <FLOAT_A_LCD_BLE+0x118>
		TxtBLE[i] = NUM[0] + 48;
1a000fd2:	4a08      	ldr	r2, [pc, #32]	; (1a000ff4 <FLOAT_A_LCD_BLE+0x120>)
1a000fd4:	7812      	ldrb	r2, [r2, #0]
1a000fd6:	3230      	adds	r2, #48	; 0x30
1a000fd8:	4908      	ldr	r1, [pc, #32]	; (1a000ffc <FLOAT_A_LCD_BLE+0x128>)
1a000fda:	54ca      	strb	r2, [r1, r3]
}
1a000fdc:	ecbd 8b02 	vpop	{d8}
1a000fe0:	bd10      	pop	{r4, pc}
	if (   x    < 0 ){ TxtBLE[i] = '-'        ; i++; }
1a000fe2:	4b06      	ldr	r3, [pc, #24]	; (1a000ffc <FLOAT_A_LCD_BLE+0x128>)
1a000fe4:	222d      	movs	r2, #45	; 0x2d
1a000fe6:	70da      	strb	r2, [r3, #3]
1a000fe8:	2304      	movs	r3, #4
1a000fea:	e7c7      	b.n	1a000f7c <FLOAT_A_LCD_BLE+0xa8>
		TxtBLE[i] = 48;  //0   -> si no tengo resolucion pongo 0 en el segundo decimal
1a000fec:	460a      	mov	r2, r1
1a000fee:	2130      	movs	r1, #48	; 0x30
1a000ff0:	54d1      	strb	r1, [r2, r3]
1a000ff2:	e7f3      	b.n	1a000fdc <FLOAT_A_LCD_BLE+0x108>
1a000ff4:	100004bc 	.word	0x100004bc
1a000ff8:	100004ba 	.word	0x100004ba
1a000ffc:	100004ec 	.word	0x100004ec

1a001000 <setup_lcd>:
//
// El ex-creador de la clase . . . .

void setup_lcd(uint8_t addr)
{
  _Addr = addr;
1a001000:	4b02      	ldr	r3, [pc, #8]	; (1a00100c <setup_lcd+0xc>)
1a001002:	7018      	strb	r0, [r3, #0]
  _backlight = 0;
1a001004:	4b02      	ldr	r3, [pc, #8]	; (1a001010 <setup_lcd+0x10>)
1a001006:	2200      	movs	r2, #0
1a001008:	701a      	strb	r2, [r3, #0]
}
1a00100a:	4770      	bx	lr
1a00100c:	100004e2 	.word	0x100004e2
1a001010:	100004e0 	.word	0x100004e0

1a001014 <_incrementarPosc>:
  _write2Wire(0x00, RSMODE_DATA, FALSE);
} // setBacklight

//Se la llama para tener un registro de dónde esta el cursor
void _incrementarPosc(){
	posc.columna++;
1a001014:	4a0b      	ldr	r2, [pc, #44]	; (1a001044 <_incrementarPosc+0x30>)
1a001016:	7853      	ldrb	r3, [r2, #1]
1a001018:	3301      	adds	r3, #1
1a00101a:	b2db      	uxtb	r3, r3
1a00101c:	7053      	strb	r3, [r2, #1]
	if ( posc.columna >= _numCols ){
1a00101e:	4a0a      	ldr	r2, [pc, #40]	; (1a001048 <_incrementarPosc+0x34>)
1a001020:	7812      	ldrb	r2, [r2, #0]
1a001022:	4293      	cmp	r3, r2
1a001024:	d30d      	bcc.n	1a001042 <_incrementarPosc+0x2e>
		posc.columna = 0;
1a001026:	4a07      	ldr	r2, [pc, #28]	; (1a001044 <_incrementarPosc+0x30>)
1a001028:	2300      	movs	r3, #0
1a00102a:	7053      	strb	r3, [r2, #1]
		posc.linea++;
1a00102c:	7813      	ldrb	r3, [r2, #0]
1a00102e:	3301      	adds	r3, #1
1a001030:	b2db      	uxtb	r3, r3
1a001032:	7013      	strb	r3, [r2, #0]
		if ( posc.linea >= _numLines ){
1a001034:	4a05      	ldr	r2, [pc, #20]	; (1a00104c <_incrementarPosc+0x38>)
1a001036:	7812      	ldrb	r2, [r2, #0]
1a001038:	4293      	cmp	r3, r2
1a00103a:	d302      	bcc.n	1a001042 <_incrementarPosc+0x2e>
			posc.linea = 0;
1a00103c:	4b01      	ldr	r3, [pc, #4]	; (1a001044 <_incrementarPosc+0x30>)
1a00103e:	2200      	movs	r2, #0
1a001040:	701a      	strb	r2, [r3, #0]
		}
	}
}
1a001042:	4770      	bx	lr
1a001044:	100004e8 	.word	0x100004e8
1a001048:	100004e5 	.word	0x100004e5
1a00104c:	100004ea 	.word	0x100004ea

1a001050 <_write2Wire>:
  delay(1);
} // _sendNibble


// private function to change the PCF8674 pins to the given value
void _write2Wire(uint8_t halfByte, uint8_t mode, uint8_t enable) {
1a001050:	b500      	push	{lr}
1a001052:	b085      	sub	sp, #20
  // map the given values to the hardware of the I2C schema
  uint8_t i2cData = halfByte << 4;
1a001054:	0100      	lsls	r0, r0, #4
1a001056:	b2c0      	uxtb	r0, r0
1a001058:	f88d 000f 	strb.w	r0, [sp, #15]
  if (mode > 0) i2cData |= PCF_RS;
1a00105c:	b119      	cbz	r1, 1a001066 <_write2Wire+0x16>
1a00105e:	f040 0001 	orr.w	r0, r0, #1
1a001062:	f88d 000f 	strb.w	r0, [sp, #15]
  // PCF_RW is never used.
  if (enable > 0) i2cData |= PCF_EN;
1a001066:	b12a      	cbz	r2, 1a001074 <_write2Wire+0x24>
1a001068:	f89d 300f 	ldrb.w	r3, [sp, #15]
1a00106c:	f043 0304 	orr.w	r3, r3, #4
1a001070:	f88d 300f 	strb.w	r3, [sp, #15]
  if (_backlight > 0) i2cData |= PCF_BACKLIGHT;
1a001074:	4b0a      	ldr	r3, [pc, #40]	; (1a0010a0 <_write2Wire+0x50>)
1a001076:	781b      	ldrb	r3, [r3, #0]
1a001078:	b12b      	cbz	r3, 1a001086 <_write2Wire+0x36>
1a00107a:	f89d 300f 	ldrb.w	r3, [sp, #15]
1a00107e:	f043 0308 	orr.w	r3, r3, #8
1a001082:	f88d 300f 	strb.w	r3, [sp, #15]


  i2cWrite(I2C0, _Addr, &i2cData, 1, TRUE);
1a001086:	4b07      	ldr	r3, [pc, #28]	; (1a0010a4 <_write2Wire+0x54>)
1a001088:	7819      	ldrb	r1, [r3, #0]
1a00108a:	2301      	movs	r3, #1
1a00108c:	9300      	str	r3, [sp, #0]
1a00108e:	f10d 020f 	add.w	r2, sp, #15
1a001092:	2000      	movs	r0, #0
1a001094:	f001 fb4b 	bl	1a00272e <i2cWrite>

} // write2Wire
1a001098:	b005      	add	sp, #20
1a00109a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00109e:	bf00      	nop
1a0010a0:	100004e0 	.word	0x100004e0
1a0010a4:	100004e2 	.word	0x100004e2

1a0010a8 <_sendNibble>:
void _sendNibble(uint8_t halfByte, uint8_t mode) {
1a0010a8:	b538      	push	{r3, r4, r5, lr}
1a0010aa:	4604      	mov	r4, r0
1a0010ac:	460d      	mov	r5, r1
  _write2Wire(halfByte, mode, TRUE);
1a0010ae:	2201      	movs	r2, #1
1a0010b0:	f7ff ffce 	bl	1a001050 <_write2Wire>
  delay(1);
1a0010b4:	2001      	movs	r0, #1
1a0010b6:	2100      	movs	r1, #0
1a0010b8:	f001 fd08 	bl	1a002acc <delay>
  _write2Wire(halfByte, mode, FALSE);
1a0010bc:	2200      	movs	r2, #0
1a0010be:	4629      	mov	r1, r5
1a0010c0:	4620      	mov	r0, r4
1a0010c2:	f7ff ffc5 	bl	1a001050 <_write2Wire>
  delay(1);
1a0010c6:	2001      	movs	r0, #1
1a0010c8:	2100      	movs	r1, #0
1a0010ca:	f001 fcff 	bl	1a002acc <delay>
} // _sendNibble
1a0010ce:	bd38      	pop	{r3, r4, r5, pc}

1a0010d0 <_send>:
void _send(uint8_t value, uint8_t mode) {
1a0010d0:	b538      	push	{r3, r4, r5, lr}
1a0010d2:	460d      	mov	r5, r1
  uint8_t valueLo = value    & 0x0F;
1a0010d4:	f000 040f 	and.w	r4, r0, #15
  _sendNibble(valueHi, mode);
1a0010d8:	0900      	lsrs	r0, r0, #4
1a0010da:	f7ff ffe5 	bl	1a0010a8 <_sendNibble>
  _sendNibble(valueLo, mode);
1a0010de:	4629      	mov	r1, r5
1a0010e0:	4620      	mov	r0, r4
1a0010e2:	f7ff ffe1 	bl	1a0010a8 <_sendNibble>
} // _send()
1a0010e6:	bd38      	pop	{r3, r4, r5, pc}

1a0010e8 <home>:
{
1a0010e8:	b508      	push	{r3, lr}
  _send(value, RSMODE_CMD);
1a0010ea:	2100      	movs	r1, #0
1a0010ec:	2002      	movs	r0, #2
1a0010ee:	f7ff ffef 	bl	1a0010d0 <_send>
  delay(2);
1a0010f2:	2002      	movs	r0, #2
1a0010f4:	2100      	movs	r1, #0
1a0010f6:	f001 fce9 	bl	1a002acc <delay>
  posc.linea = 0;
1a0010fa:	4b02      	ldr	r3, [pc, #8]	; (1a001104 <home+0x1c>)
1a0010fc:	2200      	movs	r2, #0
1a0010fe:	701a      	strb	r2, [r3, #0]
  posc.columna = 0;
1a001100:	705a      	strb	r2, [r3, #1]
}
1a001102:	bd08      	pop	{r3, pc}
1a001104:	100004e8 	.word	0x100004e8

1a001108 <display>:
void display() {
1a001108:	b508      	push	{r3, lr}
  _displaycontrol |= LCD_DISPLAYON;
1a00110a:	4b05      	ldr	r3, [pc, #20]	; (1a001120 <display+0x18>)
1a00110c:	7818      	ldrb	r0, [r3, #0]
1a00110e:	f040 0004 	orr.w	r0, r0, #4
1a001112:	7018      	strb	r0, [r3, #0]
  _send(value, RSMODE_CMD);
1a001114:	2100      	movs	r1, #0
1a001116:	f040 0008 	orr.w	r0, r0, #8
1a00111a:	f7ff ffd9 	bl	1a0010d0 <_send>
}
1a00111e:	bd08      	pop	{r3, pc}
1a001120:	100004e1 	.word	0x100004e1

1a001124 <noCursor>:
void noCursor() {
1a001124:	b508      	push	{r3, lr}
  _displaycontrol &= ~LCD_CURSORON;
1a001126:	4b05      	ldr	r3, [pc, #20]	; (1a00113c <noCursor+0x18>)
1a001128:	7818      	ldrb	r0, [r3, #0]
1a00112a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
1a00112e:	7018      	strb	r0, [r3, #0]
  _send(value, RSMODE_CMD);
1a001130:	2100      	movs	r1, #0
1a001132:	f040 0008 	orr.w	r0, r0, #8
1a001136:	f7ff ffcb 	bl	1a0010d0 <_send>
}
1a00113a:	bd08      	pop	{r3, pc}
1a00113c:	100004e1 	.word	0x100004e1

1a001140 <noBlink>:
void noBlink() {
1a001140:	b508      	push	{r3, lr}
  _displaycontrol &= ~LCD_BLINKON;
1a001142:	4b05      	ldr	r3, [pc, #20]	; (1a001158 <noBlink+0x18>)
1a001144:	7818      	ldrb	r0, [r3, #0]
1a001146:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
1a00114a:	7018      	strb	r0, [r3, #0]
  _send(value, RSMODE_CMD);
1a00114c:	2100      	movs	r1, #0
1a00114e:	f040 0008 	orr.w	r0, r0, #8
1a001152:	f7ff ffbd 	bl	1a0010d0 <_send>
}
1a001156:	bd08      	pop	{r3, pc}
1a001158:	100004e1 	.word	0x100004e1

1a00115c <setCursor>:
{
1a00115c:	b530      	push	{r4, r5, lr}
1a00115e:	b085      	sub	sp, #20
1a001160:	4605      	mov	r5, r0
1a001162:	460c      	mov	r4, r1
	if ( columna >= _numCols ) columna = _numCols - 1;
1a001164:	4b11      	ldr	r3, [pc, #68]	; (1a0011ac <setCursor+0x50>)
1a001166:	781b      	ldrb	r3, [r3, #0]
1a001168:	428b      	cmp	r3, r1
1a00116a:	d801      	bhi.n	1a001170 <setCursor+0x14>
1a00116c:	1e5c      	subs	r4, r3, #1
1a00116e:	b2e4      	uxtb	r4, r4
	if ( linea >= _numLines ) linea = _numLines - 1;
1a001170:	4b0f      	ldr	r3, [pc, #60]	; (1a0011b0 <setCursor+0x54>)
1a001172:	781b      	ldrb	r3, [r3, #0]
1a001174:	42ab      	cmp	r3, r5
1a001176:	d801      	bhi.n	1a00117c <setCursor+0x20>
1a001178:	1e5d      	subs	r5, r3, #1
1a00117a:	b2ed      	uxtb	r5, r5
    posc.linea = linea;
1a00117c:	4b0d      	ldr	r3, [pc, #52]	; (1a0011b4 <setCursor+0x58>)
1a00117e:	701d      	strb	r5, [r3, #0]
	posc.columna = columna;
1a001180:	705c      	strb	r4, [r3, #1]
  int linea_offsets[] = { 0x00, 0x40, 0x14, 0x54 }; //{ 0, 40, 20, 60}
1a001182:	4b0d      	ldr	r3, [pc, #52]	; (1a0011b8 <setCursor+0x5c>)
1a001184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a001186:	f10d 0c10 	add.w	ip, sp, #16
1a00118a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  _command(LCD_SETDDRAMADDR | (columna + linea_offsets[linea]));
1a00118e:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
1a001192:	f855 0c10 	ldr.w	r0, [r5, #-16]
1a001196:	4420      	add	r0, r4
1a001198:	b240      	sxtb	r0, r0
1a00119a:	f060 007f 	orn	r0, r0, #127	; 0x7f
  _send(value, RSMODE_CMD);
1a00119e:	2100      	movs	r1, #0
1a0011a0:	b2c0      	uxtb	r0, r0
1a0011a2:	f7ff ff95 	bl	1a0010d0 <_send>
}
1a0011a6:	b005      	add	sp, #20
1a0011a8:	bd30      	pop	{r4, r5, pc}
1a0011aa:	bf00      	nop
1a0011ac:	100004e5 	.word	0x100004e5
1a0011b0:	100004ea 	.word	0x100004ea
1a0011b4:	100004e8 	.word	0x100004e8
1a0011b8:	1a00407c 	.word	0x1a00407c

1a0011bc <write_lcd>:
void write_lcd(uint8_t value) {
1a0011bc:	b508      	push	{r3, lr}
	_send(value, RSMODE_DATA); //envío al LCD, esto incrementa la posición del cursor pero MAL
1a0011be:	2101      	movs	r1, #1
1a0011c0:	f7ff ff86 	bl	1a0010d0 <_send>
    _incrementarPosc();         //Incremento BIEN la Posc
1a0011c4:	f7ff ff26 	bl	1a001014 <_incrementarPosc>
    if ( posc.columna == 0 ) setCursor(posc.linea, posc.columna); //solo si se paso de renglón seteo el cursor
1a0011c8:	4b03      	ldr	r3, [pc, #12]	; (1a0011d8 <write_lcd+0x1c>)
1a0011ca:	7859      	ldrb	r1, [r3, #1]
1a0011cc:	b101      	cbz	r1, 1a0011d0 <write_lcd+0x14>
}
1a0011ce:	bd08      	pop	{r3, pc}
    if ( posc.columna == 0 ) setCursor(posc.linea, posc.columna); //solo si se paso de renglón seteo el cursor
1a0011d0:	7818      	ldrb	r0, [r3, #0]
1a0011d2:	f7ff ffc3 	bl	1a00115c <setCursor>
}
1a0011d6:	e7fa      	b.n	1a0011ce <write_lcd+0x12>
1a0011d8:	100004e8 	.word	0x100004e8

1a0011dc <print_lcd>:
void print_lcd(uint8_t * texto, uint8_t largo ){
1a0011dc:	b570      	push	{r4, r5, r6, lr}
1a0011de:	4606      	mov	r6, r0
1a0011e0:	460d      	mov	r5, r1
	for ( uint8_t i = 0; i < largo; i++ ) {
1a0011e2:	2400      	movs	r4, #0
1a0011e4:	e004      	b.n	1a0011f0 <print_lcd+0x14>
		write_lcd( texto[i] );
1a0011e6:	5d30      	ldrb	r0, [r6, r4]
1a0011e8:	f7ff ffe8 	bl	1a0011bc <write_lcd>
	for ( uint8_t i = 0; i < largo; i++ ) {
1a0011ec:	3401      	adds	r4, #1
1a0011ee:	b2e4      	uxtb	r4, r4
1a0011f0:	42ac      	cmp	r4, r5
1a0011f2:	d3f8      	bcc.n	1a0011e6 <print_lcd+0xa>
}
1a0011f4:	bd70      	pop	{r4, r5, r6, pc}
1a0011f6:	Address 0x000000001a0011f6 is out of bounds.


1a0011f8 <clearLinea>:
void clearLinea( uint8_t linea ){
1a0011f8:	b538      	push	{r3, r4, r5, lr}
1a0011fa:	4605      	mov	r5, r0
	setCursor(linea, 0 );
1a0011fc:	2100      	movs	r1, #0
1a0011fe:	f7ff ffad 	bl	1a00115c <setCursor>
	for( int i = 0; i < _numCols; i++){
1a001202:	2400      	movs	r4, #0
1a001204:	e003      	b.n	1a00120e <clearLinea+0x16>
		write_lcd( ' ' );
1a001206:	2020      	movs	r0, #32
1a001208:	f7ff ffd8 	bl	1a0011bc <write_lcd>
	for( int i = 0; i < _numCols; i++){
1a00120c:	3401      	adds	r4, #1
1a00120e:	4b04      	ldr	r3, [pc, #16]	; (1a001220 <clearLinea+0x28>)
1a001210:	781b      	ldrb	r3, [r3, #0]
1a001212:	42a3      	cmp	r3, r4
1a001214:	dcf7      	bgt.n	1a001206 <clearLinea+0xe>
	setCursor(linea, 0 ); //vuelvo a dejar al cursor al principio de la linea
1a001216:	2100      	movs	r1, #0
1a001218:	4628      	mov	r0, r5
1a00121a:	f7ff ff9f 	bl	1a00115c <setCursor>
}
1a00121e:	bd38      	pop	{r3, r4, r5, pc}
1a001220:	100004e5 	.word	0x100004e5

1a001224 <clear>:
{
1a001224:	b508      	push	{r3, lr}
  _send(value, RSMODE_CMD);
1a001226:	2100      	movs	r1, #0
1a001228:	2001      	movs	r0, #1
1a00122a:	f7ff ff51 	bl	1a0010d0 <_send>
  delay(2);
1a00122e:	2002      	movs	r0, #2
1a001230:	2100      	movs	r1, #0
1a001232:	f001 fc4b 	bl	1a002acc <delay>
  clearLinea ( 0 );
1a001236:	2000      	movs	r0, #0
1a001238:	f7ff ffde 	bl	1a0011f8 <clearLinea>
  clearLinea ( 1 );
1a00123c:	2001      	movs	r0, #1
1a00123e:	f7ff ffdb 	bl	1a0011f8 <clearLinea>
  clearLinea ( 2 );
1a001242:	2002      	movs	r0, #2
1a001244:	f7ff ffd8 	bl	1a0011f8 <clearLinea>
  clearLinea ( 3 );
1a001248:	2003      	movs	r0, #3
1a00124a:	f7ff ffd5 	bl	1a0011f8 <clearLinea>
  setCursor( 0, 0 );
1a00124e:	2100      	movs	r1, #0
1a001250:	4608      	mov	r0, r1
1a001252:	f7ff ff83 	bl	1a00115c <setCursor>
}
1a001256:	bd08      	pop	{r3, pc}

1a001258 <begin>:
void begin(uint8_t lines, uint8_t cols, uint8_t dotsize) {
1a001258:	b508      	push	{r3, lr}
  _numLines = lines;
1a00125a:	4b27      	ldr	r3, [pc, #156]	; (1a0012f8 <begin+0xa0>)
1a00125c:	7018      	strb	r0, [r3, #0]
  _numCols = cols;
1a00125e:	4b27      	ldr	r3, [pc, #156]	; (1a0012fc <begin+0xa4>)
1a001260:	7019      	strb	r1, [r3, #0]
  _displayfunction = 0;
1a001262:	4b27      	ldr	r3, [pc, #156]	; (1a001300 <begin+0xa8>)
1a001264:	2100      	movs	r1, #0
1a001266:	7019      	strb	r1, [r3, #0]
  if (lines > 1) {
1a001268:	2801      	cmp	r0, #1
1a00126a:	d901      	bls.n	1a001270 <begin+0x18>
    _displayfunction |= LCD_2LINE;
1a00126c:	2108      	movs	r1, #8
1a00126e:	7019      	strb	r1, [r3, #0]
  if ((dotsize != 0) && (lines == 1)) {
1a001270:	b10a      	cbz	r2, 1a001276 <begin+0x1e>
1a001272:	2801      	cmp	r0, #1
1a001274:	d03a      	beq.n	1a0012ec <begin+0x94>
  _write2Wire(0x00, LOW, FALSE);
1a001276:	2200      	movs	r2, #0
1a001278:	4611      	mov	r1, r2
1a00127a:	4610      	mov	r0, r2
1a00127c:	f7ff fee8 	bl	1a001050 <_write2Wire>
  delay(50); //en mSeg
1a001280:	2032      	movs	r0, #50	; 0x32
1a001282:	2100      	movs	r1, #0
1a001284:	f001 fc22 	bl	1a002acc <delay>
  _sendNibble(0x03, RSMODE_CMD);
1a001288:	2100      	movs	r1, #0
1a00128a:	2003      	movs	r0, #3
1a00128c:	f7ff ff0c 	bl	1a0010a8 <_sendNibble>
  delay(5);
1a001290:	2005      	movs	r0, #5
1a001292:	2100      	movs	r1, #0
1a001294:	f001 fc1a 	bl	1a002acc <delay>
  _sendNibble(0x03, RSMODE_CMD);
1a001298:	2100      	movs	r1, #0
1a00129a:	2003      	movs	r0, #3
1a00129c:	f7ff ff04 	bl	1a0010a8 <_sendNibble>
  delay(5);
1a0012a0:	2005      	movs	r0, #5
1a0012a2:	2100      	movs	r1, #0
1a0012a4:	f001 fc12 	bl	1a002acc <delay>
  _sendNibble(0x03, RSMODE_CMD);
1a0012a8:	2100      	movs	r1, #0
1a0012aa:	2003      	movs	r0, #3
1a0012ac:	f7ff fefc 	bl	1a0010a8 <_sendNibble>
  delay(5);
1a0012b0:	2005      	movs	r0, #5
1a0012b2:	2100      	movs	r1, #0
1a0012b4:	f001 fc0a 	bl	1a002acc <delay>
  _sendNibble(0x02, RSMODE_CMD);
1a0012b8:	2100      	movs	r1, #0
1a0012ba:	2002      	movs	r0, #2
1a0012bc:	f7ff fef4 	bl	1a0010a8 <_sendNibble>
  _command(LCD_FUNCTIONSET | _displayfunction);  
1a0012c0:	4b0f      	ldr	r3, [pc, #60]	; (1a001300 <begin+0xa8>)
1a0012c2:	7818      	ldrb	r0, [r3, #0]
  _send(value, RSMODE_CMD);
1a0012c4:	2100      	movs	r1, #0
1a0012c6:	f040 0020 	orr.w	r0, r0, #32
1a0012ca:	f7ff ff01 	bl	1a0010d0 <_send>
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
1a0012ce:	4b0d      	ldr	r3, [pc, #52]	; (1a001304 <begin+0xac>)
1a0012d0:	2204      	movs	r2, #4
1a0012d2:	701a      	strb	r2, [r3, #0]
  display();
1a0012d4:	f7ff ff18 	bl	1a001108 <display>
  clear();
1a0012d8:	f7ff ffa4 	bl	1a001224 <clear>
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
1a0012dc:	4b0a      	ldr	r3, [pc, #40]	; (1a001308 <begin+0xb0>)
1a0012de:	2202      	movs	r2, #2
1a0012e0:	701a      	strb	r2, [r3, #0]
  _send(value, RSMODE_CMD);
1a0012e2:	2100      	movs	r1, #0
1a0012e4:	2006      	movs	r0, #6
1a0012e6:	f7ff fef3 	bl	1a0010d0 <_send>
}
1a0012ea:	bd08      	pop	{r3, pc}
    _displayfunction |= LCD_5x10DOTS;
1a0012ec:	4a04      	ldr	r2, [pc, #16]	; (1a001300 <begin+0xa8>)
1a0012ee:	7813      	ldrb	r3, [r2, #0]
1a0012f0:	f043 0304 	orr.w	r3, r3, #4
1a0012f4:	7013      	strb	r3, [r2, #0]
1a0012f6:	e7be      	b.n	1a001276 <begin+0x1e>
1a0012f8:	100004ea 	.word	0x100004ea
1a0012fc:	100004e5 	.word	0x100004e5
1a001300:	100004e4 	.word	0x100004e4
1a001304:	100004e1 	.word	0x100004e1
1a001308:	100004e3 	.word	0x100004e3

1a00130c <initialise_monitor_handles>:
}
1a00130c:	4770      	bx	lr
1a00130e:	Address 0x000000001a00130e is out of bounds.


1a001310 <Reset_Handler>:
void Reset_Handler(void) {
1a001310:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001312:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001314:	4b19      	ldr	r3, [pc, #100]	; (1a00137c <Reset_Handler+0x6c>)
1a001316:	4a1a      	ldr	r2, [pc, #104]	; (1a001380 <Reset_Handler+0x70>)
1a001318:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00131a:	3304      	adds	r3, #4
1a00131c:	4a19      	ldr	r2, [pc, #100]	; (1a001384 <Reset_Handler+0x74>)
1a00131e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001320:	2300      	movs	r3, #0
1a001322:	e005      	b.n	1a001330 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001324:	4a18      	ldr	r2, [pc, #96]	; (1a001388 <Reset_Handler+0x78>)
1a001326:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00132a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00132e:	3301      	adds	r3, #1
1a001330:	2b07      	cmp	r3, #7
1a001332:	d9f7      	bls.n	1a001324 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001334:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a001336:	4b15      	ldr	r3, [pc, #84]	; (1a00138c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001338:	e007      	b.n	1a00134a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00133a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00133e:	689a      	ldr	r2, [r3, #8]
1a001340:	6859      	ldr	r1, [r3, #4]
1a001342:	6818      	ldr	r0, [r3, #0]
1a001344:	f7fe ff21 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a001348:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00134a:	4a11      	ldr	r2, [pc, #68]	; (1a001390 <Reset_Handler+0x80>)
1a00134c:	4293      	cmp	r3, r2
1a00134e:	d3f4      	bcc.n	1a00133a <Reset_Handler+0x2a>
1a001350:	e006      	b.n	1a001360 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001352:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001354:	6859      	ldr	r1, [r3, #4]
1a001356:	f854 0b08 	ldr.w	r0, [r4], #8
1a00135a:	f7fe ff25 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00135e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001360:	4a0c      	ldr	r2, [pc, #48]	; (1a001394 <Reset_Handler+0x84>)
1a001362:	4293      	cmp	r3, r2
1a001364:	d3f5      	bcc.n	1a001352 <Reset_Handler+0x42>
    SystemInit();
1a001366:	f001 f811 	bl	1a00238c <SystemInit>
    __libc_init_array();
1a00136a:	f002 fd89 	bl	1a003e80 <__libc_init_array>
    initialise_monitor_handles();
1a00136e:	f7ff ffcd 	bl	1a00130c <initialise_monitor_handles>
    main();
1a001372:	f7ff f921 	bl	1a0005b8 <main>
        __asm__ volatile("wfi");
1a001376:	bf30      	wfi
1a001378:	e7fd      	b.n	1a001376 <Reset_Handler+0x66>
1a00137a:	bf00      	nop
1a00137c:	40053100 	.word	0x40053100
1a001380:	10df1000 	.word	0x10df1000
1a001384:	01dff7ff 	.word	0x01dff7ff
1a001388:	e000e280 	.word	0xe000e280
1a00138c:	1a000114 	.word	0x1a000114
1a001390:	1a000150 	.word	0x1a000150
1a001394:	1a000178 	.word	0x1a000178

1a001398 <_fini>:
void _fini(void) {}
1a001398:	4770      	bx	lr

1a00139a <_init>:
void _init(void) {}
1a00139a:	4770      	bx	lr

1a00139c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00139c:	2200      	movs	r2, #0
1a00139e:	2a05      	cmp	r2, #5
1a0013a0:	d819      	bhi.n	1a0013d6 <Board_LED_Init+0x3a>
{
1a0013a2:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0013a4:	490c      	ldr	r1, [pc, #48]	; (1a0013d8 <Board_LED_Init+0x3c>)
1a0013a6:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0013aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0013ae:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0013b0:	4b0a      	ldr	r3, [pc, #40]	; (1a0013dc <Board_LED_Init+0x40>)
1a0013b2:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0013b6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0013ba:	2001      	movs	r0, #1
1a0013bc:	40a0      	lsls	r0, r4
1a0013be:	4301      	orrs	r1, r0
1a0013c0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0013c4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0013c8:	2100      	movs	r1, #0
1a0013ca:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0013cc:	3201      	adds	r2, #1
1a0013ce:	2a05      	cmp	r2, #5
1a0013d0:	d9e8      	bls.n	1a0013a4 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0013d2:	bc70      	pop	{r4, r5, r6}
1a0013d4:	4770      	bx	lr
1a0013d6:	4770      	bx	lr
1a0013d8:	1a004098 	.word	0x1a004098
1a0013dc:	400f4000 	.word	0x400f4000

1a0013e0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0013e0:	2300      	movs	r3, #0
1a0013e2:	2b03      	cmp	r3, #3
1a0013e4:	d816      	bhi.n	1a001414 <Board_TEC_Init+0x34>
{
1a0013e6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0013e8:	490b      	ldr	r1, [pc, #44]	; (1a001418 <Board_TEC_Init+0x38>)
1a0013ea:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0013ee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0013f2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0013f4:	4c09      	ldr	r4, [pc, #36]	; (1a00141c <Board_TEC_Init+0x3c>)
1a0013f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0013fa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0013fe:	2001      	movs	r0, #1
1a001400:	40a8      	lsls	r0, r5
1a001402:	ea21 0100 	bic.w	r1, r1, r0
1a001406:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00140a:	3301      	adds	r3, #1
1a00140c:	2b03      	cmp	r3, #3
1a00140e:	d9eb      	bls.n	1a0013e8 <Board_TEC_Init+0x8>
    }
}
1a001410:	bc30      	pop	{r4, r5}
1a001412:	4770      	bx	lr
1a001414:	4770      	bx	lr
1a001416:	bf00      	nop
1a001418:	1a004090 	.word	0x1a004090
1a00141c:	400f4000 	.word	0x400f4000

1a001420 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001420:	2300      	movs	r3, #0
1a001422:	2b08      	cmp	r3, #8
1a001424:	d816      	bhi.n	1a001454 <Board_GPIO_Init+0x34>
{
1a001426:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001428:	490b      	ldr	r1, [pc, #44]	; (1a001458 <Board_GPIO_Init+0x38>)
1a00142a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00142e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001432:	784d      	ldrb	r5, [r1, #1]
1a001434:	4c09      	ldr	r4, [pc, #36]	; (1a00145c <Board_GPIO_Init+0x3c>)
1a001436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00143a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00143e:	2001      	movs	r0, #1
1a001440:	40a8      	lsls	r0, r5
1a001442:	ea21 0100 	bic.w	r1, r1, r0
1a001446:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00144a:	3301      	adds	r3, #1
1a00144c:	2b08      	cmp	r3, #8
1a00144e:	d9eb      	bls.n	1a001428 <Board_GPIO_Init+0x8>
    }
}
1a001450:	bc30      	pop	{r4, r5}
1a001452:	4770      	bx	lr
1a001454:	4770      	bx	lr
1a001456:	bf00      	nop
1a001458:	1a0040a4 	.word	0x1a0040a4
1a00145c:	400f4000 	.word	0x400f4000

1a001460 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001460:	b510      	push	{r4, lr}
1a001462:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001464:	4c08      	ldr	r4, [pc, #32]	; (1a001488 <Board_ADC_Init+0x28>)
1a001466:	4669      	mov	r1, sp
1a001468:	4620      	mov	r0, r4
1a00146a:	f000 f9bb 	bl	1a0017e4 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00146e:	4a07      	ldr	r2, [pc, #28]	; (1a00148c <Board_ADC_Init+0x2c>)
1a001470:	4669      	mov	r1, sp
1a001472:	4620      	mov	r0, r4
1a001474:	f000 f9d6 	bl	1a001824 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001478:	2200      	movs	r2, #0
1a00147a:	4669      	mov	r1, sp
1a00147c:	4620      	mov	r0, r4
1a00147e:	f000 f9ea 	bl	1a001856 <Chip_ADC_SetResolution>
}
1a001482:	b002      	add	sp, #8
1a001484:	bd10      	pop	{r4, pc}
1a001486:	bf00      	nop
1a001488:	400e3000 	.word	0x400e3000
1a00148c:	00061a80 	.word	0x00061a80

1a001490 <Board_SPI_Init>:
{
1a001490:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a001492:	4c0b      	ldr	r4, [pc, #44]	; (1a0014c0 <Board_SPI_Init+0x30>)
1a001494:	4620      	mov	r0, r4
1a001496:	f000 fe37 	bl	1a002108 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00149a:	6863      	ldr	r3, [r4, #4]
1a00149c:	f023 0304 	bic.w	r3, r3, #4
1a0014a0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0014a2:	6823      	ldr	r3, [r4, #0]
1a0014a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0014a8:	f043 0307 	orr.w	r3, r3, #7
1a0014ac:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0014ae:	4905      	ldr	r1, [pc, #20]	; (1a0014c4 <Board_SPI_Init+0x34>)
1a0014b0:	4620      	mov	r0, r4
1a0014b2:	f000 fe0a 	bl	1a0020ca <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0014b6:	6863      	ldr	r3, [r4, #4]
1a0014b8:	f043 0302 	orr.w	r3, r3, #2
1a0014bc:	6063      	str	r3, [r4, #4]
}
1a0014be:	bd10      	pop	{r4, pc}
1a0014c0:	400c5000 	.word	0x400c5000
1a0014c4:	000186a0 	.word	0x000186a0

1a0014c8 <Board_I2C_Init>:
{
1a0014c8:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0014ca:	2000      	movs	r0, #0
1a0014cc:	f000 fed8 	bl	1a002280 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0014d0:	4b04      	ldr	r3, [pc, #16]	; (1a0014e4 <Board_I2C_Init+0x1c>)
1a0014d2:	f640 0208 	movw	r2, #2056	; 0x808
1a0014d6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0014da:	4903      	ldr	r1, [pc, #12]	; (1a0014e8 <Board_I2C_Init+0x20>)
1a0014dc:	2000      	movs	r0, #0
1a0014de:	f000 fee1 	bl	1a0022a4 <Chip_I2C_SetClockRate>
}
1a0014e2:	bd08      	pop	{r3, pc}
1a0014e4:	40086000 	.word	0x40086000
1a0014e8:	000f4240 	.word	0x000f4240

1a0014ec <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0014ec:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0014ee:	4c07      	ldr	r4, [pc, #28]	; (1a00150c <Board_Debug_Init+0x20>)
1a0014f0:	4620      	mov	r0, r4
1a0014f2:	f000 f895 	bl	1a001620 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0014f6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0014fa:	4620      	mov	r0, r4
1a0014fc:	f000 f8da 	bl	1a0016b4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001500:	2303      	movs	r3, #3
1a001502:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001504:	2301      	movs	r3, #1
1a001506:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a001508:	bd10      	pop	{r4, pc}
1a00150a:	bf00      	nop
1a00150c:	400c1000 	.word	0x400c1000

1a001510 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001510:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001512:	f7ff ffeb 	bl	1a0014ec <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001516:	4808      	ldr	r0, [pc, #32]	; (1a001538 <Board_Init+0x28>)
1a001518:	f000 fdb7 	bl	1a00208a <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a00151c:	f7ff ff80 	bl	1a001420 <Board_GPIO_Init>
   Board_ADC_Init();
1a001520:	f7ff ff9e 	bl	1a001460 <Board_ADC_Init>
   Board_SPI_Init();
1a001524:	f7ff ffb4 	bl	1a001490 <Board_SPI_Init>
   Board_I2C_Init();
1a001528:	f7ff ffce 	bl	1a0014c8 <Board_I2C_Init>

   Board_LED_Init();
1a00152c:	f7ff ff36 	bl	1a00139c <Board_LED_Init>
   Board_TEC_Init();
1a001530:	f7ff ff56 	bl	1a0013e0 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a001534:	bd08      	pop	{r3, pc}
1a001536:	bf00      	nop
1a001538:	400f4000 	.word	0x400f4000

1a00153c <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a00153c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00153e:	f7ff ffd5 	bl	1a0014ec <Board_Debug_Init>
1a001542:	bd08      	pop	{r3, pc}

1a001544 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001544:	2300      	movs	r3, #0
1a001546:	2b1c      	cmp	r3, #28
1a001548:	d812      	bhi.n	1a001570 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00154a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00154c:	4a09      	ldr	r2, [pc, #36]	; (1a001574 <Board_SetupMuxing+0x30>)
1a00154e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001552:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001556:	784a      	ldrb	r2, [r1, #1]
1a001558:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00155a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00155e:	4906      	ldr	r1, [pc, #24]	; (1a001578 <Board_SetupMuxing+0x34>)
1a001560:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001564:	3301      	adds	r3, #1
1a001566:	2b1c      	cmp	r3, #28
1a001568:	d9f0      	bls.n	1a00154c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00156a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00156e:	4770      	bx	lr
1a001570:	4770      	bx	lr
1a001572:	bf00      	nop
1a001574:	1a0040c0 	.word	0x1a0040c0
1a001578:	40086000 	.word	0x40086000

1a00157c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00157c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00157e:	4a17      	ldr	r2, [pc, #92]	; (1a0015dc <Board_SetupClocking+0x60>)
1a001580:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001588:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00158c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001590:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001598:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00159c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0015a0:	2201      	movs	r2, #1
1a0015a2:	490f      	ldr	r1, [pc, #60]	; (1a0015e0 <Board_SetupClocking+0x64>)
1a0015a4:	2006      	movs	r0, #6
1a0015a6:	f000 fc2f 	bl	1a001e08 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0015aa:	2400      	movs	r4, #0
1a0015ac:	b14c      	cbz	r4, 1a0015c2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0015ae:	4b0b      	ldr	r3, [pc, #44]	; (1a0015dc <Board_SetupClocking+0x60>)
1a0015b0:	685a      	ldr	r2, [r3, #4]
1a0015b2:	f022 020c 	bic.w	r2, r2, #12
1a0015b6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0015b8:	685a      	ldr	r2, [r3, #4]
1a0015ba:	f042 0203 	orr.w	r2, r2, #3
1a0015be:	605a      	str	r2, [r3, #4]
}
1a0015c0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0015c2:	4808      	ldr	r0, [pc, #32]	; (1a0015e4 <Board_SetupClocking+0x68>)
1a0015c4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0015c8:	2301      	movs	r3, #1
1a0015ca:	788a      	ldrb	r2, [r1, #2]
1a0015cc:	7849      	ldrb	r1, [r1, #1]
1a0015ce:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0015d2:	f000 fb75 	bl	1a001cc0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0015d6:	3401      	adds	r4, #1
1a0015d8:	e7e8      	b.n	1a0015ac <Board_SetupClocking+0x30>
1a0015da:	bf00      	nop
1a0015dc:	40043000 	.word	0x40043000
1a0015e0:	0c28cb00 	.word	0x0c28cb00
1a0015e4:	1a0040bc 	.word	0x1a0040bc

1a0015e8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0015e8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0015ea:	f7ff ffab 	bl	1a001544 <Board_SetupMuxing>
    Board_SetupClocking();
1a0015ee:	f7ff ffc5 	bl	1a00157c <Board_SetupClocking>
}
1a0015f2:	bd08      	pop	{r3, pc}

1a0015f4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0015f4:	4b09      	ldr	r3, [pc, #36]	; (1a00161c <Chip_UART_GetIndex+0x28>)
1a0015f6:	4298      	cmp	r0, r3
1a0015f8:	d009      	beq.n	1a00160e <Chip_UART_GetIndex+0x1a>
1a0015fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0015fe:	4298      	cmp	r0, r3
1a001600:	d007      	beq.n	1a001612 <Chip_UART_GetIndex+0x1e>
1a001602:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001606:	4298      	cmp	r0, r3
1a001608:	d005      	beq.n	1a001616 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00160a:	2000      	movs	r0, #0
1a00160c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00160e:	2002      	movs	r0, #2
1a001610:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001612:	2003      	movs	r0, #3
1a001614:	4770      	bx	lr
			return 1;
1a001616:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001618:	4770      	bx	lr
1a00161a:	bf00      	nop
1a00161c:	400c1000 	.word	0x400c1000

1a001620 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001620:	b530      	push	{r4, r5, lr}
1a001622:	b083      	sub	sp, #12
1a001624:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001626:	f7ff ffe5 	bl	1a0015f4 <Chip_UART_GetIndex>
1a00162a:	2301      	movs	r3, #1
1a00162c:	461a      	mov	r2, r3
1a00162e:	4619      	mov	r1, r3
1a001630:	4d0e      	ldr	r5, [pc, #56]	; (1a00166c <Chip_UART_Init+0x4c>)
1a001632:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001636:	f000 fb89 	bl	1a001d4c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00163a:	2307      	movs	r3, #7
1a00163c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00163e:	2300      	movs	r3, #0
1a001640:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001642:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001644:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001646:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001648:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00164a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00164c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00164e:	4b08      	ldr	r3, [pc, #32]	; (1a001670 <Chip_UART_Init+0x50>)
1a001650:	429c      	cmp	r4, r3
1a001652:	d006      	beq.n	1a001662 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001654:	2303      	movs	r3, #3
1a001656:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001658:	2310      	movs	r3, #16
1a00165a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00165c:	9b01      	ldr	r3, [sp, #4]
}
1a00165e:	b003      	add	sp, #12
1a001660:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001662:	2300      	movs	r3, #0
1a001664:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001666:	69a3      	ldr	r3, [r4, #24]
1a001668:	9301      	str	r3, [sp, #4]
1a00166a:	e7f3      	b.n	1a001654 <Chip_UART_Init+0x34>
1a00166c:	1a00413c 	.word	0x1a00413c
1a001670:	40082000 	.word	0x40082000

1a001674 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001674:	b538      	push	{r3, r4, r5, lr}
1a001676:	4605      	mov	r5, r0
1a001678:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00167a:	f7ff ffbb 	bl	1a0015f4 <Chip_UART_GetIndex>
1a00167e:	4b0c      	ldr	r3, [pc, #48]	; (1a0016b0 <Chip_UART_SetBaud+0x3c>)
1a001680:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001684:	f000 fb9a 	bl	1a001dbc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001688:	0123      	lsls	r3, r4, #4
1a00168a:	fbb0 f3f3 	udiv	r3, r0, r3
1a00168e:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001690:	68ea      	ldr	r2, [r5, #12]
1a001692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001696:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001698:	6029      	str	r1, [r5, #0]
1a00169a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00169e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0016a0:	68ea      	ldr	r2, [r5, #12]
1a0016a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0016a6:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0016a8:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0016ac:	0900      	lsrs	r0, r0, #4
1a0016ae:	bd38      	pop	{r3, r4, r5, pc}
1a0016b0:	1a004134 	.word	0x1a004134

1a0016b4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0016b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0016b8:	b083      	sub	sp, #12
1a0016ba:	4683      	mov	fp, r0
1a0016bc:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0016be:	f7ff ff99 	bl	1a0015f4 <Chip_UART_GetIndex>
1a0016c2:	4b35      	ldr	r3, [pc, #212]	; (1a001798 <Chip_UART_SetBaudFDR+0xe4>)
1a0016c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0016c8:	f000 fb78 	bl	1a001dbc <Chip_Clock_GetRate>
1a0016cc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0016ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0016d2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0016d4:	2300      	movs	r3, #0
1a0016d6:	9301      	str	r3, [sp, #4]
1a0016d8:	46a2      	mov	sl, r4
1a0016da:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0016dc:	e02a      	b.n	1a001734 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0016de:	4242      	negs	r2, r0
				div ++;
1a0016e0:	1c4b      	adds	r3, r1, #1
1a0016e2:	e017      	b.n	1a001714 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0016e4:	b30a      	cbz	r2, 1a00172a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0016e6:	4617      	mov	r7, r2
			sd = d;
1a0016e8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0016ea:	46a2      	mov	sl, r4
			sdiv = div;
1a0016ec:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0016ee:	3501      	adds	r5, #1
1a0016f0:	42ac      	cmp	r4, r5
1a0016f2:	d91e      	bls.n	1a001732 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0016f4:	0933      	lsrs	r3, r6, #4
1a0016f6:	0730      	lsls	r0, r6, #28
1a0016f8:	fba4 0100 	umull	r0, r1, r4, r0
1a0016fc:	fb04 1103 	mla	r1, r4, r3, r1
1a001700:	1962      	adds	r2, r4, r5
1a001702:	fb08 f202 	mul.w	r2, r8, r2
1a001706:	2300      	movs	r3, #0
1a001708:	f002 fa34 	bl	1a003b74 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00170c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00170e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001710:	2800      	cmp	r0, #0
1a001712:	dbe4      	blt.n	1a0016de <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001714:	4297      	cmp	r7, r2
1a001716:	d3ea      	bcc.n	1a0016ee <Chip_UART_SetBaudFDR+0x3a>
1a001718:	2b00      	cmp	r3, #0
1a00171a:	d0e8      	beq.n	1a0016ee <Chip_UART_SetBaudFDR+0x3a>
1a00171c:	0c19      	lsrs	r1, r3, #16
1a00171e:	d1e6      	bne.n	1a0016ee <Chip_UART_SetBaudFDR+0x3a>
1a001720:	2b02      	cmp	r3, #2
1a001722:	d8df      	bhi.n	1a0016e4 <Chip_UART_SetBaudFDR+0x30>
1a001724:	2d00      	cmp	r5, #0
1a001726:	d0dd      	beq.n	1a0016e4 <Chip_UART_SetBaudFDR+0x30>
1a001728:	e7e1      	b.n	1a0016ee <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00172a:	4617      	mov	r7, r2
			sd = d;
1a00172c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00172e:	46a2      	mov	sl, r4
			sdiv = div;
1a001730:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001732:	3401      	adds	r4, #1
1a001734:	b11f      	cbz	r7, 1a00173e <Chip_UART_SetBaudFDR+0x8a>
1a001736:	2c0f      	cmp	r4, #15
1a001738:	d801      	bhi.n	1a00173e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00173a:	2500      	movs	r5, #0
1a00173c:	e7d8      	b.n	1a0016f0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00173e:	f1b9 0f00 	cmp.w	r9, #0
1a001742:	d024      	beq.n	1a00178e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001744:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00174c:	f8cb 300c 	str.w	r3, [fp, #12]
1a001750:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a001754:	f8cb 3000 	str.w	r3, [fp]
1a001758:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00175c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001760:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001768:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00176c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001770:	b2db      	uxtb	r3, r3
1a001772:	9901      	ldr	r1, [sp, #4]
1a001774:	f001 020f 	and.w	r2, r1, #15
1a001778:	4313      	orrs	r3, r2
1a00177a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00177e:	0933      	lsrs	r3, r6, #4
1a001780:	fb0a f303 	mul.w	r3, sl, r3
1a001784:	448a      	add	sl, r1
1a001786:	fb09 f90a 	mul.w	r9, r9, sl
1a00178a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00178e:	4648      	mov	r0, r9
1a001790:	b003      	add	sp, #12
1a001792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001796:	bf00      	nop
1a001798:	1a004134 	.word	0x1a004134

1a00179c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00179c:	4b03      	ldr	r3, [pc, #12]	; (1a0017ac <Chip_ADC_GetClockIndex+0x10>)
1a00179e:	4298      	cmp	r0, r3
1a0017a0:	d001      	beq.n	1a0017a6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0017a2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0017a4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0017a6:	2004      	movs	r0, #4
1a0017a8:	4770      	bx	lr
1a0017aa:	bf00      	nop
1a0017ac:	400e4000 	.word	0x400e4000

1a0017b0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0017b0:	b570      	push	{r4, r5, r6, lr}
1a0017b2:	460d      	mov	r5, r1
1a0017b4:	4614      	mov	r4, r2
1a0017b6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0017b8:	f7ff fff0 	bl	1a00179c <Chip_ADC_GetClockIndex>
1a0017bc:	f000 fafe 	bl	1a001dbc <Chip_Clock_GetRate>
	if (burstMode) {
1a0017c0:	b965      	cbnz	r5, 1a0017dc <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0017c2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0017c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0017ca:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0017ce:	0064      	lsls	r4, r4, #1
1a0017d0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0017d4:	b2c0      	uxtb	r0, r0
1a0017d6:	3801      	subs	r0, #1
	return div;
}
1a0017d8:	b2c0      	uxtb	r0, r0
1a0017da:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0017dc:	fb04 f406 	mul.w	r4, r4, r6
1a0017e0:	e7f3      	b.n	1a0017ca <getClkDiv+0x1a>
1a0017e2:	Address 0x000000001a0017e2 is out of bounds.


1a0017e4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0017e4:	b538      	push	{r3, r4, r5, lr}
1a0017e6:	4605      	mov	r5, r0
1a0017e8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0017ea:	f7ff ffd7 	bl	1a00179c <Chip_ADC_GetClockIndex>
1a0017ee:	2301      	movs	r3, #1
1a0017f0:	461a      	mov	r2, r3
1a0017f2:	4619      	mov	r1, r3
1a0017f4:	f000 faaa 	bl	1a001d4c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0017f8:	2100      	movs	r1, #0
1a0017fa:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0017fc:	4a08      	ldr	r2, [pc, #32]	; (1a001820 <Chip_ADC_Init+0x3c>)
1a0017fe:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001800:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001802:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001804:	230b      	movs	r3, #11
1a001806:	4628      	mov	r0, r5
1a001808:	f7ff ffd2 	bl	1a0017b0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00180c:	0200      	lsls	r0, r0, #8
1a00180e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001812:	7920      	ldrb	r0, [r4, #4]
1a001814:	0440      	lsls	r0, r0, #17
1a001816:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00181a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00181c:	6028      	str	r0, [r5, #0]
}
1a00181e:	bd38      	pop	{r3, r4, r5, pc}
1a001820:	00061a80 	.word	0x00061a80

1a001824 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001824:	b570      	push	{r4, r5, r6, lr}
1a001826:	4605      	mov	r5, r0
1a001828:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00182a:	6804      	ldr	r4, [r0, #0]
1a00182c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001830:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001834:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001836:	790b      	ldrb	r3, [r1, #4]
1a001838:	f1c3 030b 	rsb	r3, r3, #11
1a00183c:	b2db      	uxtb	r3, r3
1a00183e:	7949      	ldrb	r1, [r1, #5]
1a001840:	f7ff ffb6 	bl	1a0017b0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001844:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001848:	7930      	ldrb	r0, [r6, #4]
1a00184a:	0440      	lsls	r0, r0, #17
1a00184c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001850:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a001852:	6028      	str	r0, [r5, #0]
}
1a001854:	bd70      	pop	{r4, r5, r6, pc}

1a001856 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001856:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001858:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00185a:	680a      	ldr	r2, [r1, #0]
1a00185c:	f7ff ffe2 	bl	1a001824 <Chip_ADC_SetSampleRate>
}
1a001860:	bd08      	pop	{r3, pc}
1a001862:	Address 0x000000001a001862 is out of bounds.


1a001864 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001864:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001866:	2069      	movs	r0, #105	; 0x69
1a001868:	f000 faa8 	bl	1a001dbc <Chip_Clock_GetRate>
1a00186c:	4b01      	ldr	r3, [pc, #4]	; (1a001874 <SystemCoreClockUpdate+0x10>)
1a00186e:	6018      	str	r0, [r3, #0]
}
1a001870:	bd08      	pop	{r3, pc}
1a001872:	bf00      	nop
1a001874:	10000518 	.word	0x10000518

1a001878 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001878:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00187a:	680b      	ldr	r3, [r1, #0]
1a00187c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001880:	d002      	beq.n	1a001888 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001886:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001888:	4607      	mov	r7, r0
1a00188a:	2501      	movs	r5, #1
1a00188c:	e03b      	b.n	1a001906 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00188e:	694b      	ldr	r3, [r1, #20]
1a001890:	fb03 f302 	mul.w	r3, r3, r2
1a001894:	fbb3 f3f5 	udiv	r3, r3, r5
1a001898:	e014      	b.n	1a0018c4 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00189a:	461c      	mov	r4, r3
1a00189c:	e020      	b.n	1a0018e0 <pll_calc_divs+0x68>
		return -val;
1a00189e:	f1cc 0c00 	rsb	ip, ip, #0
1a0018a2:	e020      	b.n	1a0018e6 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0018a4:	3201      	adds	r2, #1
1a0018a6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0018aa:	dc26      	bgt.n	1a0018fa <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0018ac:	680c      	ldr	r4, [r1, #0]
1a0018ae:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0018b2:	d0ec      	beq.n	1a00188e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0018b4:	1c73      	adds	r3, r6, #1
1a0018b6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0018ba:	694b      	ldr	r3, [r1, #20]
1a0018bc:	fb03 f30c 	mul.w	r3, r3, ip
1a0018c0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0018c4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a001914 <pll_calc_divs+0x9c>
1a0018c8:	4563      	cmp	r3, ip
1a0018ca:	d9eb      	bls.n	1a0018a4 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0018cc:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a001918 <pll_calc_divs+0xa0>
1a0018d0:	4563      	cmp	r3, ip
1a0018d2:	d812      	bhi.n	1a0018fa <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0018d4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0018d8:	d1df      	bne.n	1a00189a <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0018da:	1c74      	adds	r4, r6, #1
1a0018dc:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0018e0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0018e4:	d4db      	bmi.n	1a00189e <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0018e6:	4567      	cmp	r7, ip
1a0018e8:	d9dc      	bls.n	1a0018a4 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0018ea:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0018ec:	1c77      	adds	r7, r6, #1
1a0018ee:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0018f0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0018f2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0018f4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0018f6:	4667      	mov	r7, ip
1a0018f8:	e7d4      	b.n	1a0018a4 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0018fa:	3601      	adds	r6, #1
1a0018fc:	2e03      	cmp	r6, #3
1a0018fe:	dc01      	bgt.n	1a001904 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a001900:	2201      	movs	r2, #1
1a001902:	e7d0      	b.n	1a0018a6 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a001904:	3501      	adds	r5, #1
1a001906:	2d04      	cmp	r5, #4
1a001908:	dc01      	bgt.n	1a00190e <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a00190a:	2600      	movs	r6, #0
1a00190c:	e7f6      	b.n	1a0018fc <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00190e:	bcf0      	pop	{r4, r5, r6, r7}
1a001910:	4770      	bx	lr
1a001912:	bf00      	nop
1a001914:	094c5eff 	.word	0x094c5eff
1a001918:	1312d000 	.word	0x1312d000

1a00191c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00191c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00191e:	b099      	sub	sp, #100	; 0x64
1a001920:	4605      	mov	r5, r0
1a001922:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001924:	225c      	movs	r2, #92	; 0x5c
1a001926:	2100      	movs	r1, #0
1a001928:	a801      	add	r0, sp, #4
1a00192a:	f002 facd 	bl	1a003ec8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00192e:	2380      	movs	r3, #128	; 0x80
1a001930:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001932:	6963      	ldr	r3, [r4, #20]
1a001934:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001936:	7923      	ldrb	r3, [r4, #4]
1a001938:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00193c:	4669      	mov	r1, sp
1a00193e:	4628      	mov	r0, r5
1a001940:	f7ff ff9a 	bl	1a001878 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001944:	9b06      	ldr	r3, [sp, #24]
1a001946:	42ab      	cmp	r3, r5
1a001948:	d027      	beq.n	1a00199a <pll_get_frac+0x7e>
	if (val < 0)
1a00194a:	1aeb      	subs	r3, r5, r3
1a00194c:	d42e      	bmi.n	1a0019ac <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00194e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001950:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001956:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001958:	6963      	ldr	r3, [r4, #20]
1a00195a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00195c:	7923      	ldrb	r3, [r4, #4]
1a00195e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001962:	a910      	add	r1, sp, #64	; 0x40
1a001964:	4628      	mov	r0, r5
1a001966:	f7ff ff87 	bl	1a001878 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00196a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00196c:	42ab      	cmp	r3, r5
1a00196e:	d01f      	beq.n	1a0019b0 <pll_get_frac+0x94>
	if (val < 0)
1a001970:	1aeb      	subs	r3, r5, r3
1a001972:	d425      	bmi.n	1a0019c0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001974:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001976:	4b2b      	ldr	r3, [pc, #172]	; (1a001a24 <pll_get_frac+0x108>)
1a001978:	429d      	cmp	r5, r3
1a00197a:	d923      	bls.n	1a0019c4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00197c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00197e:	1aed      	subs	r5, r5, r3
1a001980:	d433      	bmi.n	1a0019ea <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001982:	42ae      	cmp	r6, r5
1a001984:	dc3b      	bgt.n	1a0019fe <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001986:	42be      	cmp	r6, r7
1a001988:	dc31      	bgt.n	1a0019ee <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00198a:	466d      	mov	r5, sp
1a00198c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00198e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001990:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001998:	e006      	b.n	1a0019a8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00199a:	466d      	mov	r5, sp
1a00199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0019a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0019a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0019a8:	b019      	add	sp, #100	; 0x64
1a0019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0019ac:	425b      	negs	r3, r3
1a0019ae:	e7ce      	b.n	1a00194e <pll_get_frac+0x32>
		*ppll = pll[2];
1a0019b0:	ad10      	add	r5, sp, #64	; 0x40
1a0019b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0019b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0019b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0019ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0019be:	e7f3      	b.n	1a0019a8 <pll_get_frac+0x8c>
		return -val;
1a0019c0:	425b      	negs	r3, r3
1a0019c2:	e7d7      	b.n	1a001974 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0019c4:	2340      	movs	r3, #64	; 0x40
1a0019c6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0019c8:	6963      	ldr	r3, [r4, #20]
1a0019ca:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0019cc:	a908      	add	r1, sp, #32
1a0019ce:	4628      	mov	r0, r5
1a0019d0:	f7ff ff52 	bl	1a001878 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0019d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0019d6:	42ab      	cmp	r3, r5
1a0019d8:	d1d0      	bne.n	1a00197c <pll_get_frac+0x60>
			*ppll = pll[1];
1a0019da:	ad08      	add	r5, sp, #32
1a0019dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0019de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0019e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0019e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0019e8:	e7de      	b.n	1a0019a8 <pll_get_frac+0x8c>
		return -val;
1a0019ea:	426d      	negs	r5, r5
1a0019ec:	e7c9      	b.n	1a001982 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0019ee:	ad10      	add	r5, sp, #64	; 0x40
1a0019f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0019f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0019f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0019f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0019fc:	e7d4      	b.n	1a0019a8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0019fe:	42af      	cmp	r7, r5
1a001a00:	db07      	blt.n	1a001a12 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001a02:	ad08      	add	r5, sp, #32
1a001a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001a08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001a10:	e7ca      	b.n	1a0019a8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001a12:	ad10      	add	r5, sp, #64	; 0x40
1a001a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001a20:	e7c2      	b.n	1a0019a8 <pll_get_frac+0x8c>
1a001a22:	bf00      	nop
1a001a24:	068e7780 	.word	0x068e7780

1a001a28 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001a28:	b430      	push	{r4, r5}
1a001a2a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001a2c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001a2e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001a30:	e000      	b.n	1a001a34 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001a32:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001a34:	281c      	cmp	r0, #28
1a001a36:	d118      	bne.n	1a001a6a <Chip_Clock_FindBaseClock+0x42>
1a001a38:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001a3c:	0051      	lsls	r1, r2, #1
1a001a3e:	4a0c      	ldr	r2, [pc, #48]	; (1a001a70 <Chip_Clock_FindBaseClock+0x48>)
1a001a40:	440a      	add	r2, r1
1a001a42:	7914      	ldrb	r4, [r2, #4]
1a001a44:	4284      	cmp	r4, r0
1a001a46:	d010      	beq.n	1a001a6a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001a48:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001a4c:	004a      	lsls	r2, r1, #1
1a001a4e:	4908      	ldr	r1, [pc, #32]	; (1a001a70 <Chip_Clock_FindBaseClock+0x48>)
1a001a50:	5a8a      	ldrh	r2, [r1, r2]
1a001a52:	42aa      	cmp	r2, r5
1a001a54:	d8ed      	bhi.n	1a001a32 <Chip_Clock_FindBaseClock+0xa>
1a001a56:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001a5a:	0051      	lsls	r1, r2, #1
1a001a5c:	4a04      	ldr	r2, [pc, #16]	; (1a001a70 <Chip_Clock_FindBaseClock+0x48>)
1a001a5e:	440a      	add	r2, r1
1a001a60:	8852      	ldrh	r2, [r2, #2]
1a001a62:	42aa      	cmp	r2, r5
1a001a64:	d3e5      	bcc.n	1a001a32 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001a66:	4620      	mov	r0, r4
1a001a68:	e7e4      	b.n	1a001a34 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001a6a:	bc30      	pop	{r4, r5}
1a001a6c:	4770      	bx	lr
1a001a6e:	bf00      	nop
1a001a70:	1a004150 	.word	0x1a004150

1a001a74 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001a74:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001a7a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001a7c:	4a0d      	ldr	r2, [pc, #52]	; (1a001ab4 <Chip_Clock_EnableCrystal+0x40>)
1a001a7e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001a80:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001a84:	6992      	ldr	r2, [r2, #24]
1a001a86:	428a      	cmp	r2, r1
1a001a88:	d001      	beq.n	1a001a8e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001a8a:	4a0a      	ldr	r2, [pc, #40]	; (1a001ab4 <Chip_Clock_EnableCrystal+0x40>)
1a001a8c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001a8e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001a92:	4a09      	ldr	r2, [pc, #36]	; (1a001ab8 <Chip_Clock_EnableCrystal+0x44>)
1a001a94:	6811      	ldr	r1, [r2, #0]
1a001a96:	4a09      	ldr	r2, [pc, #36]	; (1a001abc <Chip_Clock_EnableCrystal+0x48>)
1a001a98:	4291      	cmp	r1, r2
1a001a9a:	d901      	bls.n	1a001aa0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001a9c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001aa0:	4a04      	ldr	r2, [pc, #16]	; (1a001ab4 <Chip_Clock_EnableCrystal+0x40>)
1a001aa2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001aa4:	9b01      	ldr	r3, [sp, #4]
1a001aa6:	1e5a      	subs	r2, r3, #1
1a001aa8:	9201      	str	r2, [sp, #4]
1a001aaa:	2b00      	cmp	r3, #0
1a001aac:	d1fa      	bne.n	1a001aa4 <Chip_Clock_EnableCrystal+0x30>
}
1a001aae:	b002      	add	sp, #8
1a001ab0:	4770      	bx	lr
1a001ab2:	bf00      	nop
1a001ab4:	40050000 	.word	0x40050000
1a001ab8:	1a0040b8 	.word	0x1a0040b8
1a001abc:	01312cff 	.word	0x01312cff

1a001ac0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001ac0:	3012      	adds	r0, #18
1a001ac2:	4b05      	ldr	r3, [pc, #20]	; (1a001ad8 <Chip_Clock_GetDividerSource+0x18>)
1a001ac4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001ac8:	f010 0f01 	tst.w	r0, #1
1a001acc:	d102      	bne.n	1a001ad4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001ace:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001ad2:	4770      	bx	lr
		return CLKINPUT_PD;
1a001ad4:	2011      	movs	r0, #17
}
1a001ad6:	4770      	bx	lr
1a001ad8:	40050000 	.word	0x40050000

1a001adc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001adc:	f100 0212 	add.w	r2, r0, #18
1a001ae0:	4b03      	ldr	r3, [pc, #12]	; (1a001af0 <Chip_Clock_GetDividerDivisor+0x14>)
1a001ae2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001ae6:	4b03      	ldr	r3, [pc, #12]	; (1a001af4 <Chip_Clock_GetDividerDivisor+0x18>)
1a001ae8:	5c18      	ldrb	r0, [r3, r0]
}
1a001aea:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001aee:	4770      	bx	lr
1a001af0:	40050000 	.word	0x40050000
1a001af4:	1a004148 	.word	0x1a004148

1a001af8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001af8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001afa:	2810      	cmp	r0, #16
1a001afc:	d80a      	bhi.n	1a001b14 <Chip_Clock_GetClockInputHz+0x1c>
1a001afe:	e8df f000 	tbb	[pc, r0]
1a001b02:	0b42      	.short	0x0b42
1a001b04:	091f160d 	.word	0x091f160d
1a001b08:	2b282522 	.word	0x2b282522
1a001b0c:	322e0909 	.word	0x322e0909
1a001b10:	3a36      	.short	0x3a36
1a001b12:	3e          	.byte	0x3e
1a001b13:	00          	.byte	0x00
	uint32_t rate = 0;
1a001b14:	2000      	movs	r0, #0
1a001b16:	e038      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001b18:	481e      	ldr	r0, [pc, #120]	; (1a001b94 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001b1a:	e036      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001b1c:	4b1e      	ldr	r3, [pc, #120]	; (1a001b98 <Chip_Clock_GetClockInputHz+0xa0>)
1a001b1e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001b22:	f003 0307 	and.w	r3, r3, #7
1a001b26:	2b04      	cmp	r3, #4
1a001b28:	d130      	bne.n	1a001b8c <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a001b2a:	2000      	movs	r0, #0
1a001b2c:	e02d      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001b2e:	4b1a      	ldr	r3, [pc, #104]	; (1a001b98 <Chip_Clock_GetClockInputHz+0xa0>)
1a001b30:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001b34:	f003 0307 	and.w	r3, r3, #7
1a001b38:	2b04      	cmp	r3, #4
1a001b3a:	d029      	beq.n	1a001b90 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001b3c:	4817      	ldr	r0, [pc, #92]	; (1a001b9c <Chip_Clock_GetClockInputHz+0xa4>)
1a001b3e:	e024      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001b40:	4b17      	ldr	r3, [pc, #92]	; (1a001ba0 <Chip_Clock_GetClockInputHz+0xa8>)
1a001b42:	6818      	ldr	r0, [r3, #0]
		break;
1a001b44:	e021      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001b46:	4b17      	ldr	r3, [pc, #92]	; (1a001ba4 <Chip_Clock_GetClockInputHz+0xac>)
1a001b48:	6818      	ldr	r0, [r3, #0]
		break;
1a001b4a:	e01e      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001b4c:	4b16      	ldr	r3, [pc, #88]	; (1a001ba8 <Chip_Clock_GetClockInputHz+0xb0>)
1a001b4e:	6818      	ldr	r0, [r3, #0]
		break;
1a001b50:	e01b      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001b52:	4b15      	ldr	r3, [pc, #84]	; (1a001ba8 <Chip_Clock_GetClockInputHz+0xb0>)
1a001b54:	6858      	ldr	r0, [r3, #4]
		break;
1a001b56:	e018      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001b58:	f000 f86a 	bl	1a001c30 <Chip_Clock_GetMainPLLHz>
		break;
1a001b5c:	e015      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001b5e:	2100      	movs	r1, #0
1a001b60:	f000 f89c 	bl	1a001c9c <Chip_Clock_GetDivRate>
		break;
1a001b64:	e011      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001b66:	2101      	movs	r1, #1
1a001b68:	f000 f898 	bl	1a001c9c <Chip_Clock_GetDivRate>
		break;
1a001b6c:	e00d      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001b6e:	2102      	movs	r1, #2
1a001b70:	f000 f894 	bl	1a001c9c <Chip_Clock_GetDivRate>
		break;
1a001b74:	e009      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001b76:	2103      	movs	r1, #3
1a001b78:	f000 f890 	bl	1a001c9c <Chip_Clock_GetDivRate>
		break;
1a001b7c:	e005      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001b7e:	2104      	movs	r1, #4
1a001b80:	f000 f88c 	bl	1a001c9c <Chip_Clock_GetDivRate>
		break;
1a001b84:	e001      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a001b86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001b8a:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a001b8c:	4803      	ldr	r0, [pc, #12]	; (1a001b9c <Chip_Clock_GetClockInputHz+0xa4>)
1a001b8e:	e7fc      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a001b90:	4806      	ldr	r0, [pc, #24]	; (1a001bac <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001b92:	e7fa      	b.n	1a001b8a <Chip_Clock_GetClockInputHz+0x92>
1a001b94:	00b71b00 	.word	0x00b71b00
1a001b98:	40043000 	.word	0x40043000
1a001b9c:	017d7840 	.word	0x017d7840
1a001ba0:	1a00408c 	.word	0x1a00408c
1a001ba4:	1a0040b8 	.word	0x1a0040b8
1a001ba8:	100004c4 	.word	0x100004c4
1a001bac:	02faf080 	.word	0x02faf080

1a001bb0 <Chip_Clock_CalcMainPLLValue>:
{
1a001bb0:	b538      	push	{r3, r4, r5, lr}
1a001bb2:	4605      	mov	r5, r0
1a001bb4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001bb6:	7908      	ldrb	r0, [r1, #4]
1a001bb8:	f7ff ff9e 	bl	1a001af8 <Chip_Clock_GetClockInputHz>
1a001bbc:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001bbe:	4b19      	ldr	r3, [pc, #100]	; (1a001c24 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001bc0:	442b      	add	r3, r5
1a001bc2:	4a19      	ldr	r2, [pc, #100]	; (1a001c28 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001bc4:	4293      	cmp	r3, r2
1a001bc6:	d821      	bhi.n	1a001c0c <Chip_Clock_CalcMainPLLValue+0x5c>
1a001bc8:	b318      	cbz	r0, 1a001c12 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001bca:	2380      	movs	r3, #128	; 0x80
1a001bcc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001bce:	2300      	movs	r3, #0
1a001bd0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001bd2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001bd4:	fbb5 f3f0 	udiv	r3, r5, r0
1a001bd8:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001bda:	4a14      	ldr	r2, [pc, #80]	; (1a001c2c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001bdc:	4295      	cmp	r5, r2
1a001bde:	d903      	bls.n	1a001be8 <Chip_Clock_CalcMainPLLValue+0x38>
1a001be0:	fb03 f000 	mul.w	r0, r3, r0
1a001be4:	42a8      	cmp	r0, r5
1a001be6:	d007      	beq.n	1a001bf8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001be8:	4621      	mov	r1, r4
1a001bea:	4628      	mov	r0, r5
1a001bec:	f7ff fe96 	bl	1a00191c <pll_get_frac>
		if (!ppll->nsel) {
1a001bf0:	68a3      	ldr	r3, [r4, #8]
1a001bf2:	b18b      	cbz	r3, 1a001c18 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001bf4:	3b01      	subs	r3, #1
1a001bf6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001bf8:	6923      	ldr	r3, [r4, #16]
1a001bfa:	b183      	cbz	r3, 1a001c1e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001bfc:	68e2      	ldr	r2, [r4, #12]
1a001bfe:	b10a      	cbz	r2, 1a001c04 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001c00:	3a01      	subs	r2, #1
1a001c02:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001c04:	3b01      	subs	r3, #1
1a001c06:	6123      	str	r3, [r4, #16]
	return 0;
1a001c08:	2000      	movs	r0, #0
}
1a001c0a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c10:	e7fb      	b.n	1a001c0a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c16:	e7f8      	b.n	1a001c0a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c1c:	e7f5      	b.n	1a001c0a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001c22:	e7f2      	b.n	1a001c0a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001c24:	ff6b3a10 	.word	0xff6b3a10
1a001c28:	0b940510 	.word	0x0b940510
1a001c2c:	094c5eff 	.word	0x094c5eff

1a001c30 <Chip_Clock_GetMainPLLHz>:
{
1a001c30:	b530      	push	{r4, r5, lr}
1a001c32:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001c34:	4d17      	ldr	r5, [pc, #92]	; (1a001c94 <Chip_Clock_GetMainPLLHz+0x64>)
1a001c36:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001c38:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001c3c:	f7ff ff5c 	bl	1a001af8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001c40:	4b15      	ldr	r3, [pc, #84]	; (1a001c98 <Chip_Clock_GetMainPLLHz+0x68>)
1a001c42:	681b      	ldr	r3, [r3, #0]
1a001c44:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001c46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001c48:	f013 0f01 	tst.w	r3, #1
1a001c4c:	d01f      	beq.n	1a001c8e <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a001c4e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001c52:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001c56:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001c5a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001c5e:	3301      	adds	r3, #1
	n = nsel + 1;
1a001c60:	3201      	adds	r2, #1
	p = ptab[psel];
1a001c62:	f10d 0c08 	add.w	ip, sp, #8
1a001c66:	4461      	add	r1, ip
1a001c68:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001c6c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001c70:	d108      	bne.n	1a001c84 <Chip_Clock_GetMainPLLHz+0x54>
1a001c72:	b93d      	cbnz	r5, 1a001c84 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001c74:	0049      	lsls	r1, r1, #1
1a001c76:	fbb3 f3f1 	udiv	r3, r3, r1
1a001c7a:	fbb0 f0f2 	udiv	r0, r0, r2
1a001c7e:	fb00 f003 	mul.w	r0, r0, r3
1a001c82:	e005      	b.n	1a001c90 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001c84:	fbb0 f0f2 	udiv	r0, r0, r2
1a001c88:	fb03 f000 	mul.w	r0, r3, r0
1a001c8c:	e000      	b.n	1a001c90 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a001c8e:	2000      	movs	r0, #0
}
1a001c90:	b003      	add	sp, #12
1a001c92:	bd30      	pop	{r4, r5, pc}
1a001c94:	40050000 	.word	0x40050000
1a001c98:	1a004144 	.word	0x1a004144

1a001c9c <Chip_Clock_GetDivRate>:
{
1a001c9c:	b538      	push	{r3, r4, r5, lr}
1a001c9e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001ca0:	4608      	mov	r0, r1
1a001ca2:	f7ff ff0d 	bl	1a001ac0 <Chip_Clock_GetDividerSource>
1a001ca6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001ca8:	4620      	mov	r0, r4
1a001caa:	f7ff ff17 	bl	1a001adc <Chip_Clock_GetDividerDivisor>
1a001cae:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001cb0:	4628      	mov	r0, r5
1a001cb2:	f7ff ff21 	bl	1a001af8 <Chip_Clock_GetClockInputHz>
1a001cb6:	3401      	adds	r4, #1
}
1a001cb8:	fbb0 f0f4 	udiv	r0, r0, r4
1a001cbc:	bd38      	pop	{r3, r4, r5, pc}
1a001cbe:	Address 0x000000001a001cbe is out of bounds.


1a001cc0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001cc0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001cc2:	f100 0416 	add.w	r4, r0, #22
1a001cc6:	00a4      	lsls	r4, r4, #2
1a001cc8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001ccc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001cd0:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001cd2:	281b      	cmp	r0, #27
1a001cd4:	d813      	bhi.n	1a001cfe <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001cd6:	2911      	cmp	r1, #17
1a001cd8:	d01a      	beq.n	1a001d10 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001cda:	4d0e      	ldr	r5, [pc, #56]	; (1a001d14 <Chip_Clock_SetBaseClock+0x54>)
1a001cdc:	4025      	ands	r5, r4

			if (autoblocken) {
1a001cde:	b10a      	cbz	r2, 1a001ce4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001ce0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001ce4:	b10b      	cbz	r3, 1a001cea <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001ce6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001cea:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001cee:	3016      	adds	r0, #22
1a001cf0:	0080      	lsls	r0, r0, #2
1a001cf2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001cf6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001cfa:	6045      	str	r5, [r0, #4]
1a001cfc:	e008      	b.n	1a001d10 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001cfe:	f044 0401 	orr.w	r4, r4, #1
1a001d02:	3016      	adds	r0, #22
1a001d04:	0080      	lsls	r0, r0, #2
1a001d06:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001d0a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001d0e:	6044      	str	r4, [r0, #4]
	}
}
1a001d10:	bc30      	pop	{r4, r5}
1a001d12:	4770      	bx	lr
1a001d14:	e0fff7fe 	.word	0xe0fff7fe

1a001d18 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001d18:	281b      	cmp	r0, #27
1a001d1a:	d80c      	bhi.n	1a001d36 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001d1c:	3016      	adds	r0, #22
1a001d1e:	0080      	lsls	r0, r0, #2
1a001d20:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001d24:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001d28:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001d2a:	f010 0f01 	tst.w	r0, #1
1a001d2e:	d104      	bne.n	1a001d3a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001d30:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001d34:	4770      	bx	lr
		return CLKINPUT_PD;
1a001d36:	2011      	movs	r0, #17
1a001d38:	4770      	bx	lr
		return CLKINPUT_PD;
1a001d3a:	2011      	movs	r0, #17
}
1a001d3c:	4770      	bx	lr

1a001d3e <Chip_Clock_GetBaseClocktHz>:
{
1a001d3e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001d40:	f7ff ffea 	bl	1a001d18 <Chip_Clock_GetBaseClock>
1a001d44:	f7ff fed8 	bl	1a001af8 <Chip_Clock_GetClockInputHz>
}
1a001d48:	bd08      	pop	{r3, pc}
1a001d4a:	Address 0x000000001a001d4a is out of bounds.


1a001d4c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001d4c:	b969      	cbnz	r1, 1a001d6a <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a001d4e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001d50:	b10a      	cbz	r2, 1a001d56 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001d52:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001d56:	2b02      	cmp	r3, #2
1a001d58:	d009      	beq.n	1a001d6e <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001d5a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001d5e:	d209      	bcs.n	1a001d74 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001d60:	3020      	adds	r0, #32
1a001d62:	4b07      	ldr	r3, [pc, #28]	; (1a001d80 <Chip_Clock_EnableOpts+0x34>)
1a001d64:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001d68:	4770      	bx	lr
		reg |= (1 << 1);
1a001d6a:	2103      	movs	r1, #3
1a001d6c:	e7f0      	b.n	1a001d50 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001d6e:	f041 0120 	orr.w	r1, r1, #32
1a001d72:	e7f2      	b.n	1a001d5a <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001d74:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001d78:	4b02      	ldr	r3, [pc, #8]	; (1a001d84 <Chip_Clock_EnableOpts+0x38>)
1a001d7a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001d7e:	4770      	bx	lr
1a001d80:	40051000 	.word	0x40051000
1a001d84:	40052000 	.word	0x40052000

1a001d88 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001d88:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001d8c:	d208      	bcs.n	1a001da0 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001d8e:	4a09      	ldr	r2, [pc, #36]	; (1a001db4 <Chip_Clock_Enable+0x2c>)
1a001d90:	3020      	adds	r0, #32
1a001d92:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001d96:	f043 0301 	orr.w	r3, r3, #1
1a001d9a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001d9e:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001da0:	4a05      	ldr	r2, [pc, #20]	; (1a001db8 <Chip_Clock_Enable+0x30>)
1a001da2:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001da6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001daa:	f043 0301 	orr.w	r3, r3, #1
1a001dae:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001db2:	4770      	bx	lr
1a001db4:	40051000 	.word	0x40051000
1a001db8:	40052000 	.word	0x40052000

1a001dbc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001dbc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001dbe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001dc2:	d309      	bcc.n	1a001dd8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001dc4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001dc8:	4a0d      	ldr	r2, [pc, #52]	; (1a001e00 <Chip_Clock_GetRate+0x44>)
1a001dca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001dce:	f014 0f01 	tst.w	r4, #1
1a001dd2:	d107      	bne.n	1a001de4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001dd4:	2000      	movs	r0, #0
	}

	return rate;
}
1a001dd6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001dd8:	f100 0320 	add.w	r3, r0, #32
1a001ddc:	4a09      	ldr	r2, [pc, #36]	; (1a001e04 <Chip_Clock_GetRate+0x48>)
1a001dde:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001de2:	e7f4      	b.n	1a001dce <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001de4:	f7ff fe20 	bl	1a001a28 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001de8:	f7ff ffa9 	bl	1a001d3e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001dec:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001df0:	d103      	bne.n	1a001dfa <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001df2:	2301      	movs	r3, #1
		rate = rate / div;
1a001df4:	fbb0 f0f3 	udiv	r0, r0, r3
1a001df8:	e7ed      	b.n	1a001dd6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001dfa:	2302      	movs	r3, #2
1a001dfc:	e7fa      	b.n	1a001df4 <Chip_Clock_GetRate+0x38>
1a001dfe:	bf00      	nop
1a001e00:	40052000 	.word	0x40052000
1a001e04:	40051000 	.word	0x40051000

1a001e08 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001e08:	b570      	push	{r4, r5, r6, lr}
1a001e0a:	b08a      	sub	sp, #40	; 0x28
1a001e0c:	4605      	mov	r5, r0
1a001e0e:	460e      	mov	r6, r1
1a001e10:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001e12:	f242 7310 	movw	r3, #10000	; 0x2710
1a001e16:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001e18:	2806      	cmp	r0, #6
1a001e1a:	d018      	beq.n	1a001e4e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001e1c:	2300      	movs	r3, #0
1a001e1e:	2201      	movs	r2, #1
1a001e20:	4629      	mov	r1, r5
1a001e22:	2004      	movs	r0, #4
1a001e24:	f7ff ff4c 	bl	1a001cc0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001e28:	4a49      	ldr	r2, [pc, #292]	; (1a001f50 <Chip_SetupCoreClock+0x148>)
1a001e2a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001e2c:	f043 0301 	orr.w	r3, r3, #1
1a001e30:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001e32:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001e36:	a901      	add	r1, sp, #4
1a001e38:	4630      	mov	r0, r6
1a001e3a:	f7ff feb9 	bl	1a001bb0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001e3e:	4b45      	ldr	r3, [pc, #276]	; (1a001f54 <Chip_SetupCoreClock+0x14c>)
1a001e40:	429e      	cmp	r6, r3
1a001e42:	d916      	bls.n	1a001e72 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001e44:	9b01      	ldr	r3, [sp, #4]
1a001e46:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001e4a:	d003      	beq.n	1a001e54 <Chip_SetupCoreClock+0x4c>
1a001e4c:	e7fe      	b.n	1a001e4c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001e4e:	f7ff fe11 	bl	1a001a74 <Chip_Clock_EnableCrystal>
1a001e52:	e7e3      	b.n	1a001e1c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a001e54:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001e58:	d005      	beq.n	1a001e66 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001e5e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001e60:	2500      	movs	r5, #0
			direct = 1;
1a001e62:	2601      	movs	r6, #1
1a001e64:	e007      	b.n	1a001e76 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001e66:	9b04      	ldr	r3, [sp, #16]
1a001e68:	3301      	adds	r3, #1
1a001e6a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001e6c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001e6e:	2600      	movs	r6, #0
1a001e70:	e001      	b.n	1a001e76 <Chip_SetupCoreClock+0x6e>
1a001e72:	2500      	movs	r5, #0
1a001e74:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001e76:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001e7a:	9b01      	ldr	r3, [sp, #4]
1a001e7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001e80:	9a05      	ldr	r2, [sp, #20]
1a001e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001e86:	9a03      	ldr	r2, [sp, #12]
1a001e88:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001e8c:	9a04      	ldr	r2, [sp, #16]
1a001e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001e92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001e96:	4a2e      	ldr	r2, [pc, #184]	; (1a001f50 <Chip_SetupCoreClock+0x148>)
1a001e98:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001e9a:	4b2d      	ldr	r3, [pc, #180]	; (1a001f50 <Chip_SetupCoreClock+0x148>)
1a001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001e9e:	f013 0f01 	tst.w	r3, #1
1a001ea2:	d0fa      	beq.n	1a001e9a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001ea4:	2300      	movs	r3, #0
1a001ea6:	2201      	movs	r2, #1
1a001ea8:	2109      	movs	r1, #9
1a001eaa:	2004      	movs	r0, #4
1a001eac:	f7ff ff08 	bl	1a001cc0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001eb0:	b1fe      	cbz	r6, 1a001ef2 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001eb2:	f242 7310 	movw	r3, #10000	; 0x2710
1a001eb6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001eba:	1e5a      	subs	r2, r3, #1
1a001ebc:	9209      	str	r2, [sp, #36]	; 0x24
1a001ebe:	2b00      	cmp	r3, #0
1a001ec0:	d1fa      	bne.n	1a001eb8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001ec2:	9b01      	ldr	r3, [sp, #4]
1a001ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001ec8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001eca:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001ece:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001ed2:	9a05      	ldr	r2, [sp, #20]
1a001ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001ed8:	9a03      	ldr	r2, [sp, #12]
1a001eda:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001ede:	9a04      	ldr	r2, [sp, #16]
1a001ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001ee8:	4a19      	ldr	r2, [pc, #100]	; (1a001f50 <Chip_SetupCoreClock+0x148>)
1a001eea:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001eec:	b36c      	cbz	r4, 1a001f4a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001eee:	2400      	movs	r4, #0
1a001ef0:	e029      	b.n	1a001f46 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a001ef2:	2d00      	cmp	r5, #0
1a001ef4:	d0fa      	beq.n	1a001eec <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001ef6:	f242 7310 	movw	r3, #10000	; 0x2710
1a001efa:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001efe:	1e5a      	subs	r2, r3, #1
1a001f00:	9209      	str	r2, [sp, #36]	; 0x24
1a001f02:	2b00      	cmp	r3, #0
1a001f04:	d1fa      	bne.n	1a001efc <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a001f06:	9b04      	ldr	r3, [sp, #16]
1a001f08:	1e5a      	subs	r2, r3, #1
1a001f0a:	9204      	str	r2, [sp, #16]
1a001f0c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001f10:	9b01      	ldr	r3, [sp, #4]
1a001f12:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001f16:	9905      	ldr	r1, [sp, #20]
1a001f18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001f1c:	9903      	ldr	r1, [sp, #12]
1a001f1e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001f22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001f2a:	4a09      	ldr	r2, [pc, #36]	; (1a001f50 <Chip_SetupCoreClock+0x148>)
1a001f2c:	6453      	str	r3, [r2, #68]	; 0x44
1a001f2e:	e7dd      	b.n	1a001eec <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001f30:	4809      	ldr	r0, [pc, #36]	; (1a001f58 <Chip_SetupCoreClock+0x150>)
1a001f32:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001f36:	78cb      	ldrb	r3, [r1, #3]
1a001f38:	788a      	ldrb	r2, [r1, #2]
1a001f3a:	7849      	ldrb	r1, [r1, #1]
1a001f3c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001f40:	f7ff febe 	bl	1a001cc0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001f44:	3401      	adds	r4, #1
1a001f46:	2c11      	cmp	r4, #17
1a001f48:	d9f2      	bls.n	1a001f30 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001f4a:	b00a      	add	sp, #40	; 0x28
1a001f4c:	bd70      	pop	{r4, r5, r6, pc}
1a001f4e:	bf00      	nop
1a001f50:	40050000 	.word	0x40050000
1a001f54:	068e7780 	.word	0x068e7780
1a001f58:	1a0041bc 	.word	0x1a0041bc

1a001f5c <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a001f5c:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a001f5e:	6843      	ldr	r3, [r0, #4]
1a001f60:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001f64:	2b30      	cmp	r3, #48	; 0x30
1a001f66:	d04a      	beq.n	1a001ffe <Chip_I2CM_XferHandler+0xa2>
1a001f68:	d90f      	bls.n	1a001f8a <Chip_I2CM_XferHandler+0x2e>
1a001f6a:	2b48      	cmp	r3, #72	; 0x48
1a001f6c:	d06a      	beq.n	1a002044 <Chip_I2CM_XferHandler+0xe8>
1a001f6e:	d83a      	bhi.n	1a001fe6 <Chip_I2CM_XferHandler+0x8a>
1a001f70:	2b38      	cmp	r3, #56	; 0x38
1a001f72:	d06b      	beq.n	1a00204c <Chip_I2CM_XferHandler+0xf0>
1a001f74:	2b40      	cmp	r3, #64	; 0x40
1a001f76:	d13e      	bne.n	1a001ff6 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001f78:	88ca      	ldrh	r2, [r1, #6]
1a001f7a:	2a01      	cmp	r2, #1
1a001f7c:	d95a      	bls.n	1a002034 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a001f7e:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a001f80:	b9b2      	cbnz	r2, 1a001fb0 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a001f82:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001f84:	f023 0310 	bic.w	r3, r3, #16
1a001f88:	e012      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001f8a:	2b10      	cmp	r3, #16
1a001f8c:	d007      	beq.n	1a001f9e <Chip_I2CM_XferHandler+0x42>
1a001f8e:	d81c      	bhi.n	1a001fca <Chip_I2CM_XferHandler+0x6e>
1a001f90:	b91b      	cbnz	r3, 1a001f9a <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a001f92:	2303      	movs	r3, #3
1a001f94:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001f96:	232c      	movs	r3, #44	; 0x2c
        break;
1a001f98:	e00a      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001f9a:	2b08      	cmp	r3, #8
1a001f9c:	d12b      	bne.n	1a001ff6 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001f9e:	780a      	ldrb	r2, [r1, #0]
1a001fa0:	888b      	ldrh	r3, [r1, #4]
1a001fa2:	fab3 f383 	clz	r3, r3
1a001fa6:	095b      	lsrs	r3, r3, #5
1a001fa8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001fac:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001fae:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001fb0:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001fb4:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a001fb6:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a001fba:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a001fbc:	8848      	ldrh	r0, [r1, #2]
1a001fbe:	38ff      	subs	r0, #255	; 0xff
1a001fc0:	bf18      	it	ne
1a001fc2:	2001      	movne	r0, #1
}
1a001fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001fc8:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001fca:	2b20      	cmp	r3, #32
1a001fcc:	d017      	beq.n	1a001ffe <Chip_I2CM_XferHandler+0xa2>
1a001fce:	2b28      	cmp	r3, #40	; 0x28
1a001fd0:	d001      	beq.n	1a001fd6 <Chip_I2CM_XferHandler+0x7a>
1a001fd2:	2b18      	cmp	r3, #24
1a001fd4:	d10f      	bne.n	1a001ff6 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a001fd6:	888b      	ldrh	r3, [r1, #4]
1a001fd8:	b9cb      	cbnz	r3, 1a00200e <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a001fda:	88cb      	ldrh	r3, [r1, #6]
1a001fdc:	2b00      	cmp	r3, #0
1a001fde:	d139      	bne.n	1a002054 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a001fe0:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a001fe2:	232c      	movs	r3, #44	; 0x2c
1a001fe4:	e7e4      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001fe6:	2b58      	cmp	r3, #88	; 0x58
1a001fe8:	d01b      	beq.n	1a002022 <Chip_I2CM_XferHandler+0xc6>
1a001fea:	2bf8      	cmp	r3, #248	; 0xf8
1a001fec:	d101      	bne.n	1a001ff2 <Chip_I2CM_XferHandler+0x96>
      return 0;
1a001fee:	2000      	movs	r0, #0
1a001ff0:	e7e8      	b.n	1a001fc4 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001ff2:	2b50      	cmp	r3, #80	; 0x50
1a001ff4:	d015      	beq.n	1a002022 <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a001ff6:	2301      	movs	r3, #1
1a001ff8:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001ffa:	232c      	movs	r3, #44	; 0x2c
        break;
1a001ffc:	e7d8      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a001ffe:	784b      	ldrb	r3, [r1, #1]
1a002000:	f013 0f01 	tst.w	r3, #1
1a002004:	d1e7      	bne.n	1a001fd6 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a002006:	2302      	movs	r3, #2
1a002008:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a00200a:	232c      	movs	r3, #44	; 0x2c
			break;
1a00200c:	e7d0      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a00200e:	688b      	ldr	r3, [r1, #8]
1a002010:	1c5a      	adds	r2, r3, #1
1a002012:	608a      	str	r2, [r1, #8]
1a002014:	781b      	ldrb	r3, [r3, #0]
1a002016:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a002018:	888b      	ldrh	r3, [r1, #4]
1a00201a:	3b01      	subs	r3, #1
1a00201c:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a00201e:	233c      	movs	r3, #60	; 0x3c
1a002020:	e7c6      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a002022:	6882      	ldr	r2, [r0, #8]
1a002024:	68cb      	ldr	r3, [r1, #12]
1a002026:	1c5c      	adds	r4, r3, #1
1a002028:	60cc      	str	r4, [r1, #12]
1a00202a:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a00202c:	88cb      	ldrh	r3, [r1, #6]
1a00202e:	3b01      	subs	r3, #1
1a002030:	80cb      	strh	r3, [r1, #6]
1a002032:	e7a1      	b.n	1a001f78 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a002034:	784b      	ldrb	r3, [r1, #1]
1a002036:	f013 0f02 	tst.w	r3, #2
1a00203a:	d101      	bne.n	1a002040 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a00203c:	233c      	movs	r3, #60	; 0x3c
1a00203e:	e79f      	b.n	1a001f80 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a002040:	2338      	movs	r3, #56	; 0x38
1a002042:	e79d      	b.n	1a001f80 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a002044:	2304      	movs	r3, #4
1a002046:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002048:	232c      	movs	r3, #44	; 0x2c
		break;
1a00204a:	e7b1      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a00204c:	2305      	movs	r3, #5
1a00204e:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a002050:	233c      	movs	r3, #60	; 0x3c
		break;
1a002052:	e7ad      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a002054:	231c      	movs	r3, #28
1a002056:	e7ab      	b.n	1a001fb0 <Chip_I2CM_XferHandler+0x54>

1a002058 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a002058:	23ff      	movs	r3, #255	; 0xff
1a00205a:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a00205c:	232c      	movs	r3, #44	; 0x2c
1a00205e:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a002060:	2360      	movs	r3, #96	; 0x60
1a002062:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a002064:	4770      	bx	lr

1a002066 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a002066:	b538      	push	{r3, r4, r5, lr}
1a002068:	4604      	mov	r4, r0
1a00206a:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a00206c:	f7ff fff4 	bl	1a002058 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a002070:	2000      	movs	r0, #0

	while (ret == 0) {
1a002072:	e007      	b.n	1a002084 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a002074:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a002076:	f013 0f08 	tst.w	r3, #8
1a00207a:	d0fb      	beq.n	1a002074 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a00207c:	4629      	mov	r1, r5
1a00207e:	4620      	mov	r0, r4
1a002080:	f7ff ff6c 	bl	1a001f5c <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a002084:	2800      	cmp	r0, #0
1a002086:	d0f5      	beq.n	1a002074 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a002088:	bd38      	pop	{r3, r4, r5, pc}

1a00208a <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00208a:	4770      	bx	lr

1a00208c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00208c:	4b03      	ldr	r3, [pc, #12]	; (1a00209c <Chip_SSP_GetClockIndex+0x10>)
1a00208e:	4298      	cmp	r0, r3
1a002090:	d001      	beq.n	1a002096 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002092:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002094:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002096:	20a5      	movs	r0, #165	; 0xa5
1a002098:	4770      	bx	lr
1a00209a:	bf00      	nop
1a00209c:	400c5000 	.word	0x400c5000

1a0020a0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0020a0:	4b04      	ldr	r3, [pc, #16]	; (1a0020b4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0020a2:	4298      	cmp	r0, r3
1a0020a4:	d002      	beq.n	1a0020ac <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0020a6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0020aa:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0020ac:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0020b0:	4770      	bx	lr
1a0020b2:	bf00      	nop
1a0020b4:	400c5000 	.word	0x400c5000

1a0020b8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0020b8:	6803      	ldr	r3, [r0, #0]
1a0020ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0020be:	0209      	lsls	r1, r1, #8
1a0020c0:	b289      	uxth	r1, r1
1a0020c2:	4319      	orrs	r1, r3
1a0020c4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0020c6:	6102      	str	r2, [r0, #16]
}
1a0020c8:	4770      	bx	lr

1a0020ca <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0020ca:	b570      	push	{r4, r5, r6, lr}
1a0020cc:	4606      	mov	r6, r0
1a0020ce:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0020d0:	f7ff ffe6 	bl	1a0020a0 <Chip_SSP_GetPeriphClockIndex>
1a0020d4:	f7ff fe72 	bl	1a001dbc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0020d8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0020da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0020de:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0020e0:	e000      	b.n	1a0020e4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0020e2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0020e4:	42ab      	cmp	r3, r5
1a0020e6:	d90b      	bls.n	1a002100 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0020e8:	1c4c      	adds	r4, r1, #1
1a0020ea:	fb02 f304 	mul.w	r3, r2, r4
1a0020ee:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0020f2:	429d      	cmp	r5, r3
1a0020f4:	d2f6      	bcs.n	1a0020e4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0020f6:	2cff      	cmp	r4, #255	; 0xff
1a0020f8:	d9f3      	bls.n	1a0020e2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0020fa:	3202      	adds	r2, #2
				cr0_div = 0;
1a0020fc:	2100      	movs	r1, #0
1a0020fe:	e7f1      	b.n	1a0020e4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002100:	4630      	mov	r0, r6
1a002102:	f7ff ffd9 	bl	1a0020b8 <Chip_SSP_SetClockRate>
}
1a002106:	bd70      	pop	{r4, r5, r6, pc}

1a002108 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002108:	b510      	push	{r4, lr}
1a00210a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00210c:	f7ff ffbe 	bl	1a00208c <Chip_SSP_GetClockIndex>
1a002110:	f7ff fe3a 	bl	1a001d88 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002114:	4620      	mov	r0, r4
1a002116:	f7ff ffc3 	bl	1a0020a0 <Chip_SSP_GetPeriphClockIndex>
1a00211a:	f7ff fe35 	bl	1a001d88 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00211e:	6863      	ldr	r3, [r4, #4]
1a002120:	f023 0304 	bic.w	r3, r3, #4
1a002124:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002126:	6823      	ldr	r3, [r4, #0]
1a002128:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00212c:	f043 0307 	orr.w	r3, r3, #7
1a002130:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002132:	4902      	ldr	r1, [pc, #8]	; (1a00213c <Chip_SSP_Init+0x34>)
1a002134:	4620      	mov	r0, r4
1a002136:	f7ff ffc8 	bl	1a0020ca <Chip_SSP_SetBitRate>
}
1a00213a:	bd10      	pop	{r4, pc}
1a00213c:	000186a0 	.word	0x000186a0

1a002140 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002140:	2901      	cmp	r1, #1
1a002142:	d000      	beq.n	1a002146 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002144:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002146:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00214a:	0082      	lsls	r2, r0, #2
1a00214c:	4b03      	ldr	r3, [pc, #12]	; (1a00215c <Chip_I2C_EventHandler+0x1c>)
1a00214e:	4413      	add	r3, r2
1a002150:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a002152:	7d13      	ldrb	r3, [r2, #20]
1a002154:	b2db      	uxtb	r3, r3
1a002156:	2b04      	cmp	r3, #4
1a002158:	d0fb      	beq.n	1a002152 <Chip_I2C_EventHandler+0x12>
1a00215a:	e7f3      	b.n	1a002144 <Chip_I2C_EventHandler+0x4>
1a00215c:	10000000 	.word	0x10000000

1a002160 <handleMasterXferState>:
{
1a002160:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a002162:	6843      	ldr	r3, [r0, #4]
1a002164:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a002168:	2b58      	cmp	r3, #88	; 0x58
1a00216a:	d87e      	bhi.n	1a00226a <handleMasterXferState+0x10a>
1a00216c:	e8df f003 	tbb	[pc, r3]
1a002170:	7d7d7d79 	.word	0x7d7d7d79
1a002174:	7d7d7d7d 	.word	0x7d7d7d7d
1a002178:	7d7d7d2f 	.word	0x7d7d7d2f
1a00217c:	7d7d7d7d 	.word	0x7d7d7d7d
1a002180:	7d7d7d2f 	.word	0x7d7d7d2f
1a002184:	7d7d7d7d 	.word	0x7d7d7d7d
1a002188:	7d7d7d39 	.word	0x7d7d7d39
1a00218c:	7d7d7d7d 	.word	0x7d7d7d7d
1a002190:	7d7d7d6d 	.word	0x7d7d7d6d
1a002194:	7d7d7d7d 	.word	0x7d7d7d7d
1a002198:	7d7d7d39 	.word	0x7d7d7d39
1a00219c:	7d7d7d7d 	.word	0x7d7d7d7d
1a0021a0:	7d7d7d71 	.word	0x7d7d7d71
1a0021a4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0021a8:	7d7d7d75 	.word	0x7d7d7d75
1a0021ac:	7d7d7d7d 	.word	0x7d7d7d7d
1a0021b0:	7d7d7d6b 	.word	0x7d7d7d6b
1a0021b4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0021b8:	7d7d7d6d 	.word	0x7d7d7d6d
1a0021bc:	7d7d7d7d 	.word	0x7d7d7d7d
1a0021c0:	7d7d7d2d 	.word	0x7d7d7d2d
1a0021c4:	7d7d7d7d 	.word	0x7d7d7d7d
1a0021c8:	4f          	.byte	0x4f
1a0021c9:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a0021ca:	233c      	movs	r3, #60	; 0x3c
1a0021cc:	e020      	b.n	1a002210 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0021ce:	780a      	ldrb	r2, [r1, #0]
1a0021d0:	688b      	ldr	r3, [r1, #8]
1a0021d2:	fab3 f383 	clz	r3, r3
1a0021d6:	095b      	lsrs	r3, r3, #5
1a0021d8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0021dc:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0021de:	233c      	movs	r3, #60	; 0x3c
		break;
1a0021e0:	e023      	b.n	1a00222a <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a0021e2:	688b      	ldr	r3, [r1, #8]
1a0021e4:	b94b      	cbnz	r3, 1a0021fa <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0021e6:	690b      	ldr	r3, [r1, #16]
1a0021e8:	b123      	cbz	r3, 1a0021f4 <handleMasterXferState+0x94>
1a0021ea:	f06f 0320 	mvn.w	r3, #32
1a0021ee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0021f2:	e01a      	b.n	1a00222a <handleMasterXferState+0xca>
1a0021f4:	f06f 0310 	mvn.w	r3, #16
1a0021f8:	e7f9      	b.n	1a0021ee <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a0021fa:	684b      	ldr	r3, [r1, #4]
1a0021fc:	1c5a      	adds	r2, r3, #1
1a0021fe:	604a      	str	r2, [r1, #4]
1a002200:	781b      	ldrb	r3, [r3, #0]
1a002202:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a002204:	688b      	ldr	r3, [r1, #8]
1a002206:	3b01      	subs	r3, #1
1a002208:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00220a:	233c      	movs	r3, #60	; 0x3c
1a00220c:	e00d      	b.n	1a00222a <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a00220e:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a002210:	6884      	ldr	r4, [r0, #8]
1a002212:	68ca      	ldr	r2, [r1, #12]
1a002214:	1c55      	adds	r5, r2, #1
1a002216:	60cd      	str	r5, [r1, #12]
1a002218:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00221a:	690a      	ldr	r2, [r1, #16]
1a00221c:	3a01      	subs	r2, #1
1a00221e:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a002220:	690a      	ldr	r2, [r1, #16]
1a002222:	2a01      	cmp	r2, #1
1a002224:	dd01      	ble.n	1a00222a <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a002226:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00222a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00222e:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a002230:	f023 0210 	bic.w	r2, r3, #16
1a002234:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a002236:	f013 0f10 	tst.w	r3, #16
1a00223a:	d018      	beq.n	1a00226e <handleMasterXferState+0x10e>
1a00223c:	7d0b      	ldrb	r3, [r1, #20]
1a00223e:	2b02      	cmp	r3, #2
1a002240:	d015      	beq.n	1a00226e <handleMasterXferState+0x10e>
	return 1;
1a002242:	2001      	movs	r0, #1
1a002244:	e017      	b.n	1a002276 <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a002246:	233c      	movs	r3, #60	; 0x3c
1a002248:	e7ea      	b.n	1a002220 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00224a:	2305      	movs	r3, #5
1a00224c:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00224e:	232c      	movs	r3, #44	; 0x2c
		break;
1a002250:	e7eb      	b.n	1a00222a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a002252:	2301      	movs	r3, #1
1a002254:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002256:	232c      	movs	r3, #44	; 0x2c
		break;
1a002258:	e7e7      	b.n	1a00222a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a00225a:	2302      	movs	r3, #2
1a00225c:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a00225e:	233c      	movs	r3, #60	; 0x3c
		break;
1a002260:	e7e3      	b.n	1a00222a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a002262:	2303      	movs	r3, #3
1a002264:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002266:	232c      	movs	r3, #44	; 0x2c
1a002268:	e7df      	b.n	1a00222a <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00226a:	233c      	movs	r3, #60	; 0x3c
1a00226c:	e7dd      	b.n	1a00222a <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a00226e:	7d0b      	ldrb	r3, [r1, #20]
1a002270:	2b04      	cmp	r3, #4
1a002272:	d002      	beq.n	1a00227a <handleMasterXferState+0x11a>
		return 0;
1a002274:	2000      	movs	r0, #0
}
1a002276:	bc30      	pop	{r4, r5}
1a002278:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a00227a:	2000      	movs	r0, #0
1a00227c:	7508      	strb	r0, [r1, #20]
1a00227e:	e7fa      	b.n	1a002276 <handleMasterXferState+0x116>

1a002280 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002280:	b570      	push	{r4, r5, r6, lr}
1a002282:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002284:	4e06      	ldr	r6, [pc, #24]	; (1a0022a0 <Chip_I2C_Init+0x20>)
1a002286:	00c4      	lsls	r4, r0, #3
1a002288:	1a22      	subs	r2, r4, r0
1a00228a:	0093      	lsls	r3, r2, #2
1a00228c:	4433      	add	r3, r6
1a00228e:	8898      	ldrh	r0, [r3, #4]
1a002290:	f7ff fd7a 	bl	1a001d88 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002294:	1b64      	subs	r4, r4, r5
1a002296:	00a3      	lsls	r3, r4, #2
1a002298:	58f3      	ldr	r3, [r6, r3]
1a00229a:	226c      	movs	r2, #108	; 0x6c
1a00229c:	619a      	str	r2, [r3, #24]
}
1a00229e:	bd70      	pop	{r4, r5, r6, pc}
1a0022a0:	10000000 	.word	0x10000000

1a0022a4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0022a8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0022aa:	4e0b      	ldr	r6, [pc, #44]	; (1a0022d8 <Chip_I2C_SetClockRate+0x34>)
1a0022ac:	00c5      	lsls	r5, r0, #3
1a0022ae:	1a2b      	subs	r3, r5, r0
1a0022b0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0022b4:	eb06 0308 	add.w	r3, r6, r8
1a0022b8:	8898      	ldrh	r0, [r3, #4]
1a0022ba:	f7ff fd7f 	bl	1a001dbc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0022be:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0022c2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0022c6:	0842      	lsrs	r2, r0, #1
1a0022c8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0022ca:	f856 3008 	ldr.w	r3, [r6, r8]
1a0022ce:	691a      	ldr	r2, [r3, #16]
1a0022d0:	1a80      	subs	r0, r0, r2
1a0022d2:	6158      	str	r0, [r3, #20]
}
1a0022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0022d8:	10000000 	.word	0x10000000

1a0022dc <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a0022dc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0022e0:	009a      	lsls	r2, r3, #2
1a0022e2:	4b09      	ldr	r3, [pc, #36]	; (1a002308 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0022e4:	4413      	add	r3, r2
1a0022e6:	691b      	ldr	r3, [r3, #16]
1a0022e8:	b153      	cbz	r3, 1a002300 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a0022ea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0022ee:	0082      	lsls	r2, r0, #2
1a0022f0:	4b05      	ldr	r3, [pc, #20]	; (1a002308 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0022f2:	4413      	add	r3, r2
1a0022f4:	6898      	ldr	r0, [r3, #8]
}
1a0022f6:	4288      	cmp	r0, r1
1a0022f8:	bf14      	ite	ne
1a0022fa:	2000      	movne	r0, #0
1a0022fc:	2001      	moveq	r0, #1
1a0022fe:	4770      	bx	lr
		iic->mEvent = event;
1a002300:	4b01      	ldr	r3, [pc, #4]	; (1a002308 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a002302:	4413      	add	r3, r2
1a002304:	6099      	str	r1, [r3, #8]
1a002306:	e7f0      	b.n	1a0022ea <Chip_I2C_SetMasterEventHandler+0xe>
1a002308:	10000000 	.word	0x10000000

1a00230c <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a00230c:	b510      	push	{r4, lr}
1a00230e:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a002310:	4809      	ldr	r0, [pc, #36]	; (1a002338 <Chip_I2C_MasterStateHandler+0x2c>)
1a002312:	00e3      	lsls	r3, r4, #3
1a002314:	1b1b      	subs	r3, r3, r4
1a002316:	009a      	lsls	r2, r3, #2
1a002318:	1883      	adds	r3, r0, r2
1a00231a:	6919      	ldr	r1, [r3, #16]
1a00231c:	5880      	ldr	r0, [r0, r2]
1a00231e:	f7ff ff1f 	bl	1a002160 <handleMasterXferState>
1a002322:	b940      	cbnz	r0, 1a002336 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a002324:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a002328:	009a      	lsls	r2, r3, #2
1a00232a:	4b03      	ldr	r3, [pc, #12]	; (1a002338 <Chip_I2C_MasterStateHandler+0x2c>)
1a00232c:	4413      	add	r3, r2
1a00232e:	689b      	ldr	r3, [r3, #8]
1a002330:	2102      	movs	r1, #2
1a002332:	4620      	mov	r0, r4
1a002334:	4798      	blx	r3
	}
}
1a002336:	bd10      	pop	{r4, pc}
1a002338:	10000000 	.word	0x10000000

1a00233c <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a00233c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002340:	0083      	lsls	r3, r0, #2
1a002342:	4a03      	ldr	r2, [pc, #12]	; (1a002350 <Chip_I2C_IsStateChanged+0x14>)
1a002344:	58d3      	ldr	r3, [r2, r3]
1a002346:	6818      	ldr	r0, [r3, #0]
}
1a002348:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a00234c:	4770      	bx	lr
1a00234e:	bf00      	nop
1a002350:	10000000 	.word	0x10000000

1a002354 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a002354:	2901      	cmp	r1, #1
1a002356:	d000      	beq.n	1a00235a <Chip_I2C_EventHandlerPolling+0x6>
1a002358:	4770      	bx	lr
{
1a00235a:	b538      	push	{r3, r4, r5, lr}
1a00235c:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a00235e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002362:	009a      	lsls	r2, r3, #2
1a002364:	4b08      	ldr	r3, [pc, #32]	; (1a002388 <Chip_I2C_EventHandlerPolling+0x34>)
1a002366:	4413      	add	r3, r2
1a002368:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a00236a:	7d2b      	ldrb	r3, [r5, #20]
1a00236c:	b2db      	uxtb	r3, r3
1a00236e:	2b04      	cmp	r3, #4
1a002370:	d108      	bne.n	1a002384 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a002372:	4620      	mov	r0, r4
1a002374:	f7ff ffe2 	bl	1a00233c <Chip_I2C_IsStateChanged>
1a002378:	2800      	cmp	r0, #0
1a00237a:	d0f6      	beq.n	1a00236a <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a00237c:	4620      	mov	r0, r4
1a00237e:	f7ff ffc5 	bl	1a00230c <Chip_I2C_MasterStateHandler>
1a002382:	e7f2      	b.n	1a00236a <Chip_I2C_EventHandlerPolling+0x16>
}
1a002384:	bd38      	pop	{r3, r4, r5, pc}
1a002386:	bf00      	nop
1a002388:	10000000 	.word	0x10000000

1a00238c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00238c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00238e:	4a0b      	ldr	r2, [pc, #44]	; (1a0023bc <SystemInit+0x30>)
1a002390:	4b0b      	ldr	r3, [pc, #44]	; (1a0023c0 <SystemInit+0x34>)
1a002392:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002394:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002398:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00239a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00239e:	2b20      	cmp	r3, #32
1a0023a0:	d004      	beq.n	1a0023ac <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0023a2:	f7ff f921 	bl	1a0015e8 <Board_SystemInit>
   Board_Init();
1a0023a6:	f7ff f8b3 	bl	1a001510 <Board_Init>
}
1a0023aa:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0023ac:	4a04      	ldr	r2, [pc, #16]	; (1a0023c0 <SystemInit+0x34>)
1a0023ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0023b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0023b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0023ba:	e7f2      	b.n	1a0023a2 <SystemInit+0x16>
1a0023bc:	1a000000 	.word	0x1a000000
1a0023c0:	e000ed00 	.word	0xe000ed00

1a0023c4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0023c4:	4b04      	ldr	r3, [pc, #16]	; (1a0023d8 <cyclesCounterInit+0x14>)
1a0023c6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0023c8:	4a04      	ldr	r2, [pc, #16]	; (1a0023dc <cyclesCounterInit+0x18>)
1a0023ca:	6813      	ldr	r3, [r2, #0]
1a0023cc:	f043 0301 	orr.w	r3, r3, #1
1a0023d0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0023d2:	2001      	movs	r0, #1
1a0023d4:	4770      	bx	lr
1a0023d6:	bf00      	nop
1a0023d8:	10000038 	.word	0x10000038
1a0023dc:	e0001000 	.word	0xe0001000

1a0023e0 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a0023e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0023e4:	0083      	lsls	r3, r0, #2
1a0023e6:	4a03      	ldr	r2, [pc, #12]	; (1a0023f4 <uartRxReady+0x14>)
1a0023e8:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0023ea:	6958      	ldr	r0, [r3, #20]
}
1a0023ec:	f000 0001 	and.w	r0, r0, #1
1a0023f0:	4770      	bx	lr
1a0023f2:	bf00      	nop
1a0023f4:	1a004204 	.word	0x1a004204

1a0023f8 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0023f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0023fc:	0083      	lsls	r3, r0, #2
1a0023fe:	4a03      	ldr	r2, [pc, #12]	; (1a00240c <uartTxReady+0x14>)
1a002400:	58d3      	ldr	r3, [r2, r3]
1a002402:	6958      	ldr	r0, [r3, #20]
}
1a002404:	f000 0020 	and.w	r0, r0, #32
1a002408:	4770      	bx	lr
1a00240a:	bf00      	nop
1a00240c:	1a004204 	.word	0x1a004204

1a002410 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a002410:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002414:	0083      	lsls	r3, r0, #2
1a002416:	4a02      	ldr	r2, [pc, #8]	; (1a002420 <uartRxRead+0x10>)
1a002418:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00241a:	6818      	ldr	r0, [r3, #0]
}
1a00241c:	b2c0      	uxtb	r0, r0
1a00241e:	4770      	bx	lr
1a002420:	1a004204 	.word	0x1a004204

1a002424 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a002424:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002428:	0083      	lsls	r3, r0, #2
1a00242a:	4a02      	ldr	r2, [pc, #8]	; (1a002434 <uartTxWrite+0x10>)
1a00242c:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00242e:	6019      	str	r1, [r3, #0]
}
1a002430:	4770      	bx	lr
1a002432:	bf00      	nop
1a002434:	1a004204 	.word	0x1a004204

1a002438 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00243c:	4680      	mov	r8, r0
1a00243e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002440:	4c19      	ldr	r4, [pc, #100]	; (1a0024a8 <uartInit+0x70>)
1a002442:	0045      	lsls	r5, r0, #1
1a002444:	182a      	adds	r2, r5, r0
1a002446:	0093      	lsls	r3, r2, #2
1a002448:	18e6      	adds	r6, r4, r3
1a00244a:	58e7      	ldr	r7, [r4, r3]
1a00244c:	4638      	mov	r0, r7
1a00244e:	f7ff f8e7 	bl	1a001620 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002452:	4649      	mov	r1, r9
1a002454:	4638      	mov	r0, r7
1a002456:	f7ff f90d 	bl	1a001674 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00245a:	2307      	movs	r3, #7
1a00245c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00245e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a002460:	2301      	movs	r3, #1
1a002462:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002464:	7930      	ldrb	r0, [r6, #4]
1a002466:	7973      	ldrb	r3, [r6, #5]
1a002468:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00246a:	f042 0218 	orr.w	r2, r2, #24
1a00246e:	490f      	ldr	r1, [pc, #60]	; (1a0024ac <uartInit+0x74>)
1a002470:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002478:	79f0      	ldrb	r0, [r6, #7]
1a00247a:	7a33      	ldrb	r3, [r6, #8]
1a00247c:	7a72      	ldrb	r2, [r6, #9]
1a00247e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002482:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00248a:	f1b8 0f01 	cmp.w	r8, #1
1a00248e:	d001      	beq.n	1a002494 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002494:	4a06      	ldr	r2, [pc, #24]	; (1a0024b0 <uartInit+0x78>)
1a002496:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002498:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00249c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00249e:	221a      	movs	r2, #26
1a0024a0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0024a4:	e7f4      	b.n	1a002490 <uartInit+0x58>
1a0024a6:	bf00      	nop
1a0024a8:	1a004204 	.word	0x1a004204
1a0024ac:	40086000 	.word	0x40086000
1a0024b0:	40081000 	.word	0x40081000

1a0024b4 <uartReadByte>:

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a0024b4:	b538      	push	{r3, r4, r5, lr}
1a0024b6:	4605      	mov	r5, r0
1a0024b8:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a0024ba:	f7ff ff91 	bl	1a0023e0 <uartRxReady>
1a0024be:	4603      	mov	r3, r0
1a0024c0:	b908      	cbnz	r0, 1a0024c6 <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a0024c2:	4618      	mov	r0, r3
1a0024c4:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a0024c6:	4628      	mov	r0, r5
1a0024c8:	f7ff ffa2 	bl	1a002410 <uartRxRead>
1a0024cc:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a0024ce:	2301      	movs	r3, #1
1a0024d0:	e7f7      	b.n	1a0024c2 <uartReadByte+0xe>

1a0024d2 <waitForReceiveStringOrTimeout>:
{
1a0024d2:	b510      	push	{r4, lr}
1a0024d4:	b082      	sub	sp, #8
1a0024d6:	460c      	mov	r4, r1
   switch( instance->state ) {
1a0024d8:	780b      	ldrb	r3, [r1, #0]
1a0024da:	2b04      	cmp	r3, #4
1a0024dc:	d836      	bhi.n	1a00254c <waitForReceiveStringOrTimeout+0x7a>
1a0024de:	e8df f003 	tbb	[pc, r3]
1a0024e2:	1003      	.short	0x1003
1a0024e4:	352f      	.short	0x352f
1a0024e6:	32          	.byte	0x32
1a0024e7:	00          	.byte	0x00
      delayInit( &(instance->delay), instance->timeout );
1a0024e8:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0024ec:	f101 0018 	add.w	r0, r1, #24
1a0024f0:	f000 fb08 	bl	1a002b04 <delayInit>
      instance->stringIndex = 0;
1a0024f4:	2300      	movs	r3, #0
1a0024f6:	8163      	strh	r3, [r4, #10]
      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a0024f8:	2301      	movs	r3, #1
1a0024fa:	7023      	strb	r3, [r4, #0]
}
1a0024fc:	7820      	ldrb	r0, [r4, #0]
1a0024fe:	b002      	add	sp, #8
1a002500:	bd10      	pop	{r4, pc}
      if( uartReadByte( uart, &receiveByte ) ) {
1a002502:	f10d 0107 	add.w	r1, sp, #7
1a002506:	f7ff ffd5 	bl	1a0024b4 <uartReadByte>
1a00250a:	b130      	cbz	r0, 1a00251a <waitForReceiveStringOrTimeout+0x48>
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a00250c:	6862      	ldr	r2, [r4, #4]
1a00250e:	8963      	ldrh	r3, [r4, #10]
1a002510:	5cd1      	ldrb	r1, [r2, r3]
1a002512:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a002516:	4291      	cmp	r1, r2
1a002518:	d008      	beq.n	1a00252c <waitForReceiveStringOrTimeout+0x5a>
      if( delayRead( &(instance->delay) ) ) {
1a00251a:	f104 0018 	add.w	r0, r4, #24
1a00251e:	f000 fb01 	bl	1a002b24 <delayRead>
1a002522:	2800      	cmp	r0, #0
1a002524:	d0ea      	beq.n	1a0024fc <waitForReceiveStringOrTimeout+0x2a>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a002526:	2304      	movs	r3, #4
1a002528:	7023      	strb	r3, [r4, #0]
1a00252a:	e7e7      	b.n	1a0024fc <waitForReceiveStringOrTimeout+0x2a>
            (instance->stringIndex)++;
1a00252c:	3301      	adds	r3, #1
1a00252e:	b29b      	uxth	r3, r3
1a002530:	8163      	strh	r3, [r4, #10]
            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a002532:	8922      	ldrh	r2, [r4, #8]
1a002534:	3a01      	subs	r2, #1
1a002536:	4293      	cmp	r3, r2
1a002538:	d1ef      	bne.n	1a00251a <waitForReceiveStringOrTimeout+0x48>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a00253a:	2302      	movs	r3, #2
1a00253c:	7023      	strb	r3, [r4, #0]
1a00253e:	e7ec      	b.n	1a00251a <waitForReceiveStringOrTimeout+0x48>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a002540:	2300      	movs	r3, #0
1a002542:	700b      	strb	r3, [r1, #0]
      break;
1a002544:	e7da      	b.n	1a0024fc <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a002546:	2300      	movs	r3, #0
1a002548:	700b      	strb	r3, [r1, #0]
      break;
1a00254a:	e7d7      	b.n	1a0024fc <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a00254c:	2300      	movs	r3, #0
1a00254e:	700b      	strb	r3, [r1, #0]
      break;
1a002550:	e7d4      	b.n	1a0024fc <waitForReceiveStringOrTimeout+0x2a>

1a002552 <waitForReceiveStringOrTimeoutBlocking>:
{
1a002552:	b510      	push	{r4, lr}
1a002554:	b08c      	sub	sp, #48	; 0x30
1a002556:	4604      	mov	r4, r0
   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a002558:	2000      	movs	r0, #0
1a00255a:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a00255e:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a002560:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a002564:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a002568:	e9cd 2304 	strd	r2, r3, [sp, #16]
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a00256c:	e003      	b.n	1a002576 <waitForReceiveStringOrTimeoutBlocking+0x24>
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a00256e:	4669      	mov	r1, sp
1a002570:	4620      	mov	r0, r4
1a002572:	f7ff ffae 	bl	1a0024d2 <waitForReceiveStringOrTimeout>
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a002576:	2802      	cmp	r0, #2
1a002578:	d001      	beq.n	1a00257e <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a00257a:	2804      	cmp	r0, #4
1a00257c:	d1f7      	bne.n	1a00256e <waitForReceiveStringOrTimeoutBlocking+0x1c>
   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a00257e:	2804      	cmp	r0, #4
1a002580:	d002      	beq.n	1a002588 <waitForReceiveStringOrTimeoutBlocking+0x36>
   bool_t retVal = TRUE; // True if OK
1a002582:	2001      	movs	r0, #1
}
1a002584:	b00c      	add	sp, #48	; 0x30
1a002586:	bd10      	pop	{r4, pc}
      retVal = FALSE;
1a002588:	2000      	movs	r0, #0
1a00258a:	e7fb      	b.n	1a002584 <waitForReceiveStringOrTimeoutBlocking+0x32>

1a00258c <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a00258c:	b538      	push	{r3, r4, r5, lr}
1a00258e:	4604      	mov	r4, r0
1a002590:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002592:	4620      	mov	r0, r4
1a002594:	f7ff ff30 	bl	1a0023f8 <uartTxReady>
1a002598:	2800      	cmp	r0, #0
1a00259a:	d0fa      	beq.n	1a002592 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00259c:	4629      	mov	r1, r5
1a00259e:	4620      	mov	r0, r4
1a0025a0:	f7ff ff40 	bl	1a002424 <uartTxWrite>
}
1a0025a4:	bd38      	pop	{r3, r4, r5, pc}

1a0025a6 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0025a6:	b538      	push	{r3, r4, r5, lr}
1a0025a8:	4605      	mov	r5, r0
1a0025aa:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0025ac:	e003      	b.n	1a0025b6 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0025ae:	4628      	mov	r0, r5
1a0025b0:	f7ff ffec 	bl	1a00258c <uartWriteByte>
      str++;
1a0025b4:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a0025b6:	7821      	ldrb	r1, [r4, #0]
1a0025b8:	2900      	cmp	r1, #0
1a0025ba:	d1f8      	bne.n	1a0025ae <uartWriteString+0x8>
   }
}
1a0025bc:	bd38      	pop	{r3, r4, r5, pc}
1a0025be:	Address 0x000000001a0025be is out of bounds.


1a0025c0 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0025c0:	4b01      	ldr	r3, [pc, #4]	; (1a0025c8 <tickRead+0x8>)
1a0025c2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0025c6:	4770      	bx	lr
1a0025c8:	100004d0 	.word	0x100004d0

1a0025cc <tickCallbackSet>:

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
   if( tickCallback != NULL ) {
1a0025cc:	b130      	cbz	r0, 1a0025dc <tickCallbackSet+0x10>
      tickHookFunction = tickCallback;
1a0025ce:	4a05      	ldr	r2, [pc, #20]	; (1a0025e4 <tickCallbackSet+0x18>)
1a0025d0:	6010      	str	r0, [r2, #0]
   bool_t retVal = TRUE;
1a0025d2:	2001      	movs	r0, #1
   } else {
      retVal = FALSE;
   }
   if( tickCallbackParams != NULL ) {
1a0025d4:	b121      	cbz	r1, 1a0025e0 <tickCallbackSet+0x14>
      callBackFuncParams = tickCallbackParams;
1a0025d6:	4b04      	ldr	r3, [pc, #16]	; (1a0025e8 <tickCallbackSet+0x1c>)
1a0025d8:	6019      	str	r1, [r3, #0]
1a0025da:	4770      	bx	lr
      retVal = FALSE;
1a0025dc:	2000      	movs	r0, #0
1a0025de:	e7f9      	b.n	1a0025d4 <tickCallbackSet+0x8>
   } else {
      retVal &= FALSE;
1a0025e0:	2000      	movs	r0, #0
   }
   return retVal;
}
1a0025e2:	4770      	bx	lr
1a0025e4:	100004d8 	.word	0x100004d8
1a0025e8:	100004cc 	.word	0x100004cc

1a0025ec <tickPowerSet>:

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0025ec:	b918      	cbnz	r0, 1a0025f6 <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0025ee:	4b04      	ldr	r3, [pc, #16]	; (1a002600 <tickPowerSet+0x14>)
1a0025f0:	2200      	movs	r2, #0
1a0025f2:	601a      	str	r2, [r3, #0]
   }
}
1a0025f4:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0025f6:	4b02      	ldr	r3, [pc, #8]	; (1a002600 <tickPowerSet+0x14>)
1a0025f8:	2207      	movs	r2, #7
1a0025fa:	601a      	str	r2, [r3, #0]
1a0025fc:	4770      	bx	lr
1a0025fe:	bf00      	nop
1a002600:	e000e010 	.word	0xe000e010

1a002604 <tickInit>:
{
1a002604:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a002606:	ea50 0301 	orrs.w	r3, r0, r1
1a00260a:	d02a      	beq.n	1a002662 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00260c:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a002610:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a002614:	2b00      	cmp	r3, #0
1a002616:	bf08      	it	eq
1a002618:	2a32      	cmpeq	r2, #50	; 0x32
1a00261a:	d227      	bcs.n	1a00266c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a00261c:	4b14      	ldr	r3, [pc, #80]	; (1a002670 <tickInit+0x6c>)
1a00261e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a002622:	4b14      	ldr	r3, [pc, #80]	; (1a002674 <tickInit+0x70>)
1a002624:	681b      	ldr	r3, [r3, #0]
1a002626:	fba3 4500 	umull	r4, r5, r3, r0
1a00262a:	fb03 5501 	mla	r5, r3, r1, r5
1a00262e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a002632:	2300      	movs	r3, #0
1a002634:	4620      	mov	r0, r4
1a002636:	4629      	mov	r1, r5
1a002638:	f001 fa9c 	bl	1a003b74 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a00263c:	3801      	subs	r0, #1
1a00263e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a002642:	d209      	bcs.n	1a002658 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a002644:	4b0c      	ldr	r3, [pc, #48]	; (1a002678 <tickInit+0x74>)
1a002646:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a002648:	4a0c      	ldr	r2, [pc, #48]	; (1a00267c <tickInit+0x78>)
1a00264a:	21e0      	movs	r1, #224	; 0xe0
1a00264c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a002650:	2200      	movs	r2, #0
1a002652:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a002654:	2207      	movs	r2, #7
1a002656:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a002658:	2001      	movs	r0, #1
1a00265a:	f7ff ffc7 	bl	1a0025ec <tickPowerSet>
      bool_t ret_val = 1;
1a00265e:	2001      	movs	r0, #1
}
1a002660:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a002662:	2000      	movs	r0, #0
1a002664:	f7ff ffc2 	bl	1a0025ec <tickPowerSet>
         ret_val = 0;
1a002668:	2000      	movs	r0, #0
1a00266a:	e7f9      	b.n	1a002660 <tickInit+0x5c>
            ret_val = 0;
1a00266c:	2000      	movs	r0, #0
1a00266e:	e7f7      	b.n	1a002660 <tickInit+0x5c>
1a002670:	10000520 	.word	0x10000520
1a002674:	10000518 	.word	0x10000518
1a002678:	e000e010 	.word	0xe000e010
1a00267c:	e000ed00 	.word	0xe000ed00

1a002680 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002680:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a002684:	4908      	ldr	r1, [pc, #32]	; (1a0026a8 <SysTick_Handler+0x28>)
1a002686:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00268a:	f112 0b01 	adds.w	fp, r2, #1
1a00268e:	f143 0c00 	adc.w	ip, r3, #0
1a002692:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002696:	4b05      	ldr	r3, [pc, #20]	; (1a0026ac <SysTick_Handler+0x2c>)
1a002698:	681b      	ldr	r3, [r3, #0]
1a00269a:	b113      	cbz	r3, 1a0026a2 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00269c:	4a04      	ldr	r2, [pc, #16]	; (1a0026b0 <SysTick_Handler+0x30>)
1a00269e:	6810      	ldr	r0, [r2, #0]
1a0026a0:	4798      	blx	r3
   }
}
1a0026a2:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a0026a6:	bf00      	nop
1a0026a8:	100004d0 	.word	0x100004d0
1a0026ac:	100004d8 	.word	0x100004d8
1a0026b0:	100004cc 	.word	0x100004cc

1a0026b4 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0026b4:	b538      	push	{r3, r4, r5, lr}
1a0026b6:	4604      	mov	r4, r0
1a0026b8:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0026ba:	4b08      	ldr	r3, [pc, #32]	; (1a0026dc <i2cHardwareInit+0x28>)
1a0026bc:	f640 0208 	movw	r2, #2056	; 0x808
1a0026c0:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a0026c4:	f7ff fddc 	bl	1a002280 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0026c8:	4629      	mov	r1, r5
1a0026ca:	4620      	mov	r0, r4
1a0026cc:	f7ff fdea 	bl	1a0022a4 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0026d0:	4903      	ldr	r1, [pc, #12]	; (1a0026e0 <i2cHardwareInit+0x2c>)
1a0026d2:	4620      	mov	r0, r4
1a0026d4:	f7ff fe02 	bl	1a0022dc <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a0026d8:	2001      	movs	r0, #1
1a0026da:	bd38      	pop	{r3, r4, r5, pc}
1a0026dc:	40086000 	.word	0x40086000
1a0026e0:	1a002355 	.word	0x1a002355

1a0026e4 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0026e4:	b108      	cbz	r0, 1a0026ea <i2cHardwareWrite+0x6>
      return FALSE;
1a0026e6:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0026e8:	4770      	bx	lr
{
1a0026ea:	b500      	push	{lr}
1a0026ec:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0026ee:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0026f2:	2100      	movs	r1, #0
1a0026f4:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0026f8:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0026fc:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0026fe:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a002702:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a002704:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a002708:	4669      	mov	r1, sp
1a00270a:	4804      	ldr	r0, [pc, #16]	; (1a00271c <i2cHardwareWrite+0x38>)
1a00270c:	f7ff fcab 	bl	1a002066 <Chip_I2CM_XferBlocking>
1a002710:	b100      	cbz	r0, 1a002714 <i2cHardwareWrite+0x30>
   return TRUE;
1a002712:	2001      	movs	r0, #1
}
1a002714:	b005      	add	sp, #20
1a002716:	f85d fb04 	ldr.w	pc, [sp], #4
1a00271a:	bf00      	nop
1a00271c:	400a1000 	.word	0x400a1000

1a002720 <i2cInit>:

bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;
   if( i2cNumber != I2C0 ) {
1a002720:	b108      	cbz	r0, 1a002726 <i2cInit+0x6>
      return FALSE;
1a002722:	2000      	movs	r0, #0
   retVal = i2cSoftwareInit( i2cNumber, clockRateHz );
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif
   return retVal;
}
1a002724:	4770      	bx	lr
{
1a002726:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a002728:	f7ff ffc4 	bl	1a0026b4 <i2cHardwareInit>
}
1a00272c:	bd08      	pop	{r3, pc}

1a00272e <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a00272e:	b108      	cbz	r0, 1a002734 <i2cWrite+0x6>
      return FALSE;
1a002730:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a002732:	4770      	bx	lr
{
1a002734:	b510      	push	{r4, lr}
1a002736:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a002738:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a00273c:	9400      	str	r4, [sp, #0]
1a00273e:	f7ff ffd1 	bl	1a0026e4 <i2cHardwareWrite>
}
1a002742:	b002      	add	sp, #8
1a002744:	bd10      	pop	{r4, pc}
1a002746:	Address 0x000000001a002746 is out of bounds.


1a002748 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002748:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00274a:	4d0b      	ldr	r5, [pc, #44]	; (1a002778 <gpioObtainPinInit+0x30>)
1a00274c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002750:	182c      	adds	r4, r5, r0
1a002752:	5628      	ldrsb	r0, [r5, r0]
1a002754:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002756:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00275a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00275c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a002760:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002762:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a002766:	9b02      	ldr	r3, [sp, #8]
1a002768:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00276a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00276e:	9b03      	ldr	r3, [sp, #12]
1a002770:	701a      	strb	r2, [r3, #0]
}
1a002772:	bc30      	pop	{r4, r5}
1a002774:	4770      	bx	lr
1a002776:	bf00      	nop
1a002778:	1a00424c 	.word	0x1a00424c

1a00277c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00277c:	b570      	push	{r4, r5, r6, lr}
1a00277e:	b084      	sub	sp, #16
1a002780:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002782:	2300      	movs	r3, #0
1a002784:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002788:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00278c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002790:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002794:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002798:	f10d 030b 	add.w	r3, sp, #11
1a00279c:	9301      	str	r3, [sp, #4]
1a00279e:	ab03      	add	r3, sp, #12
1a0027a0:	9300      	str	r3, [sp, #0]
1a0027a2:	f10d 030d 	add.w	r3, sp, #13
1a0027a6:	f10d 020e 	add.w	r2, sp, #14
1a0027aa:	f10d 010f 	add.w	r1, sp, #15
1a0027ae:	f7ff ffcb 	bl	1a002748 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0027b2:	2c05      	cmp	r4, #5
1a0027b4:	f200 80a5 	bhi.w	1a002902 <gpioInit+0x186>
1a0027b8:	e8df f004 	tbb	[pc, r4]
1a0027bc:	45278109 	.word	0x45278109
1a0027c0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0027c2:	4851      	ldr	r0, [pc, #324]	; (1a002908 <gpioInit+0x18c>)
1a0027c4:	f7ff fc61 	bl	1a00208a <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0027c8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0027ca:	b004      	add	sp, #16
1a0027cc:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0027ce:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0027d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0027d6:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0027da:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0027de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0027e2:	494a      	ldr	r1, [pc, #296]	; (1a00290c <gpioInit+0x190>)
1a0027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0027e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0027ec:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0027f0:	2001      	movs	r0, #1
1a0027f2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0027f6:	4c44      	ldr	r4, [pc, #272]	; (1a002908 <gpioInit+0x18c>)
1a0027f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0027fc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002800:	ea22 0201 	bic.w	r2, r2, r1
1a002804:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002808:	e7df      	b.n	1a0027ca <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00280a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00280e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002812:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002816:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00281a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00281e:	493b      	ldr	r1, [pc, #236]	; (1a00290c <gpioInit+0x190>)
1a002820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002824:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002828:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00282c:	2001      	movs	r0, #1
1a00282e:	fa00 f102 	lsl.w	r1, r0, r2
1a002832:	4c35      	ldr	r4, [pc, #212]	; (1a002908 <gpioInit+0x18c>)
1a002834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002838:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00283c:	ea22 0201 	bic.w	r2, r2, r1
1a002840:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002844:	e7c1      	b.n	1a0027ca <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002846:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00284a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00284e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002852:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002856:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00285a:	492c      	ldr	r1, [pc, #176]	; (1a00290c <gpioInit+0x190>)
1a00285c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002860:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002864:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002868:	2001      	movs	r0, #1
1a00286a:	fa00 f102 	lsl.w	r1, r0, r2
1a00286e:	4c26      	ldr	r4, [pc, #152]	; (1a002908 <gpioInit+0x18c>)
1a002870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002874:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002878:	ea22 0201 	bic.w	r2, r2, r1
1a00287c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002880:	e7a3      	b.n	1a0027ca <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002882:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002886:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00288a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00288e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002892:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002896:	491d      	ldr	r1, [pc, #116]	; (1a00290c <gpioInit+0x190>)
1a002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00289c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0028a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0028a4:	2001      	movs	r0, #1
1a0028a6:	fa00 f102 	lsl.w	r1, r0, r2
1a0028aa:	4c17      	ldr	r4, [pc, #92]	; (1a002908 <gpioInit+0x18c>)
1a0028ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0028b0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0028b4:	ea22 0201 	bic.w	r2, r2, r1
1a0028b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0028bc:	e785      	b.n	1a0027ca <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0028be:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0028c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0028c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0028ca:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0028ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0028d2:	490e      	ldr	r1, [pc, #56]	; (1a00290c <gpioInit+0x190>)
1a0028d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0028d8:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0028dc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0028e0:	2001      	movs	r0, #1
1a0028e2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0028e6:	4b08      	ldr	r3, [pc, #32]	; (1a002908 <gpioInit+0x18c>)
1a0028e8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0028ec:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0028f0:	4331      	orrs	r1, r6
1a0028f2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0028f6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0028f8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0028fc:	2100      	movs	r1, #0
1a0028fe:	5499      	strb	r1, [r3, r2]
1a002900:	e763      	b.n	1a0027ca <gpioInit+0x4e>
      ret_val = 0;
1a002902:	2000      	movs	r0, #0
1a002904:	e761      	b.n	1a0027ca <gpioInit+0x4e>
1a002906:	bf00      	nop
1a002908:	400f4000 	.word	0x400f4000
1a00290c:	40086000 	.word	0x40086000

1a002910 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002910:	b510      	push	{r4, lr}
1a002912:	b084      	sub	sp, #16
1a002914:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002916:	2300      	movs	r3, #0
1a002918:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00291c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002920:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002924:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002928:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00292c:	f10d 030b 	add.w	r3, sp, #11
1a002930:	9301      	str	r3, [sp, #4]
1a002932:	ab03      	add	r3, sp, #12
1a002934:	9300      	str	r3, [sp, #0]
1a002936:	f10d 030d 	add.w	r3, sp, #13
1a00293a:	f10d 020e 	add.w	r2, sp, #14
1a00293e:	f10d 010f 	add.w	r1, sp, #15
1a002942:	f7ff ff01 	bl	1a002748 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002946:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00294a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00294e:	3400      	adds	r4, #0
1a002950:	bf18      	it	ne
1a002952:	2401      	movne	r4, #1
1a002954:	015b      	lsls	r3, r3, #5
1a002956:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00295a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00295e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002960:	2001      	movs	r0, #1
1a002962:	b004      	add	sp, #16
1a002964:	bd10      	pop	{r4, pc}

1a002966 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002966:	b500      	push	{lr}
1a002968:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00296a:	2300      	movs	r3, #0
1a00296c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002970:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002974:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002978:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00297c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002980:	f10d 030b 	add.w	r3, sp, #11
1a002984:	9301      	str	r3, [sp, #4]
1a002986:	ab03      	add	r3, sp, #12
1a002988:	9300      	str	r3, [sp, #0]
1a00298a:	f10d 030d 	add.w	r3, sp, #13
1a00298e:	f10d 020e 	add.w	r2, sp, #14
1a002992:	f10d 010f 	add.w	r1, sp, #15
1a002996:	f7ff fed7 	bl	1a002748 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00299a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00299e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0029a2:	015b      	lsls	r3, r3, #5
1a0029a4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0029a8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0029ac:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0029ae:	3000      	adds	r0, #0
1a0029b0:	bf18      	it	ne
1a0029b2:	2001      	movne	r0, #1
1a0029b4:	b005      	add	sp, #20
1a0029b6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0029ba:	Address 0x000000001a0029ba is out of bounds.


1a0029bc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0029bc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0029be:	4b04      	ldr	r3, [pc, #16]	; (1a0029d0 <USB0_IRQHandler+0x14>)
1a0029c0:	681b      	ldr	r3, [r3, #0]
1a0029c2:	681b      	ldr	r3, [r3, #0]
1a0029c4:	68db      	ldr	r3, [r3, #12]
1a0029c6:	4a03      	ldr	r2, [pc, #12]	; (1a0029d4 <USB0_IRQHandler+0x18>)
1a0029c8:	6810      	ldr	r0, [r2, #0]
1a0029ca:	4798      	blx	r3
}
1a0029cc:	bd08      	pop	{r3, pc}
1a0029ce:	bf00      	nop
1a0029d0:	10000528 	.word	0x10000528
1a0029d4:	100004dc 	.word	0x100004dc

1a0029d8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0029d8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0029da:	f7fe ff43 	bl	1a001864 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0029de:	4b3a      	ldr	r3, [pc, #232]	; (1a002ac8 <boardInit+0xf0>)
1a0029e0:	6818      	ldr	r0, [r3, #0]
1a0029e2:	f7ff fcef 	bl	1a0023c4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0029e6:	2001      	movs	r0, #1
1a0029e8:	2100      	movs	r1, #0
1a0029ea:	f7ff fe0b 	bl	1a002604 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0029ee:	2105      	movs	r1, #5
1a0029f0:	2000      	movs	r0, #0
1a0029f2:	f7ff fec3 	bl	1a00277c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0029f6:	2100      	movs	r1, #0
1a0029f8:	2024      	movs	r0, #36	; 0x24
1a0029fa:	f7ff febf 	bl	1a00277c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0029fe:	2100      	movs	r1, #0
1a002a00:	2025      	movs	r0, #37	; 0x25
1a002a02:	f7ff febb 	bl	1a00277c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002a06:	2100      	movs	r1, #0
1a002a08:	2026      	movs	r0, #38	; 0x26
1a002a0a:	f7ff feb7 	bl	1a00277c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002a0e:	2100      	movs	r1, #0
1a002a10:	2027      	movs	r0, #39	; 0x27
1a002a12:	f7ff feb3 	bl	1a00277c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002a16:	2101      	movs	r1, #1
1a002a18:	2028      	movs	r0, #40	; 0x28
1a002a1a:	f7ff feaf 	bl	1a00277c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002a1e:	2101      	movs	r1, #1
1a002a20:	2029      	movs	r0, #41	; 0x29
1a002a22:	f7ff feab 	bl	1a00277c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002a26:	2101      	movs	r1, #1
1a002a28:	202a      	movs	r0, #42	; 0x2a
1a002a2a:	f7ff fea7 	bl	1a00277c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002a2e:	2101      	movs	r1, #1
1a002a30:	202b      	movs	r0, #43	; 0x2b
1a002a32:	f7ff fea3 	bl	1a00277c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a002a36:	2101      	movs	r1, #1
1a002a38:	202c      	movs	r0, #44	; 0x2c
1a002a3a:	f7ff fe9f 	bl	1a00277c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002a3e:	2101      	movs	r1, #1
1a002a40:	202d      	movs	r0, #45	; 0x2d
1a002a42:	f7ff fe9b 	bl	1a00277c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a002a46:	2100      	movs	r1, #0
1a002a48:	202e      	movs	r0, #46	; 0x2e
1a002a4a:	f7ff fe97 	bl	1a00277c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002a4e:	2100      	movs	r1, #0
1a002a50:	202f      	movs	r0, #47	; 0x2f
1a002a52:	f7ff fe93 	bl	1a00277c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a002a56:	2100      	movs	r1, #0
1a002a58:	2030      	movs	r0, #48	; 0x30
1a002a5a:	f7ff fe8f 	bl	1a00277c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002a5e:	2100      	movs	r1, #0
1a002a60:	2031      	movs	r0, #49	; 0x31
1a002a62:	f7ff fe8b 	bl	1a00277c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a002a66:	2100      	movs	r1, #0
1a002a68:	2032      	movs	r0, #50	; 0x32
1a002a6a:	f7ff fe87 	bl	1a00277c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002a6e:	2100      	movs	r1, #0
1a002a70:	2033      	movs	r0, #51	; 0x33
1a002a72:	f7ff fe83 	bl	1a00277c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a002a76:	2100      	movs	r1, #0
1a002a78:	2034      	movs	r0, #52	; 0x34
1a002a7a:	f7ff fe7f 	bl	1a00277c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002a7e:	2100      	movs	r1, #0
1a002a80:	2035      	movs	r0, #53	; 0x35
1a002a82:	f7ff fe7b 	bl	1a00277c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002a86:	2101      	movs	r1, #1
1a002a88:	2036      	movs	r0, #54	; 0x36
1a002a8a:	f7ff fe77 	bl	1a00277c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a002a8e:	2101      	movs	r1, #1
1a002a90:	2037      	movs	r0, #55	; 0x37
1a002a92:	f7ff fe73 	bl	1a00277c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002a96:	2101      	movs	r1, #1
1a002a98:	2038      	movs	r0, #56	; 0x38
1a002a9a:	f7ff fe6f 	bl	1a00277c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a002a9e:	2101      	movs	r1, #1
1a002aa0:	2039      	movs	r0, #57	; 0x39
1a002aa2:	f7ff fe6b 	bl	1a00277c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002aa6:	2101      	movs	r1, #1
1a002aa8:	203a      	movs	r0, #58	; 0x3a
1a002aaa:	f7ff fe67 	bl	1a00277c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a002aae:	2101      	movs	r1, #1
1a002ab0:	203b      	movs	r0, #59	; 0x3b
1a002ab2:	f7ff fe63 	bl	1a00277c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002ab6:	2101      	movs	r1, #1
1a002ab8:	203c      	movs	r0, #60	; 0x3c
1a002aba:	f7ff fe5f 	bl	1a00277c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a002abe:	2101      	movs	r1, #1
1a002ac0:	203d      	movs	r0, #61	; 0x3d
1a002ac2:	f7ff fe5b 	bl	1a00277c <gpioInit>

}
1a002ac6:	bd08      	pop	{r3, pc}
1a002ac8:	10000518 	.word	0x10000518

1a002acc <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a002acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002ad0:	4680      	mov	r8, r0
1a002ad2:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a002ad4:	f7ff fd74 	bl	1a0025c0 <tickRead>
1a002ad8:	4606      	mov	r6, r0
1a002ada:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a002adc:	f7ff fd70 	bl	1a0025c0 <tickRead>
1a002ae0:	1b84      	subs	r4, r0, r6
1a002ae2:	eb61 0507 	sbc.w	r5, r1, r7
1a002ae6:	4b06      	ldr	r3, [pc, #24]	; (1a002b00 <delay+0x34>)
1a002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002aec:	4640      	mov	r0, r8
1a002aee:	4649      	mov	r1, r9
1a002af0:	f001 f840 	bl	1a003b74 <__aeabi_uldivmod>
1a002af4:	428d      	cmp	r5, r1
1a002af6:	bf08      	it	eq
1a002af8:	4284      	cmpeq	r4, r0
1a002afa:	d3ef      	bcc.n	1a002adc <delay+0x10>
}
1a002afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002b00:	10000520 	.word	0x10000520

1a002b04 <delayInit>:
*/

/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a002b04:	b510      	push	{r4, lr}
1a002b06:	4604      	mov	r4, r0
1a002b08:	4610      	mov	r0, r2
1a002b0a:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a002b0c:	4b04      	ldr	r3, [pc, #16]	; (1a002b20 <delayInit+0x1c>)
1a002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002b12:	f001 f82f 	bl	1a003b74 <__aeabi_uldivmod>
1a002b16:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a002b1a:	2300      	movs	r3, #0
1a002b1c:	7423      	strb	r3, [r4, #16]
}
1a002b1e:	bd10      	pop	{r4, pc}
1a002b20:	10000520 	.word	0x10000520

1a002b24 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a002b24:	b570      	push	{r4, r5, r6, lr}
1a002b26:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a002b28:	7c05      	ldrb	r5, [r0, #16]
1a002b2a:	b195      	cbz	r5, 1a002b52 <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a002b2c:	f7ff fd48 	bl	1a0025c0 <tickRead>
1a002b30:	e9d4 2300 	ldrd	r2, r3, [r4]
1a002b34:	1a82      	subs	r2, r0, r2
1a002b36:	eb61 0303 	sbc.w	r3, r1, r3
1a002b3a:	4615      	mov	r5, r2
1a002b3c:	461e      	mov	r6, r3
1a002b3e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a002b42:	429e      	cmp	r6, r3
1a002b44:	bf08      	it	eq
1a002b46:	4295      	cmpeq	r5, r2
1a002b48:	d30b      	bcc.n	1a002b62 <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a002b4a:	2300      	movs	r3, #0
1a002b4c:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a002b4e:	2501      	movs	r5, #1
1a002b50:	e005      	b.n	1a002b5e <delayRead+0x3a>
      delay->startTime = tickRead();
1a002b52:	f7ff fd35 	bl	1a0025c0 <tickRead>
1a002b56:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a002b5a:	2301      	movs	r3, #1
1a002b5c:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a002b5e:	4628      	mov	r0, r5
1a002b60:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a002b62:	2500      	movs	r5, #0
1a002b64:	e7fb      	b.n	1a002b5e <delayRead+0x3a>
1a002b66:	Address 0x000000001a002b66 is out of bounds.


1a002b68 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002b68:	2301      	movs	r3, #1
1a002b6a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002b6e:	4b01      	ldr	r3, [pc, #4]	; (1a002b74 <clearInterrupt+0xc>)
1a002b70:	6258      	str	r0, [r3, #36]	; 0x24
}
1a002b72:	4770      	bx	lr
1a002b74:	40087000 	.word	0x40087000

1a002b78 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002b7a:	4b12      	ldr	r3, [pc, #72]	; (1a002bc4 <serveInterrupt+0x4c>)
1a002b7c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a002b7e:	4b12      	ldr	r3, [pc, #72]	; (1a002bc8 <serveInterrupt+0x50>)
1a002b80:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a002b82:	2301      	movs	r3, #1
1a002b84:	4083      	lsls	r3, r0
1a002b86:	420b      	tst	r3, r1
1a002b88:	d111      	bne.n	1a002bae <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002b8a:	4910      	ldr	r1, [pc, #64]	; (1a002bcc <serveInterrupt+0x54>)
1a002b8c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002b8e:	4d10      	ldr	r5, [pc, #64]	; (1a002bd0 <serveInterrupt+0x58>)
1a002b90:	0051      	lsls	r1, r2, #1
1a002b92:	188f      	adds	r7, r1, r2
1a002b94:	00fc      	lsls	r4, r7, #3
1a002b96:	4627      	mov	r7, r4
1a002b98:	442c      	add	r4, r5
1a002b9a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002b9c:	6864      	ldr	r4, [r4, #4]
1a002b9e:	1b36      	subs	r6, r6, r4
1a002ba0:	443d      	add	r5, r7
1a002ba2:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a002ba4:	4a08      	ldr	r2, [pc, #32]	; (1a002bc8 <serveInterrupt+0x50>)
1a002ba6:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002ba8:	f7ff ffde 	bl	1a002b68 <clearInterrupt>
}
1a002bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002bae:	4907      	ldr	r1, [pc, #28]	; (1a002bcc <serveInterrupt+0x54>)
1a002bb0:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002bb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a002bb6:	00d1      	lsls	r1, r2, #3
1a002bb8:	4a05      	ldr	r2, [pc, #20]	; (1a002bd0 <serveInterrupt+0x58>)
1a002bba:	440a      	add	r2, r1
1a002bbc:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a002bbe:	4a02      	ldr	r2, [pc, #8]	; (1a002bc8 <serveInterrupt+0x50>)
1a002bc0:	61d3      	str	r3, [r2, #28]
1a002bc2:	e7f1      	b.n	1a002ba8 <serveInterrupt+0x30>
1a002bc4:	1a004384 	.word	0x1a004384
1a002bc8:	40087000 	.word	0x40087000
1a002bcc:	40084000 	.word	0x40084000
1a002bd0:	1000003c 	.word	0x1000003c

1a002bd4 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a002bd4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002bd6:	2000      	movs	r0, #0
1a002bd8:	f7ff ffce 	bl	1a002b78 <serveInterrupt>
}
1a002bdc:	bd08      	pop	{r3, pc}

1a002bde <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a002bde:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a002be0:	2001      	movs	r0, #1
1a002be2:	f7ff ffc9 	bl	1a002b78 <serveInterrupt>
}
1a002be6:	bd08      	pop	{r3, pc}

1a002be8 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a002be8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a002bea:	2002      	movs	r0, #2
1a002bec:	f7ff ffc4 	bl	1a002b78 <serveInterrupt>
}
1a002bf0:	bd08      	pop	{r3, pc}
1a002bf2:	Address 0x000000001a002bf2 is out of bounds.


1a002bf4 <log10>:
1a002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002bf6:	ed2d 8b02 	vpush	{d8}
1a002bfa:	b08b      	sub	sp, #44	; 0x2c
1a002bfc:	ec55 4b10 	vmov	r4, r5, d0
1a002c00:	f000 f87a 	bl	1a002cf8 <__ieee754_log10>
1a002c04:	4b36      	ldr	r3, [pc, #216]	; (1a002ce0 <log10+0xec>)
1a002c06:	eeb0 8a40 	vmov.f32	s16, s0
1a002c0a:	eef0 8a60 	vmov.f32	s17, s1
1a002c0e:	f993 6000 	ldrsb.w	r6, [r3]
1a002c12:	1c73      	adds	r3, r6, #1
1a002c14:	d00e      	beq.n	1a002c34 <log10+0x40>
1a002c16:	4622      	mov	r2, r4
1a002c18:	462b      	mov	r3, r5
1a002c1a:	4620      	mov	r0, r4
1a002c1c:	4629      	mov	r1, r5
1a002c1e:	f000 ff43 	bl	1a003aa8 <__aeabi_dcmpun>
1a002c22:	4607      	mov	r7, r0
1a002c24:	b930      	cbnz	r0, 1a002c34 <log10+0x40>
1a002c26:	2200      	movs	r2, #0
1a002c28:	2300      	movs	r3, #0
1a002c2a:	4620      	mov	r0, r4
1a002c2c:	4629      	mov	r1, r5
1a002c2e:	f000 ff1d 	bl	1a003a6c <__aeabi_dcmple>
1a002c32:	b938      	cbnz	r0, 1a002c44 <log10+0x50>
1a002c34:	eeb0 0a48 	vmov.f32	s0, s16
1a002c38:	eef0 0a68 	vmov.f32	s1, s17
1a002c3c:	b00b      	add	sp, #44	; 0x2c
1a002c3e:	ecbd 8b02 	vpop	{d8}
1a002c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002c44:	4b27      	ldr	r3, [pc, #156]	; (1a002ce4 <log10+0xf0>)
1a002c46:	9708      	str	r7, [sp, #32]
1a002c48:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a002c4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a002c50:	9301      	str	r3, [sp, #4]
1a002c52:	b9b6      	cbnz	r6, 1a002c82 <log10+0x8e>
1a002c54:	4f24      	ldr	r7, [pc, #144]	; (1a002ce8 <log10+0xf4>)
1a002c56:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
1a002c5a:	4620      	mov	r0, r4
1a002c5c:	4629      	mov	r1, r5
1a002c5e:	2200      	movs	r2, #0
1a002c60:	2300      	movs	r3, #0
1a002c62:	e9cd 6706 	strd	r6, r7, [sp, #24]
1a002c66:	f000 feed 	bl	1a003a44 <__aeabi_dcmpeq>
1a002c6a:	b388      	cbz	r0, 1a002cd0 <log10+0xdc>
1a002c6c:	2302      	movs	r3, #2
1a002c6e:	9300      	str	r3, [sp, #0]
1a002c70:	4668      	mov	r0, sp
1a002c72:	f000 f8df 	bl	1a002e34 <matherr>
1a002c76:	b198      	cbz	r0, 1a002ca0 <log10+0xac>
1a002c78:	9b08      	ldr	r3, [sp, #32]
1a002c7a:	b9b3      	cbnz	r3, 1a002caa <log10+0xb6>
1a002c7c:	ed9d 8b06 	vldr	d8, [sp, #24]
1a002c80:	e7d8      	b.n	1a002c34 <log10+0x40>
1a002c82:	4b1a      	ldr	r3, [pc, #104]	; (1a002cec <log10+0xf8>)
1a002c84:	2200      	movs	r2, #0
1a002c86:	e9cd 2306 	strd	r2, r3, [sp, #24]
1a002c8a:	4620      	mov	r0, r4
1a002c8c:	4629      	mov	r1, r5
1a002c8e:	2200      	movs	r2, #0
1a002c90:	2300      	movs	r3, #0
1a002c92:	f000 fed7 	bl	1a003a44 <__aeabi_dcmpeq>
1a002c96:	b168      	cbz	r0, 1a002cb4 <log10+0xc0>
1a002c98:	2302      	movs	r3, #2
1a002c9a:	429e      	cmp	r6, r3
1a002c9c:	9300      	str	r3, [sp, #0]
1a002c9e:	d1e7      	bne.n	1a002c70 <log10+0x7c>
1a002ca0:	f001 f8e8 	bl	1a003e74 <__errno>
1a002ca4:	2322      	movs	r3, #34	; 0x22
1a002ca6:	6003      	str	r3, [r0, #0]
1a002ca8:	e7e6      	b.n	1a002c78 <log10+0x84>
1a002caa:	f001 f8e3 	bl	1a003e74 <__errno>
1a002cae:	9b08      	ldr	r3, [sp, #32]
1a002cb0:	6003      	str	r3, [r0, #0]
1a002cb2:	e7e3      	b.n	1a002c7c <log10+0x88>
1a002cb4:	2301      	movs	r3, #1
1a002cb6:	2e02      	cmp	r6, #2
1a002cb8:	9300      	str	r3, [sp, #0]
1a002cba:	d10b      	bne.n	1a002cd4 <log10+0xe0>
1a002cbc:	f001 f8da 	bl	1a003e74 <__errno>
1a002cc0:	2321      	movs	r3, #33	; 0x21
1a002cc2:	6003      	str	r3, [r0, #0]
1a002cc4:	480a      	ldr	r0, [pc, #40]	; (1a002cf0 <log10+0xfc>)
1a002cc6:	f000 f8b7 	bl	1a002e38 <nan>
1a002cca:	ed8d 0b06 	vstr	d0, [sp, #24]
1a002cce:	e7d3      	b.n	1a002c78 <log10+0x84>
1a002cd0:	2301      	movs	r3, #1
1a002cd2:	9300      	str	r3, [sp, #0]
1a002cd4:	4668      	mov	r0, sp
1a002cd6:	f000 f8ad 	bl	1a002e34 <matherr>
1a002cda:	2800      	cmp	r0, #0
1a002cdc:	d1f2      	bne.n	1a002cc4 <log10+0xd0>
1a002cde:	e7ed      	b.n	1a002cbc <log10+0xc8>
1a002ce0:	10000084 	.word	0x10000084
1a002ce4:	1a004388 	.word	0x1a004388
1a002ce8:	c7efffff 	.word	0xc7efffff
1a002cec:	fff00000 	.word	0xfff00000
1a002cf0:	1a003f68 	.word	0x1a003f68
1a002cf4:	ffffffff 	.word	0xffffffff

1a002cf8 <__ieee754_log10>:
1a002cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002cfc:	ec55 4b10 	vmov	r4, r5, d0
1a002d00:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
1a002d04:	b083      	sub	sp, #12
1a002d06:	462b      	mov	r3, r5
1a002d08:	da1f      	bge.n	1a002d4a <__ieee754_log10+0x52>
1a002d0a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
1a002d0e:	4322      	orrs	r2, r4
1a002d10:	d064      	beq.n	1a002ddc <__ieee754_log10+0xe4>
1a002d12:	2d00      	cmp	r5, #0
1a002d14:	db6d      	blt.n	1a002df2 <__ieee754_log10+0xfa>
1a002d16:	4629      	mov	r1, r5
1a002d18:	2200      	movs	r2, #0
1a002d1a:	4b43      	ldr	r3, [pc, #268]	; (1a002e28 <__ieee754_log10+0x130>)
1a002d1c:	ee10 0a10 	vmov	r0, s0
1a002d20:	f000 fc28 	bl	1a003574 <__aeabi_dmul>
1a002d24:	4a41      	ldr	r2, [pc, #260]	; (1a002e2c <__ieee754_log10+0x134>)
1a002d26:	460d      	mov	r5, r1
1a002d28:	462b      	mov	r3, r5
1a002d2a:	4293      	cmp	r3, r2
1a002d2c:	4604      	mov	r4, r0
1a002d2e:	f06f 0135 	mvn.w	r1, #53	; 0x35
1a002d32:	dd0f      	ble.n	1a002d54 <__ieee754_log10+0x5c>
1a002d34:	4622      	mov	r2, r4
1a002d36:	462b      	mov	r3, r5
1a002d38:	4620      	mov	r0, r4
1a002d3a:	4629      	mov	r1, r5
1a002d3c:	f000 fa64 	bl	1a003208 <__adddf3>
1a002d40:	ec41 0b10 	vmov	d0, r0, r1
1a002d44:	b003      	add	sp, #12
1a002d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002d4a:	4a38      	ldr	r2, [pc, #224]	; (1a002e2c <__ieee754_log10+0x134>)
1a002d4c:	4293      	cmp	r3, r2
1a002d4e:	f04f 0100 	mov.w	r1, #0
1a002d52:	dcef      	bgt.n	1a002d34 <__ieee754_log10+0x3c>
1a002d54:	1518      	asrs	r0, r3, #20
1a002d56:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
1a002d5a:	4408      	add	r0, r1
1a002d5c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
1a002d60:	4448      	add	r0, r9
1a002d62:	f3c3 0813 	ubfx	r8, r3, #0, #20
1a002d66:	f000 fb9b 	bl	1a0034a0 <__aeabi_i2d>
1a002d6a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
1a002d6e:	3303      	adds	r3, #3
1a002d70:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
1a002d74:	ec45 4b10 	vmov	d0, r4, r5
1a002d78:	4606      	mov	r6, r0
1a002d7a:	460f      	mov	r7, r1
1a002d7c:	f000 f864 	bl	1a002e48 <__ieee754_log>
1a002d80:	4630      	mov	r0, r6
1a002d82:	4639      	mov	r1, r7
1a002d84:	a322      	add	r3, pc, #136	; (adr r3, 1a002e10 <__ieee754_log10+0x118>)
1a002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002d8a:	ed8d 0b00 	vstr	d0, [sp]
1a002d8e:	f000 fbf1 	bl	1a003574 <__aeabi_dmul>
1a002d92:	ed9d 0b00 	vldr	d0, [sp]
1a002d96:	4604      	mov	r4, r0
1a002d98:	460d      	mov	r5, r1
1a002d9a:	a31f      	add	r3, pc, #124	; (adr r3, 1a002e18 <__ieee754_log10+0x120>)
1a002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002da0:	ec51 0b10 	vmov	r0, r1, d0
1a002da4:	f000 fbe6 	bl	1a003574 <__aeabi_dmul>
1a002da8:	4602      	mov	r2, r0
1a002daa:	460b      	mov	r3, r1
1a002dac:	4620      	mov	r0, r4
1a002dae:	4629      	mov	r1, r5
1a002db0:	f000 fa2a 	bl	1a003208 <__adddf3>
1a002db4:	a31a      	add	r3, pc, #104	; (adr r3, 1a002e20 <__ieee754_log10+0x128>)
1a002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002dba:	4604      	mov	r4, r0
1a002dbc:	460d      	mov	r5, r1
1a002dbe:	4630      	mov	r0, r6
1a002dc0:	4639      	mov	r1, r7
1a002dc2:	f000 fbd7 	bl	1a003574 <__aeabi_dmul>
1a002dc6:	4602      	mov	r2, r0
1a002dc8:	460b      	mov	r3, r1
1a002dca:	4620      	mov	r0, r4
1a002dcc:	4629      	mov	r1, r5
1a002dce:	f000 fa1b 	bl	1a003208 <__adddf3>
1a002dd2:	ec41 0b10 	vmov	d0, r0, r1
1a002dd6:	b003      	add	sp, #12
1a002dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002ddc:	2200      	movs	r2, #0
1a002dde:	2300      	movs	r3, #0
1a002de0:	2000      	movs	r0, #0
1a002de2:	4913      	ldr	r1, [pc, #76]	; (1a002e30 <__ieee754_log10+0x138>)
1a002de4:	f000 fcf0 	bl	1a0037c8 <__aeabi_ddiv>
1a002de8:	ec41 0b10 	vmov	d0, r0, r1
1a002dec:	b003      	add	sp, #12
1a002dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002df2:	ee10 2a10 	vmov	r2, s0
1a002df6:	4620      	mov	r0, r4
1a002df8:	4629      	mov	r1, r5
1a002dfa:	f000 fa03 	bl	1a003204 <__aeabi_dsub>
1a002dfe:	2200      	movs	r2, #0
1a002e00:	2300      	movs	r3, #0
1a002e02:	f000 fce1 	bl	1a0037c8 <__aeabi_ddiv>
1a002e06:	ec41 0b10 	vmov	d0, r0, r1
1a002e0a:	e79b      	b.n	1a002d44 <__ieee754_log10+0x4c>
1a002e0c:	f3af 8000 	nop.w
1a002e10:	11f12b36 	.word	0x11f12b36
1a002e14:	3d59fef3 	.word	0x3d59fef3
1a002e18:	1526e50e 	.word	0x1526e50e
1a002e1c:	3fdbcb7b 	.word	0x3fdbcb7b
1a002e20:	509f6000 	.word	0x509f6000
1a002e24:	3fd34413 	.word	0x3fd34413
1a002e28:	43500000 	.word	0x43500000
1a002e2c:	7fefffff 	.word	0x7fefffff
1a002e30:	c3500000 	.word	0xc3500000

1a002e34 <matherr>:
1a002e34:	2000      	movs	r0, #0
1a002e36:	4770      	bx	lr

1a002e38 <nan>:
1a002e38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1a002e40 <nan+0x8>
1a002e3c:	4770      	bx	lr
1a002e3e:	bf00      	nop
1a002e40:	00000000 	.word	0x00000000
1a002e44:	7ff80000 	.word	0x7ff80000

1a002e48 <__ieee754_log>:
1a002e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002e4c:	ec51 0b10 	vmov	r0, r1, d0
1a002e50:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002e54:	b085      	sub	sp, #20
1a002e56:	460b      	mov	r3, r1
1a002e58:	f280 80ce 	bge.w	1a002ff8 <__ieee754_log+0x1b0>
1a002e5c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
1a002e60:	4302      	orrs	r2, r0
1a002e62:	f000 80d8 	beq.w	1a003016 <__ieee754_log+0x1ce>
1a002e66:	2900      	cmp	r1, #0
1a002e68:	f2c0 80ea 	blt.w	1a003040 <__ieee754_log+0x1f8>
1a002e6c:	2200      	movs	r2, #0
1a002e6e:	4bde      	ldr	r3, [pc, #888]	; (1a0031e8 <__ieee754_log+0x3a0>)
1a002e70:	f000 fb80 	bl	1a003574 <__aeabi_dmul>
1a002e74:	4add      	ldr	r2, [pc, #884]	; (1a0031ec <__ieee754_log+0x3a4>)
1a002e76:	460b      	mov	r3, r1
1a002e78:	4293      	cmp	r3, r2
1a002e7a:	f06f 0735 	mvn.w	r7, #53	; 0x35
1a002e7e:	f300 80c1 	bgt.w	1a003004 <__ieee754_log+0x1bc>
1a002e82:	f3c3 0513 	ubfx	r5, r3, #0, #20
1a002e86:	f505 2615 	add.w	r6, r5, #610304	; 0x95000
1a002e8a:	f606 7664 	addw	r6, r6, #3940	; 0xf64
1a002e8e:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
1a002e92:	f086 527f 	eor.w	r2, r6, #1069547520	; 0x3fc00000
1a002e96:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
1a002e9a:	ea42 0105 	orr.w	r1, r2, r5
1a002e9e:	151c      	asrs	r4, r3, #20
1a002ea0:	2200      	movs	r2, #0
1a002ea2:	4bd3      	ldr	r3, [pc, #844]	; (1a0031f0 <__ieee754_log+0x3a8>)
1a002ea4:	f000 f9ae 	bl	1a003204 <__aeabi_dsub>
1a002ea8:	1cab      	adds	r3, r5, #2
1a002eaa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a002eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a002eb2:	443c      	add	r4, r7
1a002eb4:	2b02      	cmp	r3, #2
1a002eb6:	eb04 5416 	add.w	r4, r4, r6, lsr #20
1a002eba:	4682      	mov	sl, r0
1a002ebc:	468b      	mov	fp, r1
1a002ebe:	f04f 0200 	mov.w	r2, #0
1a002ec2:	f340 80b3 	ble.w	1a00302c <__ieee754_log+0x1e4>
1a002ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a002eca:	f000 f99d 	bl	1a003208 <__adddf3>
1a002ece:	4602      	mov	r2, r0
1a002ed0:	460b      	mov	r3, r1
1a002ed2:	4650      	mov	r0, sl
1a002ed4:	4659      	mov	r1, fp
1a002ed6:	f000 fc77 	bl	1a0037c8 <__aeabi_ddiv>
1a002eda:	4606      	mov	r6, r0
1a002edc:	4620      	mov	r0, r4
1a002ede:	460f      	mov	r7, r1
1a002ee0:	f000 fade 	bl	1a0034a0 <__aeabi_i2d>
1a002ee4:	4632      	mov	r2, r6
1a002ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a002eea:	463b      	mov	r3, r7
1a002eec:	4630      	mov	r0, r6
1a002eee:	4639      	mov	r1, r7
1a002ef0:	e9cd 6700 	strd	r6, r7, [sp]
1a002ef4:	f000 fb3e 	bl	1a003574 <__aeabi_dmul>
1a002ef8:	4602      	mov	r2, r0
1a002efa:	460b      	mov	r3, r1
1a002efc:	4680      	mov	r8, r0
1a002efe:	4689      	mov	r9, r1
1a002f00:	f000 fb38 	bl	1a003574 <__aeabi_dmul>
1a002f04:	a3a2      	add	r3, pc, #648	; (adr r3, 1a003190 <__ieee754_log+0x348>)
1a002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002f0a:	4606      	mov	r6, r0
1a002f0c:	460f      	mov	r7, r1
1a002f0e:	f000 fb31 	bl	1a003574 <__aeabi_dmul>
1a002f12:	a3a1      	add	r3, pc, #644	; (adr r3, 1a003198 <__ieee754_log+0x350>)
1a002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002f18:	f000 f976 	bl	1a003208 <__adddf3>
1a002f1c:	4632      	mov	r2, r6
1a002f1e:	463b      	mov	r3, r7
1a002f20:	f000 fb28 	bl	1a003574 <__aeabi_dmul>
1a002f24:	a39e      	add	r3, pc, #632	; (adr r3, 1a0031a0 <__ieee754_log+0x358>)
1a002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002f2a:	f000 f96d 	bl	1a003208 <__adddf3>
1a002f2e:	4632      	mov	r2, r6
1a002f30:	463b      	mov	r3, r7
1a002f32:	f000 fb1f 	bl	1a003574 <__aeabi_dmul>
1a002f36:	a39c      	add	r3, pc, #624	; (adr r3, 1a0031a8 <__ieee754_log+0x360>)
1a002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002f3c:	f000 f964 	bl	1a003208 <__adddf3>
1a002f40:	4642      	mov	r2, r8
1a002f42:	464b      	mov	r3, r9
1a002f44:	f000 fb16 	bl	1a003574 <__aeabi_dmul>
1a002f48:	a399      	add	r3, pc, #612	; (adr r3, 1a0031b0 <__ieee754_log+0x368>)
1a002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002f4e:	4680      	mov	r8, r0
1a002f50:	4689      	mov	r9, r1
1a002f52:	4630      	mov	r0, r6
1a002f54:	4639      	mov	r1, r7
1a002f56:	f000 fb0d 	bl	1a003574 <__aeabi_dmul>
1a002f5a:	a397      	add	r3, pc, #604	; (adr r3, 1a0031b8 <__ieee754_log+0x370>)
1a002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002f60:	f000 f952 	bl	1a003208 <__adddf3>
1a002f64:	4632      	mov	r2, r6
1a002f66:	463b      	mov	r3, r7
1a002f68:	f000 fb04 	bl	1a003574 <__aeabi_dmul>
1a002f6c:	a394      	add	r3, pc, #592	; (adr r3, 1a0031c0 <__ieee754_log+0x378>)
1a002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002f72:	f000 f949 	bl	1a003208 <__adddf3>
1a002f76:	4632      	mov	r2, r6
1a002f78:	463b      	mov	r3, r7
1a002f7a:	f000 fafb 	bl	1a003574 <__aeabi_dmul>
1a002f7e:	460b      	mov	r3, r1
1a002f80:	4602      	mov	r2, r0
1a002f82:	4649      	mov	r1, r9
1a002f84:	4640      	mov	r0, r8
1a002f86:	f000 f93f 	bl	1a003208 <__adddf3>
1a002f8a:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
1a002f8e:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
1a002f92:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
1a002f96:	3551      	adds	r5, #81	; 0x51
1a002f98:	431d      	orrs	r5, r3
1a002f9a:	2d00      	cmp	r5, #0
1a002f9c:	4606      	mov	r6, r0
1a002f9e:	460f      	mov	r7, r1
1a002fa0:	f340 808f 	ble.w	1a0030c2 <__ieee754_log+0x27a>
1a002fa4:	2200      	movs	r2, #0
1a002fa6:	4b93      	ldr	r3, [pc, #588]	; (1a0031f4 <__ieee754_log+0x3ac>)
1a002fa8:	4650      	mov	r0, sl
1a002faa:	4659      	mov	r1, fp
1a002fac:	f000 fae2 	bl	1a003574 <__aeabi_dmul>
1a002fb0:	4652      	mov	r2, sl
1a002fb2:	465b      	mov	r3, fp
1a002fb4:	f000 fade 	bl	1a003574 <__aeabi_dmul>
1a002fb8:	4602      	mov	r2, r0
1a002fba:	460b      	mov	r3, r1
1a002fbc:	4680      	mov	r8, r0
1a002fbe:	4689      	mov	r9, r1
1a002fc0:	4630      	mov	r0, r6
1a002fc2:	4639      	mov	r1, r7
1a002fc4:	f000 f920 	bl	1a003208 <__adddf3>
1a002fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a002fcc:	f000 fad2 	bl	1a003574 <__aeabi_dmul>
1a002fd0:	4606      	mov	r6, r0
1a002fd2:	460f      	mov	r7, r1
1a002fd4:	2c00      	cmp	r4, #0
1a002fd6:	f040 808b 	bne.w	1a0030f0 <__ieee754_log+0x2a8>
1a002fda:	4602      	mov	r2, r0
1a002fdc:	460b      	mov	r3, r1
1a002fde:	4640      	mov	r0, r8
1a002fe0:	4649      	mov	r1, r9
1a002fe2:	f000 f90f 	bl	1a003204 <__aeabi_dsub>
1a002fe6:	4602      	mov	r2, r0
1a002fe8:	460b      	mov	r3, r1
1a002fea:	4650      	mov	r0, sl
1a002fec:	4659      	mov	r1, fp
1a002fee:	f000 f909 	bl	1a003204 <__aeabi_dsub>
1a002ff2:	ec41 0b10 	vmov	d0, r0, r1
1a002ff6:	e00b      	b.n	1a003010 <__ieee754_log+0x1c8>
1a002ff8:	4a7c      	ldr	r2, [pc, #496]	; (1a0031ec <__ieee754_log+0x3a4>)
1a002ffa:	4293      	cmp	r3, r2
1a002ffc:	f04f 0700 	mov.w	r7, #0
1a003000:	f77f af3f 	ble.w	1a002e82 <__ieee754_log+0x3a>
1a003004:	4602      	mov	r2, r0
1a003006:	460b      	mov	r3, r1
1a003008:	f000 f8fe 	bl	1a003208 <__adddf3>
1a00300c:	ec41 0b10 	vmov	d0, r0, r1
1a003010:	b005      	add	sp, #20
1a003012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003016:	2200      	movs	r2, #0
1a003018:	2300      	movs	r3, #0
1a00301a:	2000      	movs	r0, #0
1a00301c:	4976      	ldr	r1, [pc, #472]	; (1a0031f8 <__ieee754_log+0x3b0>)
1a00301e:	f000 fbd3 	bl	1a0037c8 <__aeabi_ddiv>
1a003022:	ec41 0b10 	vmov	d0, r0, r1
1a003026:	b005      	add	sp, #20
1a003028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00302c:	2300      	movs	r3, #0
1a00302e:	f000 fd09 	bl	1a003a44 <__aeabi_dcmpeq>
1a003032:	b180      	cbz	r0, 1a003056 <__ieee754_log+0x20e>
1a003034:	2c00      	cmp	r4, #0
1a003036:	f040 8084 	bne.w	1a003142 <__ieee754_log+0x2fa>
1a00303a:	ed9f 0b63 	vldr	d0, [pc, #396]	; 1a0031c8 <__ieee754_log+0x380>
1a00303e:	e7e7      	b.n	1a003010 <__ieee754_log+0x1c8>
1a003040:	ee10 2a10 	vmov	r2, s0
1a003044:	f000 f8de 	bl	1a003204 <__aeabi_dsub>
1a003048:	2200      	movs	r2, #0
1a00304a:	2300      	movs	r3, #0
1a00304c:	f000 fbbc 	bl	1a0037c8 <__aeabi_ddiv>
1a003050:	ec41 0b10 	vmov	d0, r0, r1
1a003054:	e7dc      	b.n	1a003010 <__ieee754_log+0x1c8>
1a003056:	a35e      	add	r3, pc, #376	; (adr r3, 1a0031d0 <__ieee754_log+0x388>)
1a003058:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00305c:	4650      	mov	r0, sl
1a00305e:	4659      	mov	r1, fp
1a003060:	f000 fa88 	bl	1a003574 <__aeabi_dmul>
1a003064:	4602      	mov	r2, r0
1a003066:	460b      	mov	r3, r1
1a003068:	2000      	movs	r0, #0
1a00306a:	4962      	ldr	r1, [pc, #392]	; (1a0031f4 <__ieee754_log+0x3ac>)
1a00306c:	f000 f8ca 	bl	1a003204 <__aeabi_dsub>
1a003070:	4652      	mov	r2, sl
1a003072:	4606      	mov	r6, r0
1a003074:	460f      	mov	r7, r1
1a003076:	465b      	mov	r3, fp
1a003078:	4650      	mov	r0, sl
1a00307a:	4659      	mov	r1, fp
1a00307c:	f000 fa7a 	bl	1a003574 <__aeabi_dmul>
1a003080:	4602      	mov	r2, r0
1a003082:	460b      	mov	r3, r1
1a003084:	4630      	mov	r0, r6
1a003086:	4639      	mov	r1, r7
1a003088:	f000 fa74 	bl	1a003574 <__aeabi_dmul>
1a00308c:	4606      	mov	r6, r0
1a00308e:	460f      	mov	r7, r1
1a003090:	b32c      	cbz	r4, 1a0030de <__ieee754_log+0x296>
1a003092:	4620      	mov	r0, r4
1a003094:	f000 fa04 	bl	1a0034a0 <__aeabi_i2d>
1a003098:	a34f      	add	r3, pc, #316	; (adr r3, 1a0031d8 <__ieee754_log+0x390>)
1a00309a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00309e:	4680      	mov	r8, r0
1a0030a0:	4689      	mov	r9, r1
1a0030a2:	f000 fa67 	bl	1a003574 <__aeabi_dmul>
1a0030a6:	a34e      	add	r3, pc, #312	; (adr r3, 1a0031e0 <__ieee754_log+0x398>)
1a0030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0030ac:	4604      	mov	r4, r0
1a0030ae:	460d      	mov	r5, r1
1a0030b0:	4640      	mov	r0, r8
1a0030b2:	4649      	mov	r1, r9
1a0030b4:	f000 fa5e 	bl	1a003574 <__aeabi_dmul>
1a0030b8:	4602      	mov	r2, r0
1a0030ba:	460b      	mov	r3, r1
1a0030bc:	4630      	mov	r0, r6
1a0030be:	4639      	mov	r1, r7
1a0030c0:	e02e      	b.n	1a003120 <__ieee754_log+0x2d8>
1a0030c2:	4602      	mov	r2, r0
1a0030c4:	460b      	mov	r3, r1
1a0030c6:	4650      	mov	r0, sl
1a0030c8:	4659      	mov	r1, fp
1a0030ca:	f000 f89b 	bl	1a003204 <__aeabi_dsub>
1a0030ce:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0030d2:	f000 fa4f 	bl	1a003574 <__aeabi_dmul>
1a0030d6:	4606      	mov	r6, r0
1a0030d8:	460f      	mov	r7, r1
1a0030da:	2c00      	cmp	r4, #0
1a0030dc:	d14d      	bne.n	1a00317a <__ieee754_log+0x332>
1a0030de:	4632      	mov	r2, r6
1a0030e0:	463b      	mov	r3, r7
1a0030e2:	4650      	mov	r0, sl
1a0030e4:	4659      	mov	r1, fp
1a0030e6:	f000 f88d 	bl	1a003204 <__aeabi_dsub>
1a0030ea:	ec41 0b10 	vmov	d0, r0, r1
1a0030ee:	e78f      	b.n	1a003010 <__ieee754_log+0x1c8>
1a0030f0:	a339      	add	r3, pc, #228	; (adr r3, 1a0031d8 <__ieee754_log+0x390>)
1a0030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0030f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a0030fa:	f000 fa3b 	bl	1a003574 <__aeabi_dmul>
1a0030fe:	a338      	add	r3, pc, #224	; (adr r3, 1a0031e0 <__ieee754_log+0x398>)
1a003100:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003104:	4604      	mov	r4, r0
1a003106:	460d      	mov	r5, r1
1a003108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a00310c:	f000 fa32 	bl	1a003574 <__aeabi_dmul>
1a003110:	4632      	mov	r2, r6
1a003112:	463b      	mov	r3, r7
1a003114:	f000 f878 	bl	1a003208 <__adddf3>
1a003118:	4602      	mov	r2, r0
1a00311a:	460b      	mov	r3, r1
1a00311c:	4640      	mov	r0, r8
1a00311e:	4649      	mov	r1, r9
1a003120:	f000 f870 	bl	1a003204 <__aeabi_dsub>
1a003124:	4652      	mov	r2, sl
1a003126:	465b      	mov	r3, fp
1a003128:	f000 f86c 	bl	1a003204 <__aeabi_dsub>
1a00312c:	4602      	mov	r2, r0
1a00312e:	460b      	mov	r3, r1
1a003130:	4620      	mov	r0, r4
1a003132:	4629      	mov	r1, r5
1a003134:	f000 f866 	bl	1a003204 <__aeabi_dsub>
1a003138:	ec41 0b10 	vmov	d0, r0, r1
1a00313c:	b005      	add	sp, #20
1a00313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003142:	4620      	mov	r0, r4
1a003144:	f000 f9ac 	bl	1a0034a0 <__aeabi_i2d>
1a003148:	a323      	add	r3, pc, #140	; (adr r3, 1a0031d8 <__ieee754_log+0x390>)
1a00314a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00314e:	4606      	mov	r6, r0
1a003150:	460f      	mov	r7, r1
1a003152:	f000 fa0f 	bl	1a003574 <__aeabi_dmul>
1a003156:	a322      	add	r3, pc, #136	; (adr r3, 1a0031e0 <__ieee754_log+0x398>)
1a003158:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00315c:	4604      	mov	r4, r0
1a00315e:	460d      	mov	r5, r1
1a003160:	4630      	mov	r0, r6
1a003162:	4639      	mov	r1, r7
1a003164:	f000 fa06 	bl	1a003574 <__aeabi_dmul>
1a003168:	4602      	mov	r2, r0
1a00316a:	460b      	mov	r3, r1
1a00316c:	4620      	mov	r0, r4
1a00316e:	4629      	mov	r1, r5
1a003170:	f000 f84a 	bl	1a003208 <__adddf3>
1a003174:	ec41 0b10 	vmov	d0, r0, r1
1a003178:	e74a      	b.n	1a003010 <__ieee754_log+0x1c8>
1a00317a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
1a00317e:	a316      	add	r3, pc, #88	; (adr r3, 1a0031d8 <__ieee754_log+0x390>)
1a003180:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003184:	4640      	mov	r0, r8
1a003186:	4649      	mov	r1, r9
1a003188:	e78b      	b.n	1a0030a2 <__ieee754_log+0x25a>
1a00318a:	bf00      	nop
1a00318c:	f3af 8000 	nop.w
1a003190:	df3e5244 	.word	0xdf3e5244
1a003194:	3fc2f112 	.word	0x3fc2f112
1a003198:	96cb03de 	.word	0x96cb03de
1a00319c:	3fc74664 	.word	0x3fc74664
1a0031a0:	94229359 	.word	0x94229359
1a0031a4:	3fd24924 	.word	0x3fd24924
1a0031a8:	55555593 	.word	0x55555593
1a0031ac:	3fe55555 	.word	0x3fe55555
1a0031b0:	d078c69f 	.word	0xd078c69f
1a0031b4:	3fc39a09 	.word	0x3fc39a09
1a0031b8:	1d8e78af 	.word	0x1d8e78af
1a0031bc:	3fcc71c5 	.word	0x3fcc71c5
1a0031c0:	9997fa04 	.word	0x9997fa04
1a0031c4:	3fd99999 	.word	0x3fd99999
	...
1a0031d0:	55555555 	.word	0x55555555
1a0031d4:	3fd55555 	.word	0x3fd55555
1a0031d8:	fee00000 	.word	0xfee00000
1a0031dc:	3fe62e42 	.word	0x3fe62e42
1a0031e0:	35793c76 	.word	0x35793c76
1a0031e4:	3dea39ef 	.word	0x3dea39ef
1a0031e8:	43500000 	.word	0x43500000
1a0031ec:	7fefffff 	.word	0x7fefffff
1a0031f0:	3ff00000 	.word	0x3ff00000
1a0031f4:	3fe00000 	.word	0x3fe00000
1a0031f8:	c3500000 	.word	0xc3500000

1a0031fc <__aeabi_drsub>:
1a0031fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a003200:	e002      	b.n	1a003208 <__adddf3>
1a003202:	bf00      	nop

1a003204 <__aeabi_dsub>:
1a003204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a003208 <__adddf3>:
1a003208:	b530      	push	{r4, r5, lr}
1a00320a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00320e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a003212:	ea94 0f05 	teq	r4, r5
1a003216:	bf08      	it	eq
1a003218:	ea90 0f02 	teqeq	r0, r2
1a00321c:	bf1f      	itttt	ne
1a00321e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a003222:	ea55 0c02 	orrsne.w	ip, r5, r2
1a003226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00322a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00322e:	f000 80e2 	beq.w	1a0033f6 <__adddf3+0x1ee>
1a003232:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a003236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00323a:	bfb8      	it	lt
1a00323c:	426d      	neglt	r5, r5
1a00323e:	dd0c      	ble.n	1a00325a <__adddf3+0x52>
1a003240:	442c      	add	r4, r5
1a003242:	ea80 0202 	eor.w	r2, r0, r2
1a003246:	ea81 0303 	eor.w	r3, r1, r3
1a00324a:	ea82 0000 	eor.w	r0, r2, r0
1a00324e:	ea83 0101 	eor.w	r1, r3, r1
1a003252:	ea80 0202 	eor.w	r2, r0, r2
1a003256:	ea81 0303 	eor.w	r3, r1, r3
1a00325a:	2d36      	cmp	r5, #54	; 0x36
1a00325c:	bf88      	it	hi
1a00325e:	bd30      	pophi	{r4, r5, pc}
1a003260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003264:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00326c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a003270:	d002      	beq.n	1a003278 <__adddf3+0x70>
1a003272:	4240      	negs	r0, r0
1a003274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00327c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a003284:	d002      	beq.n	1a00328c <__adddf3+0x84>
1a003286:	4252      	negs	r2, r2
1a003288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00328c:	ea94 0f05 	teq	r4, r5
1a003290:	f000 80a7 	beq.w	1a0033e2 <__adddf3+0x1da>
1a003294:	f1a4 0401 	sub.w	r4, r4, #1
1a003298:	f1d5 0e20 	rsbs	lr, r5, #32
1a00329c:	db0d      	blt.n	1a0032ba <__adddf3+0xb2>
1a00329e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0032a2:	fa22 f205 	lsr.w	r2, r2, r5
1a0032a6:	1880      	adds	r0, r0, r2
1a0032a8:	f141 0100 	adc.w	r1, r1, #0
1a0032ac:	fa03 f20e 	lsl.w	r2, r3, lr
1a0032b0:	1880      	adds	r0, r0, r2
1a0032b2:	fa43 f305 	asr.w	r3, r3, r5
1a0032b6:	4159      	adcs	r1, r3
1a0032b8:	e00e      	b.n	1a0032d8 <__adddf3+0xd0>
1a0032ba:	f1a5 0520 	sub.w	r5, r5, #32
1a0032be:	f10e 0e20 	add.w	lr, lr, #32
1a0032c2:	2a01      	cmp	r2, #1
1a0032c4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0032c8:	bf28      	it	cs
1a0032ca:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0032ce:	fa43 f305 	asr.w	r3, r3, r5
1a0032d2:	18c0      	adds	r0, r0, r3
1a0032d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0032d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0032dc:	d507      	bpl.n	1a0032ee <__adddf3+0xe6>
1a0032de:	f04f 0e00 	mov.w	lr, #0
1a0032e2:	f1dc 0c00 	rsbs	ip, ip, #0
1a0032e6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0032ea:	eb6e 0101 	sbc.w	r1, lr, r1
1a0032ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0032f2:	d31b      	bcc.n	1a00332c <__adddf3+0x124>
1a0032f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0032f8:	d30c      	bcc.n	1a003314 <__adddf3+0x10c>
1a0032fa:	0849      	lsrs	r1, r1, #1
1a0032fc:	ea5f 0030 	movs.w	r0, r0, rrx
1a003300:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a003304:	f104 0401 	add.w	r4, r4, #1
1a003308:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00330c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a003310:	f080 809a 	bcs.w	1a003448 <__adddf3+0x240>
1a003314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a003318:	bf08      	it	eq
1a00331a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00331e:	f150 0000 	adcs.w	r0, r0, #0
1a003322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003326:	ea41 0105 	orr.w	r1, r1, r5
1a00332a:	bd30      	pop	{r4, r5, pc}
1a00332c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a003330:	4140      	adcs	r0, r0
1a003332:	eb41 0101 	adc.w	r1, r1, r1
1a003336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00333a:	f1a4 0401 	sub.w	r4, r4, #1
1a00333e:	d1e9      	bne.n	1a003314 <__adddf3+0x10c>
1a003340:	f091 0f00 	teq	r1, #0
1a003344:	bf04      	itt	eq
1a003346:	4601      	moveq	r1, r0
1a003348:	2000      	moveq	r0, #0
1a00334a:	fab1 f381 	clz	r3, r1
1a00334e:	bf08      	it	eq
1a003350:	3320      	addeq	r3, #32
1a003352:	f1a3 030b 	sub.w	r3, r3, #11
1a003356:	f1b3 0220 	subs.w	r2, r3, #32
1a00335a:	da0c      	bge.n	1a003376 <__adddf3+0x16e>
1a00335c:	320c      	adds	r2, #12
1a00335e:	dd08      	ble.n	1a003372 <__adddf3+0x16a>
1a003360:	f102 0c14 	add.w	ip, r2, #20
1a003364:	f1c2 020c 	rsb	r2, r2, #12
1a003368:	fa01 f00c 	lsl.w	r0, r1, ip
1a00336c:	fa21 f102 	lsr.w	r1, r1, r2
1a003370:	e00c      	b.n	1a00338c <__adddf3+0x184>
1a003372:	f102 0214 	add.w	r2, r2, #20
1a003376:	bfd8      	it	le
1a003378:	f1c2 0c20 	rsble	ip, r2, #32
1a00337c:	fa01 f102 	lsl.w	r1, r1, r2
1a003380:	fa20 fc0c 	lsr.w	ip, r0, ip
1a003384:	bfdc      	itt	le
1a003386:	ea41 010c 	orrle.w	r1, r1, ip
1a00338a:	4090      	lslle	r0, r2
1a00338c:	1ae4      	subs	r4, r4, r3
1a00338e:	bfa2      	ittt	ge
1a003390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a003394:	4329      	orrge	r1, r5
1a003396:	bd30      	popge	{r4, r5, pc}
1a003398:	ea6f 0404 	mvn.w	r4, r4
1a00339c:	3c1f      	subs	r4, #31
1a00339e:	da1c      	bge.n	1a0033da <__adddf3+0x1d2>
1a0033a0:	340c      	adds	r4, #12
1a0033a2:	dc0e      	bgt.n	1a0033c2 <__adddf3+0x1ba>
1a0033a4:	f104 0414 	add.w	r4, r4, #20
1a0033a8:	f1c4 0220 	rsb	r2, r4, #32
1a0033ac:	fa20 f004 	lsr.w	r0, r0, r4
1a0033b0:	fa01 f302 	lsl.w	r3, r1, r2
1a0033b4:	ea40 0003 	orr.w	r0, r0, r3
1a0033b8:	fa21 f304 	lsr.w	r3, r1, r4
1a0033bc:	ea45 0103 	orr.w	r1, r5, r3
1a0033c0:	bd30      	pop	{r4, r5, pc}
1a0033c2:	f1c4 040c 	rsb	r4, r4, #12
1a0033c6:	f1c4 0220 	rsb	r2, r4, #32
1a0033ca:	fa20 f002 	lsr.w	r0, r0, r2
1a0033ce:	fa01 f304 	lsl.w	r3, r1, r4
1a0033d2:	ea40 0003 	orr.w	r0, r0, r3
1a0033d6:	4629      	mov	r1, r5
1a0033d8:	bd30      	pop	{r4, r5, pc}
1a0033da:	fa21 f004 	lsr.w	r0, r1, r4
1a0033de:	4629      	mov	r1, r5
1a0033e0:	bd30      	pop	{r4, r5, pc}
1a0033e2:	f094 0f00 	teq	r4, #0
1a0033e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0033ea:	bf06      	itte	eq
1a0033ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0033f0:	3401      	addeq	r4, #1
1a0033f2:	3d01      	subne	r5, #1
1a0033f4:	e74e      	b.n	1a003294 <__adddf3+0x8c>
1a0033f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0033fa:	bf18      	it	ne
1a0033fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003400:	d029      	beq.n	1a003456 <__adddf3+0x24e>
1a003402:	ea94 0f05 	teq	r4, r5
1a003406:	bf08      	it	eq
1a003408:	ea90 0f02 	teqeq	r0, r2
1a00340c:	d005      	beq.n	1a00341a <__adddf3+0x212>
1a00340e:	ea54 0c00 	orrs.w	ip, r4, r0
1a003412:	bf04      	itt	eq
1a003414:	4619      	moveq	r1, r3
1a003416:	4610      	moveq	r0, r2
1a003418:	bd30      	pop	{r4, r5, pc}
1a00341a:	ea91 0f03 	teq	r1, r3
1a00341e:	bf1e      	ittt	ne
1a003420:	2100      	movne	r1, #0
1a003422:	2000      	movne	r0, #0
1a003424:	bd30      	popne	{r4, r5, pc}
1a003426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00342a:	d105      	bne.n	1a003438 <__adddf3+0x230>
1a00342c:	0040      	lsls	r0, r0, #1
1a00342e:	4149      	adcs	r1, r1
1a003430:	bf28      	it	cs
1a003432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a003436:	bd30      	pop	{r4, r5, pc}
1a003438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00343c:	bf3c      	itt	cc
1a00343e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a003442:	bd30      	popcc	{r4, r5, pc}
1a003444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00344c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003450:	f04f 0000 	mov.w	r0, #0
1a003454:	bd30      	pop	{r4, r5, pc}
1a003456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00345a:	bf1a      	itte	ne
1a00345c:	4619      	movne	r1, r3
1a00345e:	4610      	movne	r0, r2
1a003460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a003464:	bf1c      	itt	ne
1a003466:	460b      	movne	r3, r1
1a003468:	4602      	movne	r2, r0
1a00346a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00346e:	bf06      	itte	eq
1a003470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a003474:	ea91 0f03 	teqeq	r1, r3
1a003478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a00347c:	bd30      	pop	{r4, r5, pc}
1a00347e:	bf00      	nop

1a003480 <__aeabi_ui2d>:
1a003480:	f090 0f00 	teq	r0, #0
1a003484:	bf04      	itt	eq
1a003486:	2100      	moveq	r1, #0
1a003488:	4770      	bxeq	lr
1a00348a:	b530      	push	{r4, r5, lr}
1a00348c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003490:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003494:	f04f 0500 	mov.w	r5, #0
1a003498:	f04f 0100 	mov.w	r1, #0
1a00349c:	e750      	b.n	1a003340 <__adddf3+0x138>
1a00349e:	bf00      	nop

1a0034a0 <__aeabi_i2d>:
1a0034a0:	f090 0f00 	teq	r0, #0
1a0034a4:	bf04      	itt	eq
1a0034a6:	2100      	moveq	r1, #0
1a0034a8:	4770      	bxeq	lr
1a0034aa:	b530      	push	{r4, r5, lr}
1a0034ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0034b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0034b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0034b8:	bf48      	it	mi
1a0034ba:	4240      	negmi	r0, r0
1a0034bc:	f04f 0100 	mov.w	r1, #0
1a0034c0:	e73e      	b.n	1a003340 <__adddf3+0x138>
1a0034c2:	bf00      	nop

1a0034c4 <__aeabi_f2d>:
1a0034c4:	0042      	lsls	r2, r0, #1
1a0034c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0034ca:	ea4f 0131 	mov.w	r1, r1, rrx
1a0034ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0034d2:	bf1f      	itttt	ne
1a0034d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0034d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0034dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0034e0:	4770      	bxne	lr
1a0034e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0034e6:	bf08      	it	eq
1a0034e8:	4770      	bxeq	lr
1a0034ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0034ee:	bf04      	itt	eq
1a0034f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0034f4:	4770      	bxeq	lr
1a0034f6:	b530      	push	{r4, r5, lr}
1a0034f8:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0034fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003504:	e71c      	b.n	1a003340 <__adddf3+0x138>
1a003506:	bf00      	nop

1a003508 <__aeabi_ul2d>:
1a003508:	ea50 0201 	orrs.w	r2, r0, r1
1a00350c:	bf08      	it	eq
1a00350e:	4770      	bxeq	lr
1a003510:	b530      	push	{r4, r5, lr}
1a003512:	f04f 0500 	mov.w	r5, #0
1a003516:	e00a      	b.n	1a00352e <__aeabi_l2d+0x16>

1a003518 <__aeabi_l2d>:
1a003518:	ea50 0201 	orrs.w	r2, r0, r1
1a00351c:	bf08      	it	eq
1a00351e:	4770      	bxeq	lr
1a003520:	b530      	push	{r4, r5, lr}
1a003522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a003526:	d502      	bpl.n	1a00352e <__aeabi_l2d+0x16>
1a003528:	4240      	negs	r0, r0
1a00352a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00352e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003532:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00353a:	f43f aed8 	beq.w	1a0032ee <__adddf3+0xe6>
1a00353e:	f04f 0203 	mov.w	r2, #3
1a003542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003546:	bf18      	it	ne
1a003548:	3203      	addne	r2, #3
1a00354a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00354e:	bf18      	it	ne
1a003550:	3203      	addne	r2, #3
1a003552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a003556:	f1c2 0320 	rsb	r3, r2, #32
1a00355a:	fa00 fc03 	lsl.w	ip, r0, r3
1a00355e:	fa20 f002 	lsr.w	r0, r0, r2
1a003562:	fa01 fe03 	lsl.w	lr, r1, r3
1a003566:	ea40 000e 	orr.w	r0, r0, lr
1a00356a:	fa21 f102 	lsr.w	r1, r1, r2
1a00356e:	4414      	add	r4, r2
1a003570:	e6bd      	b.n	1a0032ee <__adddf3+0xe6>
1a003572:	bf00      	nop

1a003574 <__aeabi_dmul>:
1a003574:	b570      	push	{r4, r5, r6, lr}
1a003576:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00357a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00357e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003582:	bf1d      	ittte	ne
1a003584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003588:	ea94 0f0c 	teqne	r4, ip
1a00358c:	ea95 0f0c 	teqne	r5, ip
1a003590:	f000 f8de 	bleq	1a003750 <__aeabi_dmul+0x1dc>
1a003594:	442c      	add	r4, r5
1a003596:	ea81 0603 	eor.w	r6, r1, r3
1a00359a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00359e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a0035a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a0035a6:	bf18      	it	ne
1a0035a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0035ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0035b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0035b4:	d038      	beq.n	1a003628 <__aeabi_dmul+0xb4>
1a0035b6:	fba0 ce02 	umull	ip, lr, r0, r2
1a0035ba:	f04f 0500 	mov.w	r5, #0
1a0035be:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0035c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0035c6:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0035ca:	f04f 0600 	mov.w	r6, #0
1a0035ce:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0035d2:	f09c 0f00 	teq	ip, #0
1a0035d6:	bf18      	it	ne
1a0035d8:	f04e 0e01 	orrne.w	lr, lr, #1
1a0035dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0035e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0035e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0035e8:	d204      	bcs.n	1a0035f4 <__aeabi_dmul+0x80>
1a0035ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0035ee:	416d      	adcs	r5, r5
1a0035f0:	eb46 0606 	adc.w	r6, r6, r6
1a0035f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0035f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0035fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a003600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a003604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a003608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00360c:	bf88      	it	hi
1a00360e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003612:	d81e      	bhi.n	1a003652 <__aeabi_dmul+0xde>
1a003614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a003618:	bf08      	it	eq
1a00361a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00361e:	f150 0000 	adcs.w	r0, r0, #0
1a003622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003626:	bd70      	pop	{r4, r5, r6, pc}
1a003628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a00362c:	ea46 0101 	orr.w	r1, r6, r1
1a003630:	ea40 0002 	orr.w	r0, r0, r2
1a003634:	ea81 0103 	eor.w	r1, r1, r3
1a003638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a00363c:	bfc2      	ittt	gt
1a00363e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003646:	bd70      	popgt	{r4, r5, r6, pc}
1a003648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00364c:	f04f 0e00 	mov.w	lr, #0
1a003650:	3c01      	subs	r4, #1
1a003652:	f300 80ab 	bgt.w	1a0037ac <__aeabi_dmul+0x238>
1a003656:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00365a:	bfde      	ittt	le
1a00365c:	2000      	movle	r0, #0
1a00365e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a003662:	bd70      	pople	{r4, r5, r6, pc}
1a003664:	f1c4 0400 	rsb	r4, r4, #0
1a003668:	3c20      	subs	r4, #32
1a00366a:	da35      	bge.n	1a0036d8 <__aeabi_dmul+0x164>
1a00366c:	340c      	adds	r4, #12
1a00366e:	dc1b      	bgt.n	1a0036a8 <__aeabi_dmul+0x134>
1a003670:	f104 0414 	add.w	r4, r4, #20
1a003674:	f1c4 0520 	rsb	r5, r4, #32
1a003678:	fa00 f305 	lsl.w	r3, r0, r5
1a00367c:	fa20 f004 	lsr.w	r0, r0, r4
1a003680:	fa01 f205 	lsl.w	r2, r1, r5
1a003684:	ea40 0002 	orr.w	r0, r0, r2
1a003688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a00368c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003694:	fa21 f604 	lsr.w	r6, r1, r4
1a003698:	eb42 0106 	adc.w	r1, r2, r6
1a00369c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0036a0:	bf08      	it	eq
1a0036a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0036a6:	bd70      	pop	{r4, r5, r6, pc}
1a0036a8:	f1c4 040c 	rsb	r4, r4, #12
1a0036ac:	f1c4 0520 	rsb	r5, r4, #32
1a0036b0:	fa00 f304 	lsl.w	r3, r0, r4
1a0036b4:	fa20 f005 	lsr.w	r0, r0, r5
1a0036b8:	fa01 f204 	lsl.w	r2, r1, r4
1a0036bc:	ea40 0002 	orr.w	r0, r0, r2
1a0036c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0036c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0036c8:	f141 0100 	adc.w	r1, r1, #0
1a0036cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0036d0:	bf08      	it	eq
1a0036d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0036d6:	bd70      	pop	{r4, r5, r6, pc}
1a0036d8:	f1c4 0520 	rsb	r5, r4, #32
1a0036dc:	fa00 f205 	lsl.w	r2, r0, r5
1a0036e0:	ea4e 0e02 	orr.w	lr, lr, r2
1a0036e4:	fa20 f304 	lsr.w	r3, r0, r4
1a0036e8:	fa01 f205 	lsl.w	r2, r1, r5
1a0036ec:	ea43 0302 	orr.w	r3, r3, r2
1a0036f0:	fa21 f004 	lsr.w	r0, r1, r4
1a0036f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0036f8:	fa21 f204 	lsr.w	r2, r1, r4
1a0036fc:	ea20 0002 	bic.w	r0, r0, r2
1a003700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a003704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003708:	bf08      	it	eq
1a00370a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00370e:	bd70      	pop	{r4, r5, r6, pc}
1a003710:	f094 0f00 	teq	r4, #0
1a003714:	d10f      	bne.n	1a003736 <__aeabi_dmul+0x1c2>
1a003716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00371a:	0040      	lsls	r0, r0, #1
1a00371c:	eb41 0101 	adc.w	r1, r1, r1
1a003720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003724:	bf08      	it	eq
1a003726:	3c01      	subeq	r4, #1
1a003728:	d0f7      	beq.n	1a00371a <__aeabi_dmul+0x1a6>
1a00372a:	ea41 0106 	orr.w	r1, r1, r6
1a00372e:	f095 0f00 	teq	r5, #0
1a003732:	bf18      	it	ne
1a003734:	4770      	bxne	lr
1a003736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00373a:	0052      	lsls	r2, r2, #1
1a00373c:	eb43 0303 	adc.w	r3, r3, r3
1a003740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003744:	bf08      	it	eq
1a003746:	3d01      	subeq	r5, #1
1a003748:	d0f7      	beq.n	1a00373a <__aeabi_dmul+0x1c6>
1a00374a:	ea43 0306 	orr.w	r3, r3, r6
1a00374e:	4770      	bx	lr
1a003750:	ea94 0f0c 	teq	r4, ip
1a003754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003758:	bf18      	it	ne
1a00375a:	ea95 0f0c 	teqne	r5, ip
1a00375e:	d00c      	beq.n	1a00377a <__aeabi_dmul+0x206>
1a003760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003764:	bf18      	it	ne
1a003766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00376a:	d1d1      	bne.n	1a003710 <__aeabi_dmul+0x19c>
1a00376c:	ea81 0103 	eor.w	r1, r1, r3
1a003770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003774:	f04f 0000 	mov.w	r0, #0
1a003778:	bd70      	pop	{r4, r5, r6, pc}
1a00377a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00377e:	bf06      	itte	eq
1a003780:	4610      	moveq	r0, r2
1a003782:	4619      	moveq	r1, r3
1a003784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003788:	d019      	beq.n	1a0037be <__aeabi_dmul+0x24a>
1a00378a:	ea94 0f0c 	teq	r4, ip
1a00378e:	d102      	bne.n	1a003796 <__aeabi_dmul+0x222>
1a003790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a003794:	d113      	bne.n	1a0037be <__aeabi_dmul+0x24a>
1a003796:	ea95 0f0c 	teq	r5, ip
1a00379a:	d105      	bne.n	1a0037a8 <__aeabi_dmul+0x234>
1a00379c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0037a0:	bf1c      	itt	ne
1a0037a2:	4610      	movne	r0, r2
1a0037a4:	4619      	movne	r1, r3
1a0037a6:	d10a      	bne.n	1a0037be <__aeabi_dmul+0x24a>
1a0037a8:	ea81 0103 	eor.w	r1, r1, r3
1a0037ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0037b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0037b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0037b8:	f04f 0000 	mov.w	r0, #0
1a0037bc:	bd70      	pop	{r4, r5, r6, pc}
1a0037be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0037c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0037c6:	bd70      	pop	{r4, r5, r6, pc}

1a0037c8 <__aeabi_ddiv>:
1a0037c8:	b570      	push	{r4, r5, r6, lr}
1a0037ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0037ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0037d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0037d6:	bf1d      	ittte	ne
1a0037d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0037dc:	ea94 0f0c 	teqne	r4, ip
1a0037e0:	ea95 0f0c 	teqne	r5, ip
1a0037e4:	f000 f8a7 	bleq	1a003936 <__aeabi_ddiv+0x16e>
1a0037e8:	eba4 0405 	sub.w	r4, r4, r5
1a0037ec:	ea81 0e03 	eor.w	lr, r1, r3
1a0037f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0037f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0037f8:	f000 8088 	beq.w	1a00390c <__aeabi_ddiv+0x144>
1a0037fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a003804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a003808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a00380c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a003810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a003814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a003818:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a00381c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003820:	429d      	cmp	r5, r3
1a003822:	bf08      	it	eq
1a003824:	4296      	cmpeq	r6, r2
1a003826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00382a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a00382e:	d202      	bcs.n	1a003836 <__aeabi_ddiv+0x6e>
1a003830:	085b      	lsrs	r3, r3, #1
1a003832:	ea4f 0232 	mov.w	r2, r2, rrx
1a003836:	1ab6      	subs	r6, r6, r2
1a003838:	eb65 0503 	sbc.w	r5, r5, r3
1a00383c:	085b      	lsrs	r3, r3, #1
1a00383e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a003846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00384a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00384e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003852:	bf22      	ittt	cs
1a003854:	1ab6      	subcs	r6, r6, r2
1a003856:	4675      	movcs	r5, lr
1a003858:	ea40 000c 	orrcs.w	r0, r0, ip
1a00385c:	085b      	lsrs	r3, r3, #1
1a00385e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003862:	ebb6 0e02 	subs.w	lr, r6, r2
1a003866:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00386a:	bf22      	ittt	cs
1a00386c:	1ab6      	subcs	r6, r6, r2
1a00386e:	4675      	movcs	r5, lr
1a003870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a003874:	085b      	lsrs	r3, r3, #1
1a003876:	ea4f 0232 	mov.w	r2, r2, rrx
1a00387a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00387e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003882:	bf22      	ittt	cs
1a003884:	1ab6      	subcs	r6, r6, r2
1a003886:	4675      	movcs	r5, lr
1a003888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a00388c:	085b      	lsrs	r3, r3, #1
1a00388e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003892:	ebb6 0e02 	subs.w	lr, r6, r2
1a003896:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00389a:	bf22      	ittt	cs
1a00389c:	1ab6      	subcs	r6, r6, r2
1a00389e:	4675      	movcs	r5, lr
1a0038a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0038a4:	ea55 0e06 	orrs.w	lr, r5, r6
1a0038a8:	d018      	beq.n	1a0038dc <__aeabi_ddiv+0x114>
1a0038aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0038ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0038b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0038b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0038ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0038be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0038c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a0038c6:	d1c0      	bne.n	1a00384a <__aeabi_ddiv+0x82>
1a0038c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0038cc:	d10b      	bne.n	1a0038e6 <__aeabi_ddiv+0x11e>
1a0038ce:	ea41 0100 	orr.w	r1, r1, r0
1a0038d2:	f04f 0000 	mov.w	r0, #0
1a0038d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a0038da:	e7b6      	b.n	1a00384a <__aeabi_ddiv+0x82>
1a0038dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0038e0:	bf04      	itt	eq
1a0038e2:	4301      	orreq	r1, r0
1a0038e4:	2000      	moveq	r0, #0
1a0038e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0038ea:	bf88      	it	hi
1a0038ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0038f0:	f63f aeaf 	bhi.w	1a003652 <__aeabi_dmul+0xde>
1a0038f4:	ebb5 0c03 	subs.w	ip, r5, r3
1a0038f8:	bf04      	itt	eq
1a0038fa:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0038fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003902:	f150 0000 	adcs.w	r0, r0, #0
1a003906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00390a:	bd70      	pop	{r4, r5, r6, pc}
1a00390c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a003918:	bfc2      	ittt	gt
1a00391a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00391e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003922:	bd70      	popgt	{r4, r5, r6, pc}
1a003924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003928:	f04f 0e00 	mov.w	lr, #0
1a00392c:	3c01      	subs	r4, #1
1a00392e:	e690      	b.n	1a003652 <__aeabi_dmul+0xde>
1a003930:	ea45 0e06 	orr.w	lr, r5, r6
1a003934:	e68d      	b.n	1a003652 <__aeabi_dmul+0xde>
1a003936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00393a:	ea94 0f0c 	teq	r4, ip
1a00393e:	bf08      	it	eq
1a003940:	ea95 0f0c 	teqeq	r5, ip
1a003944:	f43f af3b 	beq.w	1a0037be <__aeabi_dmul+0x24a>
1a003948:	ea94 0f0c 	teq	r4, ip
1a00394c:	d10a      	bne.n	1a003964 <__aeabi_ddiv+0x19c>
1a00394e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003952:	f47f af34 	bne.w	1a0037be <__aeabi_dmul+0x24a>
1a003956:	ea95 0f0c 	teq	r5, ip
1a00395a:	f47f af25 	bne.w	1a0037a8 <__aeabi_dmul+0x234>
1a00395e:	4610      	mov	r0, r2
1a003960:	4619      	mov	r1, r3
1a003962:	e72c      	b.n	1a0037be <__aeabi_dmul+0x24a>
1a003964:	ea95 0f0c 	teq	r5, ip
1a003968:	d106      	bne.n	1a003978 <__aeabi_ddiv+0x1b0>
1a00396a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00396e:	f43f aefd 	beq.w	1a00376c <__aeabi_dmul+0x1f8>
1a003972:	4610      	mov	r0, r2
1a003974:	4619      	mov	r1, r3
1a003976:	e722      	b.n	1a0037be <__aeabi_dmul+0x24a>
1a003978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00397c:	bf18      	it	ne
1a00397e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003982:	f47f aec5 	bne.w	1a003710 <__aeabi_dmul+0x19c>
1a003986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00398a:	f47f af0d 	bne.w	1a0037a8 <__aeabi_dmul+0x234>
1a00398e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003992:	f47f aeeb 	bne.w	1a00376c <__aeabi_dmul+0x1f8>
1a003996:	e712      	b.n	1a0037be <__aeabi_dmul+0x24a>

1a003998 <__gedf2>:
1a003998:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a00399c:	e006      	b.n	1a0039ac <__cmpdf2+0x4>
1a00399e:	bf00      	nop

1a0039a0 <__ledf2>:
1a0039a0:	f04f 0c01 	mov.w	ip, #1
1a0039a4:	e002      	b.n	1a0039ac <__cmpdf2+0x4>
1a0039a6:	bf00      	nop

1a0039a8 <__cmpdf2>:
1a0039a8:	f04f 0c01 	mov.w	ip, #1
1a0039ac:	f84d cd04 	str.w	ip, [sp, #-4]!
1a0039b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0039b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0039b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0039bc:	bf18      	it	ne
1a0039be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a0039c2:	d01b      	beq.n	1a0039fc <__cmpdf2+0x54>
1a0039c4:	b001      	add	sp, #4
1a0039c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a0039ca:	bf0c      	ite	eq
1a0039cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a0039d0:	ea91 0f03 	teqne	r1, r3
1a0039d4:	bf02      	ittt	eq
1a0039d6:	ea90 0f02 	teqeq	r0, r2
1a0039da:	2000      	moveq	r0, #0
1a0039dc:	4770      	bxeq	lr
1a0039de:	f110 0f00 	cmn.w	r0, #0
1a0039e2:	ea91 0f03 	teq	r1, r3
1a0039e6:	bf58      	it	pl
1a0039e8:	4299      	cmppl	r1, r3
1a0039ea:	bf08      	it	eq
1a0039ec:	4290      	cmpeq	r0, r2
1a0039ee:	bf2c      	ite	cs
1a0039f0:	17d8      	asrcs	r0, r3, #31
1a0039f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a0039f6:	f040 0001 	orr.w	r0, r0, #1
1a0039fa:	4770      	bx	lr
1a0039fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003a04:	d102      	bne.n	1a003a0c <__cmpdf2+0x64>
1a003a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a003a0a:	d107      	bne.n	1a003a1c <__cmpdf2+0x74>
1a003a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003a14:	d1d6      	bne.n	1a0039c4 <__cmpdf2+0x1c>
1a003a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a003a1a:	d0d3      	beq.n	1a0039c4 <__cmpdf2+0x1c>
1a003a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
1a003a20:	4770      	bx	lr
1a003a22:	bf00      	nop

1a003a24 <__aeabi_cdrcmple>:
1a003a24:	4684      	mov	ip, r0
1a003a26:	4610      	mov	r0, r2
1a003a28:	4662      	mov	r2, ip
1a003a2a:	468c      	mov	ip, r1
1a003a2c:	4619      	mov	r1, r3
1a003a2e:	4663      	mov	r3, ip
1a003a30:	e000      	b.n	1a003a34 <__aeabi_cdcmpeq>
1a003a32:	bf00      	nop

1a003a34 <__aeabi_cdcmpeq>:
1a003a34:	b501      	push	{r0, lr}
1a003a36:	f7ff ffb7 	bl	1a0039a8 <__cmpdf2>
1a003a3a:	2800      	cmp	r0, #0
1a003a3c:	bf48      	it	mi
1a003a3e:	f110 0f00 	cmnmi.w	r0, #0
1a003a42:	bd01      	pop	{r0, pc}

1a003a44 <__aeabi_dcmpeq>:
1a003a44:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003a48:	f7ff fff4 	bl	1a003a34 <__aeabi_cdcmpeq>
1a003a4c:	bf0c      	ite	eq
1a003a4e:	2001      	moveq	r0, #1
1a003a50:	2000      	movne	r0, #0
1a003a52:	f85d fb08 	ldr.w	pc, [sp], #8
1a003a56:	bf00      	nop

1a003a58 <__aeabi_dcmplt>:
1a003a58:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003a5c:	f7ff ffea 	bl	1a003a34 <__aeabi_cdcmpeq>
1a003a60:	bf34      	ite	cc
1a003a62:	2001      	movcc	r0, #1
1a003a64:	2000      	movcs	r0, #0
1a003a66:	f85d fb08 	ldr.w	pc, [sp], #8
1a003a6a:	bf00      	nop

1a003a6c <__aeabi_dcmple>:
1a003a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003a70:	f7ff ffe0 	bl	1a003a34 <__aeabi_cdcmpeq>
1a003a74:	bf94      	ite	ls
1a003a76:	2001      	movls	r0, #1
1a003a78:	2000      	movhi	r0, #0
1a003a7a:	f85d fb08 	ldr.w	pc, [sp], #8
1a003a7e:	bf00      	nop

1a003a80 <__aeabi_dcmpge>:
1a003a80:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003a84:	f7ff ffce 	bl	1a003a24 <__aeabi_cdrcmple>
1a003a88:	bf94      	ite	ls
1a003a8a:	2001      	movls	r0, #1
1a003a8c:	2000      	movhi	r0, #0
1a003a8e:	f85d fb08 	ldr.w	pc, [sp], #8
1a003a92:	bf00      	nop

1a003a94 <__aeabi_dcmpgt>:
1a003a94:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003a98:	f7ff ffc4 	bl	1a003a24 <__aeabi_cdrcmple>
1a003a9c:	bf34      	ite	cc
1a003a9e:	2001      	movcc	r0, #1
1a003aa0:	2000      	movcs	r0, #0
1a003aa2:	f85d fb08 	ldr.w	pc, [sp], #8
1a003aa6:	bf00      	nop

1a003aa8 <__aeabi_dcmpun>:
1a003aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003ab0:	d102      	bne.n	1a003ab8 <__aeabi_dcmpun+0x10>
1a003ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a003ab6:	d10a      	bne.n	1a003ace <__aeabi_dcmpun+0x26>
1a003ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003ac0:	d102      	bne.n	1a003ac8 <__aeabi_dcmpun+0x20>
1a003ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a003ac6:	d102      	bne.n	1a003ace <__aeabi_dcmpun+0x26>
1a003ac8:	f04f 0000 	mov.w	r0, #0
1a003acc:	4770      	bx	lr
1a003ace:	f04f 0001 	mov.w	r0, #1
1a003ad2:	4770      	bx	lr

1a003ad4 <__aeabi_d2f>:
1a003ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a003ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a003adc:	bf24      	itt	cs
1a003ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a003ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a003ae6:	d90d      	bls.n	1a003b04 <__aeabi_d2f+0x30>
1a003ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a003aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a003af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a003af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a003af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a003afc:	bf08      	it	eq
1a003afe:	f020 0001 	biceq.w	r0, r0, #1
1a003b02:	4770      	bx	lr
1a003b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a003b08:	d121      	bne.n	1a003b4e <__aeabi_d2f+0x7a>
1a003b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a003b0e:	bfbc      	itt	lt
1a003b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a003b14:	4770      	bxlt	lr
1a003b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a003b1e:	f1c2 0218 	rsb	r2, r2, #24
1a003b22:	f1c2 0c20 	rsb	ip, r2, #32
1a003b26:	fa10 f30c 	lsls.w	r3, r0, ip
1a003b2a:	fa20 f002 	lsr.w	r0, r0, r2
1a003b2e:	bf18      	it	ne
1a003b30:	f040 0001 	orrne.w	r0, r0, #1
1a003b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a003b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a003b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
1a003b40:	ea40 000c 	orr.w	r0, r0, ip
1a003b44:	fa23 f302 	lsr.w	r3, r3, r2
1a003b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a003b4c:	e7cc      	b.n	1a003ae8 <__aeabi_d2f+0x14>
1a003b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a003b52:	d107      	bne.n	1a003b64 <__aeabi_d2f+0x90>
1a003b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a003b58:	bf1e      	ittt	ne
1a003b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a003b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a003b62:	4770      	bxne	lr
1a003b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a003b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a003b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a003b70:	4770      	bx	lr
1a003b72:	bf00      	nop

1a003b74 <__aeabi_uldivmod>:
1a003b74:	b953      	cbnz	r3, 1a003b8c <__aeabi_uldivmod+0x18>
1a003b76:	b94a      	cbnz	r2, 1a003b8c <__aeabi_uldivmod+0x18>
1a003b78:	2900      	cmp	r1, #0
1a003b7a:	bf08      	it	eq
1a003b7c:	2800      	cmpeq	r0, #0
1a003b7e:	bf1c      	itt	ne
1a003b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003b88:	f000 b972 	b.w	1a003e70 <__aeabi_idiv0>
1a003b8c:	f1ad 0c08 	sub.w	ip, sp, #8
1a003b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003b94:	f000 f806 	bl	1a003ba4 <__udivmoddi4>
1a003b98:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003ba0:	b004      	add	sp, #16
1a003ba2:	4770      	bx	lr

1a003ba4 <__udivmoddi4>:
1a003ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003ba8:	9e08      	ldr	r6, [sp, #32]
1a003baa:	4604      	mov	r4, r0
1a003bac:	4688      	mov	r8, r1
1a003bae:	2b00      	cmp	r3, #0
1a003bb0:	d14b      	bne.n	1a003c4a <__udivmoddi4+0xa6>
1a003bb2:	428a      	cmp	r2, r1
1a003bb4:	4615      	mov	r5, r2
1a003bb6:	d967      	bls.n	1a003c88 <__udivmoddi4+0xe4>
1a003bb8:	fab2 f282 	clz	r2, r2
1a003bbc:	b14a      	cbz	r2, 1a003bd2 <__udivmoddi4+0x2e>
1a003bbe:	f1c2 0720 	rsb	r7, r2, #32
1a003bc2:	fa01 f302 	lsl.w	r3, r1, r2
1a003bc6:	fa20 f707 	lsr.w	r7, r0, r7
1a003bca:	4095      	lsls	r5, r2
1a003bcc:	ea47 0803 	orr.w	r8, r7, r3
1a003bd0:	4094      	lsls	r4, r2
1a003bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003bd6:	0c23      	lsrs	r3, r4, #16
1a003bd8:	fbb8 f7fe 	udiv	r7, r8, lr
1a003bdc:	fa1f fc85 	uxth.w	ip, r5
1a003be0:	fb0e 8817 	mls	r8, lr, r7, r8
1a003be4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003be8:	fb07 f10c 	mul.w	r1, r7, ip
1a003bec:	4299      	cmp	r1, r3
1a003bee:	d909      	bls.n	1a003c04 <__udivmoddi4+0x60>
1a003bf0:	18eb      	adds	r3, r5, r3
1a003bf2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003bf6:	f080 811b 	bcs.w	1a003e30 <__udivmoddi4+0x28c>
1a003bfa:	4299      	cmp	r1, r3
1a003bfc:	f240 8118 	bls.w	1a003e30 <__udivmoddi4+0x28c>
1a003c00:	3f02      	subs	r7, #2
1a003c02:	442b      	add	r3, r5
1a003c04:	1a5b      	subs	r3, r3, r1
1a003c06:	b2a4      	uxth	r4, r4
1a003c08:	fbb3 f0fe 	udiv	r0, r3, lr
1a003c0c:	fb0e 3310 	mls	r3, lr, r0, r3
1a003c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003c14:	fb00 fc0c 	mul.w	ip, r0, ip
1a003c18:	45a4      	cmp	ip, r4
1a003c1a:	d909      	bls.n	1a003c30 <__udivmoddi4+0x8c>
1a003c1c:	192c      	adds	r4, r5, r4
1a003c1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003c22:	f080 8107 	bcs.w	1a003e34 <__udivmoddi4+0x290>
1a003c26:	45a4      	cmp	ip, r4
1a003c28:	f240 8104 	bls.w	1a003e34 <__udivmoddi4+0x290>
1a003c2c:	3802      	subs	r0, #2
1a003c2e:	442c      	add	r4, r5
1a003c30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003c34:	eba4 040c 	sub.w	r4, r4, ip
1a003c38:	2700      	movs	r7, #0
1a003c3a:	b11e      	cbz	r6, 1a003c44 <__udivmoddi4+0xa0>
1a003c3c:	40d4      	lsrs	r4, r2
1a003c3e:	2300      	movs	r3, #0
1a003c40:	e9c6 4300 	strd	r4, r3, [r6]
1a003c44:	4639      	mov	r1, r7
1a003c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003c4a:	428b      	cmp	r3, r1
1a003c4c:	d909      	bls.n	1a003c62 <__udivmoddi4+0xbe>
1a003c4e:	2e00      	cmp	r6, #0
1a003c50:	f000 80eb 	beq.w	1a003e2a <__udivmoddi4+0x286>
1a003c54:	2700      	movs	r7, #0
1a003c56:	e9c6 0100 	strd	r0, r1, [r6]
1a003c5a:	4638      	mov	r0, r7
1a003c5c:	4639      	mov	r1, r7
1a003c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003c62:	fab3 f783 	clz	r7, r3
1a003c66:	2f00      	cmp	r7, #0
1a003c68:	d147      	bne.n	1a003cfa <__udivmoddi4+0x156>
1a003c6a:	428b      	cmp	r3, r1
1a003c6c:	d302      	bcc.n	1a003c74 <__udivmoddi4+0xd0>
1a003c6e:	4282      	cmp	r2, r0
1a003c70:	f200 80fa 	bhi.w	1a003e68 <__udivmoddi4+0x2c4>
1a003c74:	1a84      	subs	r4, r0, r2
1a003c76:	eb61 0303 	sbc.w	r3, r1, r3
1a003c7a:	2001      	movs	r0, #1
1a003c7c:	4698      	mov	r8, r3
1a003c7e:	2e00      	cmp	r6, #0
1a003c80:	d0e0      	beq.n	1a003c44 <__udivmoddi4+0xa0>
1a003c82:	e9c6 4800 	strd	r4, r8, [r6]
1a003c86:	e7dd      	b.n	1a003c44 <__udivmoddi4+0xa0>
1a003c88:	b902      	cbnz	r2, 1a003c8c <__udivmoddi4+0xe8>
1a003c8a:	deff      	udf	#255	; 0xff
1a003c8c:	fab2 f282 	clz	r2, r2
1a003c90:	2a00      	cmp	r2, #0
1a003c92:	f040 808f 	bne.w	1a003db4 <__udivmoddi4+0x210>
1a003c96:	1b49      	subs	r1, r1, r5
1a003c98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c9c:	fa1f f885 	uxth.w	r8, r5
1a003ca0:	2701      	movs	r7, #1
1a003ca2:	fbb1 fcfe 	udiv	ip, r1, lr
1a003ca6:	0c23      	lsrs	r3, r4, #16
1a003ca8:	fb0e 111c 	mls	r1, lr, ip, r1
1a003cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003cb0:	fb08 f10c 	mul.w	r1, r8, ip
1a003cb4:	4299      	cmp	r1, r3
1a003cb6:	d907      	bls.n	1a003cc8 <__udivmoddi4+0x124>
1a003cb8:	18eb      	adds	r3, r5, r3
1a003cba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003cbe:	d202      	bcs.n	1a003cc6 <__udivmoddi4+0x122>
1a003cc0:	4299      	cmp	r1, r3
1a003cc2:	f200 80cd 	bhi.w	1a003e60 <__udivmoddi4+0x2bc>
1a003cc6:	4684      	mov	ip, r0
1a003cc8:	1a59      	subs	r1, r3, r1
1a003cca:	b2a3      	uxth	r3, r4
1a003ccc:	fbb1 f0fe 	udiv	r0, r1, lr
1a003cd0:	fb0e 1410 	mls	r4, lr, r0, r1
1a003cd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003cd8:	fb08 f800 	mul.w	r8, r8, r0
1a003cdc:	45a0      	cmp	r8, r4
1a003cde:	d907      	bls.n	1a003cf0 <__udivmoddi4+0x14c>
1a003ce0:	192c      	adds	r4, r5, r4
1a003ce2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003ce6:	d202      	bcs.n	1a003cee <__udivmoddi4+0x14a>
1a003ce8:	45a0      	cmp	r8, r4
1a003cea:	f200 80b6 	bhi.w	1a003e5a <__udivmoddi4+0x2b6>
1a003cee:	4618      	mov	r0, r3
1a003cf0:	eba4 0408 	sub.w	r4, r4, r8
1a003cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003cf8:	e79f      	b.n	1a003c3a <__udivmoddi4+0x96>
1a003cfa:	f1c7 0c20 	rsb	ip, r7, #32
1a003cfe:	40bb      	lsls	r3, r7
1a003d00:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003d04:	ea4e 0e03 	orr.w	lr, lr, r3
1a003d08:	fa01 f407 	lsl.w	r4, r1, r7
1a003d0c:	fa20 f50c 	lsr.w	r5, r0, ip
1a003d10:	fa21 f30c 	lsr.w	r3, r1, ip
1a003d14:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003d18:	4325      	orrs	r5, r4
1a003d1a:	fbb3 f9f8 	udiv	r9, r3, r8
1a003d1e:	0c2c      	lsrs	r4, r5, #16
1a003d20:	fb08 3319 	mls	r3, r8, r9, r3
1a003d24:	fa1f fa8e 	uxth.w	sl, lr
1a003d28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003d2c:	fb09 f40a 	mul.w	r4, r9, sl
1a003d30:	429c      	cmp	r4, r3
1a003d32:	fa02 f207 	lsl.w	r2, r2, r7
1a003d36:	fa00 f107 	lsl.w	r1, r0, r7
1a003d3a:	d90b      	bls.n	1a003d54 <__udivmoddi4+0x1b0>
1a003d3c:	eb1e 0303 	adds.w	r3, lr, r3
1a003d40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003d44:	f080 8087 	bcs.w	1a003e56 <__udivmoddi4+0x2b2>
1a003d48:	429c      	cmp	r4, r3
1a003d4a:	f240 8084 	bls.w	1a003e56 <__udivmoddi4+0x2b2>
1a003d4e:	f1a9 0902 	sub.w	r9, r9, #2
1a003d52:	4473      	add	r3, lr
1a003d54:	1b1b      	subs	r3, r3, r4
1a003d56:	b2ad      	uxth	r5, r5
1a003d58:	fbb3 f0f8 	udiv	r0, r3, r8
1a003d5c:	fb08 3310 	mls	r3, r8, r0, r3
1a003d60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003d64:	fb00 fa0a 	mul.w	sl, r0, sl
1a003d68:	45a2      	cmp	sl, r4
1a003d6a:	d908      	bls.n	1a003d7e <__udivmoddi4+0x1da>
1a003d6c:	eb1e 0404 	adds.w	r4, lr, r4
1a003d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003d74:	d26b      	bcs.n	1a003e4e <__udivmoddi4+0x2aa>
1a003d76:	45a2      	cmp	sl, r4
1a003d78:	d969      	bls.n	1a003e4e <__udivmoddi4+0x2aa>
1a003d7a:	3802      	subs	r0, #2
1a003d7c:	4474      	add	r4, lr
1a003d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003d82:	fba0 8902 	umull	r8, r9, r0, r2
1a003d86:	eba4 040a 	sub.w	r4, r4, sl
1a003d8a:	454c      	cmp	r4, r9
1a003d8c:	46c2      	mov	sl, r8
1a003d8e:	464b      	mov	r3, r9
1a003d90:	d354      	bcc.n	1a003e3c <__udivmoddi4+0x298>
1a003d92:	d051      	beq.n	1a003e38 <__udivmoddi4+0x294>
1a003d94:	2e00      	cmp	r6, #0
1a003d96:	d069      	beq.n	1a003e6c <__udivmoddi4+0x2c8>
1a003d98:	ebb1 050a 	subs.w	r5, r1, sl
1a003d9c:	eb64 0403 	sbc.w	r4, r4, r3
1a003da0:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003da4:	40fd      	lsrs	r5, r7
1a003da6:	40fc      	lsrs	r4, r7
1a003da8:	ea4c 0505 	orr.w	r5, ip, r5
1a003dac:	e9c6 5400 	strd	r5, r4, [r6]
1a003db0:	2700      	movs	r7, #0
1a003db2:	e747      	b.n	1a003c44 <__udivmoddi4+0xa0>
1a003db4:	f1c2 0320 	rsb	r3, r2, #32
1a003db8:	fa20 f703 	lsr.w	r7, r0, r3
1a003dbc:	4095      	lsls	r5, r2
1a003dbe:	fa01 f002 	lsl.w	r0, r1, r2
1a003dc2:	fa21 f303 	lsr.w	r3, r1, r3
1a003dc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003dca:	4338      	orrs	r0, r7
1a003dcc:	0c01      	lsrs	r1, r0, #16
1a003dce:	fbb3 f7fe 	udiv	r7, r3, lr
1a003dd2:	fa1f f885 	uxth.w	r8, r5
1a003dd6:	fb0e 3317 	mls	r3, lr, r7, r3
1a003dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003dde:	fb07 f308 	mul.w	r3, r7, r8
1a003de2:	428b      	cmp	r3, r1
1a003de4:	fa04 f402 	lsl.w	r4, r4, r2
1a003de8:	d907      	bls.n	1a003dfa <__udivmoddi4+0x256>
1a003dea:	1869      	adds	r1, r5, r1
1a003dec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003df0:	d22f      	bcs.n	1a003e52 <__udivmoddi4+0x2ae>
1a003df2:	428b      	cmp	r3, r1
1a003df4:	d92d      	bls.n	1a003e52 <__udivmoddi4+0x2ae>
1a003df6:	3f02      	subs	r7, #2
1a003df8:	4429      	add	r1, r5
1a003dfa:	1acb      	subs	r3, r1, r3
1a003dfc:	b281      	uxth	r1, r0
1a003dfe:	fbb3 f0fe 	udiv	r0, r3, lr
1a003e02:	fb0e 3310 	mls	r3, lr, r0, r3
1a003e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003e0a:	fb00 f308 	mul.w	r3, r0, r8
1a003e0e:	428b      	cmp	r3, r1
1a003e10:	d907      	bls.n	1a003e22 <__udivmoddi4+0x27e>
1a003e12:	1869      	adds	r1, r5, r1
1a003e14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003e18:	d217      	bcs.n	1a003e4a <__udivmoddi4+0x2a6>
1a003e1a:	428b      	cmp	r3, r1
1a003e1c:	d915      	bls.n	1a003e4a <__udivmoddi4+0x2a6>
1a003e1e:	3802      	subs	r0, #2
1a003e20:	4429      	add	r1, r5
1a003e22:	1ac9      	subs	r1, r1, r3
1a003e24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003e28:	e73b      	b.n	1a003ca2 <__udivmoddi4+0xfe>
1a003e2a:	4637      	mov	r7, r6
1a003e2c:	4630      	mov	r0, r6
1a003e2e:	e709      	b.n	1a003c44 <__udivmoddi4+0xa0>
1a003e30:	4607      	mov	r7, r0
1a003e32:	e6e7      	b.n	1a003c04 <__udivmoddi4+0x60>
1a003e34:	4618      	mov	r0, r3
1a003e36:	e6fb      	b.n	1a003c30 <__udivmoddi4+0x8c>
1a003e38:	4541      	cmp	r1, r8
1a003e3a:	d2ab      	bcs.n	1a003d94 <__udivmoddi4+0x1f0>
1a003e3c:	ebb8 0a02 	subs.w	sl, r8, r2
1a003e40:	eb69 020e 	sbc.w	r2, r9, lr
1a003e44:	3801      	subs	r0, #1
1a003e46:	4613      	mov	r3, r2
1a003e48:	e7a4      	b.n	1a003d94 <__udivmoddi4+0x1f0>
1a003e4a:	4660      	mov	r0, ip
1a003e4c:	e7e9      	b.n	1a003e22 <__udivmoddi4+0x27e>
1a003e4e:	4618      	mov	r0, r3
1a003e50:	e795      	b.n	1a003d7e <__udivmoddi4+0x1da>
1a003e52:	4667      	mov	r7, ip
1a003e54:	e7d1      	b.n	1a003dfa <__udivmoddi4+0x256>
1a003e56:	4681      	mov	r9, r0
1a003e58:	e77c      	b.n	1a003d54 <__udivmoddi4+0x1b0>
1a003e5a:	3802      	subs	r0, #2
1a003e5c:	442c      	add	r4, r5
1a003e5e:	e747      	b.n	1a003cf0 <__udivmoddi4+0x14c>
1a003e60:	f1ac 0c02 	sub.w	ip, ip, #2
1a003e64:	442b      	add	r3, r5
1a003e66:	e72f      	b.n	1a003cc8 <__udivmoddi4+0x124>
1a003e68:	4638      	mov	r0, r7
1a003e6a:	e708      	b.n	1a003c7e <__udivmoddi4+0xda>
1a003e6c:	4637      	mov	r7, r6
1a003e6e:	e6e9      	b.n	1a003c44 <__udivmoddi4+0xa0>

1a003e70 <__aeabi_idiv0>:
1a003e70:	4770      	bx	lr
1a003e72:	bf00      	nop

1a003e74 <__errno>:
1a003e74:	4b01      	ldr	r3, [pc, #4]	; (1a003e7c <__errno+0x8>)
1a003e76:	6818      	ldr	r0, [r3, #0]
1a003e78:	4770      	bx	lr
1a003e7a:	bf00      	nop
1a003e7c:	10000088 	.word	0x10000088

1a003e80 <__libc_init_array>:
1a003e80:	b570      	push	{r4, r5, r6, lr}
1a003e82:	4e0d      	ldr	r6, [pc, #52]	; (1a003eb8 <__libc_init_array+0x38>)
1a003e84:	4d0d      	ldr	r5, [pc, #52]	; (1a003ebc <__libc_init_array+0x3c>)
1a003e86:	1b76      	subs	r6, r6, r5
1a003e88:	10b6      	asrs	r6, r6, #2
1a003e8a:	d006      	beq.n	1a003e9a <__libc_init_array+0x1a>
1a003e8c:	2400      	movs	r4, #0
1a003e8e:	3401      	adds	r4, #1
1a003e90:	f855 3b04 	ldr.w	r3, [r5], #4
1a003e94:	4798      	blx	r3
1a003e96:	42a6      	cmp	r6, r4
1a003e98:	d1f9      	bne.n	1a003e8e <__libc_init_array+0xe>
1a003e9a:	4e09      	ldr	r6, [pc, #36]	; (1a003ec0 <__libc_init_array+0x40>)
1a003e9c:	4d09      	ldr	r5, [pc, #36]	; (1a003ec4 <__libc_init_array+0x44>)
1a003e9e:	1b76      	subs	r6, r6, r5
1a003ea0:	f7fd fa7b 	bl	1a00139a <_init>
1a003ea4:	10b6      	asrs	r6, r6, #2
1a003ea6:	d006      	beq.n	1a003eb6 <__libc_init_array+0x36>
1a003ea8:	2400      	movs	r4, #0
1a003eaa:	3401      	adds	r4, #1
1a003eac:	f855 3b04 	ldr.w	r3, [r5], #4
1a003eb0:	4798      	blx	r3
1a003eb2:	42a6      	cmp	r6, r4
1a003eb4:	d1f9      	bne.n	1a003eaa <__libc_init_array+0x2a>
1a003eb6:	bd70      	pop	{r4, r5, r6, pc}
1a003eb8:	1a004390 	.word	0x1a004390
1a003ebc:	1a004390 	.word	0x1a004390
1a003ec0:	1a004394 	.word	0x1a004394
1a003ec4:	1a004390 	.word	0x1a004390

1a003ec8 <memset>:
1a003ec8:	b4f0      	push	{r4, r5, r6, r7}
1a003eca:	0786      	lsls	r6, r0, #30
1a003ecc:	d043      	beq.n	1a003f56 <memset+0x8e>
1a003ece:	1e54      	subs	r4, r2, #1
1a003ed0:	2a00      	cmp	r2, #0
1a003ed2:	d03e      	beq.n	1a003f52 <memset+0x8a>
1a003ed4:	b2ca      	uxtb	r2, r1
1a003ed6:	4603      	mov	r3, r0
1a003ed8:	e002      	b.n	1a003ee0 <memset+0x18>
1a003eda:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003ede:	d338      	bcc.n	1a003f52 <memset+0x8a>
1a003ee0:	f803 2b01 	strb.w	r2, [r3], #1
1a003ee4:	079d      	lsls	r5, r3, #30
1a003ee6:	d1f8      	bne.n	1a003eda <memset+0x12>
1a003ee8:	2c03      	cmp	r4, #3
1a003eea:	d92b      	bls.n	1a003f44 <memset+0x7c>
1a003eec:	b2cd      	uxtb	r5, r1
1a003eee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003ef2:	2c0f      	cmp	r4, #15
1a003ef4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003ef8:	d916      	bls.n	1a003f28 <memset+0x60>
1a003efa:	f1a4 0710 	sub.w	r7, r4, #16
1a003efe:	093f      	lsrs	r7, r7, #4
1a003f00:	f103 0620 	add.w	r6, r3, #32
1a003f04:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a003f08:	f103 0210 	add.w	r2, r3, #16
1a003f0c:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003f10:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003f14:	3210      	adds	r2, #16
1a003f16:	42b2      	cmp	r2, r6
1a003f18:	d1f8      	bne.n	1a003f0c <memset+0x44>
1a003f1a:	f004 040f 	and.w	r4, r4, #15
1a003f1e:	3701      	adds	r7, #1
1a003f20:	2c03      	cmp	r4, #3
1a003f22:	eb03 1307 	add.w	r3, r3, r7, lsl #4
1a003f26:	d90d      	bls.n	1a003f44 <memset+0x7c>
1a003f28:	461e      	mov	r6, r3
1a003f2a:	4622      	mov	r2, r4
1a003f2c:	3a04      	subs	r2, #4
1a003f2e:	2a03      	cmp	r2, #3
1a003f30:	f846 5b04 	str.w	r5, [r6], #4
1a003f34:	d8fa      	bhi.n	1a003f2c <memset+0x64>
1a003f36:	1f22      	subs	r2, r4, #4
1a003f38:	f022 0203 	bic.w	r2, r2, #3
1a003f3c:	3204      	adds	r2, #4
1a003f3e:	4413      	add	r3, r2
1a003f40:	f004 0403 	and.w	r4, r4, #3
1a003f44:	b12c      	cbz	r4, 1a003f52 <memset+0x8a>
1a003f46:	b2c9      	uxtb	r1, r1
1a003f48:	441c      	add	r4, r3
1a003f4a:	f803 1b01 	strb.w	r1, [r3], #1
1a003f4e:	429c      	cmp	r4, r3
1a003f50:	d1fb      	bne.n	1a003f4a <memset+0x82>
1a003f52:	bcf0      	pop	{r4, r5, r6, r7}
1a003f54:	4770      	bx	lr
1a003f56:	4614      	mov	r4, r2
1a003f58:	4603      	mov	r3, r0
1a003f5a:	e7c5      	b.n	1a003ee8 <memset+0x20>
1a003f5c:	0a0d5441 	.word	0x0a0d5441
1a003f60:	00000000 	.word	0x00000000
1a003f64:	0a0d4b4f 	.word	0x0a0d4b4f
1a003f68:	ffffff00 	.word	0xffffff00
1a003f6c:	54524155 	.word	0x54524155
1a003f70:	2043505f 	.word	0x2043505f
1a003f74:	666e6f63 	.word	0x666e6f63
1a003f78:	72756769 	.word	0x72756769
1a003f7c:	2e616461 	.word	0x2e616461
1a003f80:	00000a0d 	.word	0x00000a0d
1a003f84:	54524155 	.word	0x54524155
1a003f88:	554c425f 	.word	0x554c425f
1a003f8c:	4f4f5445 	.word	0x4f4f5445
1a003f90:	70204854 	.word	0x70204854
1a003f94:	20617261 	.word	0x20617261
1a003f98:	75646f6d 	.word	0x75646f6d
1a003f9c:	42206f6c 	.word	0x42206f6c
1a003fa0:	7465756c 	.word	0x7465756c
1a003fa4:	68746f6f 	.word	0x68746f6f
1a003fa8:	6e6f6320 	.word	0x6e6f6320
1a003fac:	75676966 	.word	0x75676966
1a003fb0:	61646172 	.word	0x61646172
1a003fb4:	000a0d2e 	.word	0x000a0d2e
1a003fb8:	74736554 	.word	0x74736554
1a003fbc:	206f7465 	.word	0x206f7465
1a003fc0:	65206973 	.word	0x65206973
1a003fc4:	6f6d206c 	.word	0x6f6d206c
1a003fc8:	6f6c7564 	.word	0x6f6c7564
1a003fcc:	74736520 	.word	0x74736520
1a003fd0:	6f632061 	.word	0x6f632061
1a003fd4:	7463656e 	.word	0x7463656e
1a003fd8:	206f6461 	.word	0x206f6461
1a003fdc:	69766e65 	.word	0x69766e65
1a003fe0:	6f646e61 	.word	0x6f646e61
1a003fe4:	5441203a 	.word	0x5441203a
1a003fe8:	00000a0d 	.word	0x00000a0d
1a003fec:	75646f4d 	.word	0x75646f4d
1a003ff0:	63206f6c 	.word	0x63206f6c
1a003ff4:	63656e6f 	.word	0x63656e6f
1a003ff8:	6f646174 	.word	0x6f646174
1a003ffc:	726f6320 	.word	0x726f6320
1a004000:	74636572 	.word	0x74636572
1a004004:	6e656d61 	.word	0x6e656d61
1a004008:	0d2e6574 	.word	0x0d2e6574
1a00400c:	0000000a 	.word	0x0000000a
1a004010:	66206f4e 	.word	0x66206f4e
1a004014:	69636e75 	.word	0x69636e75
1a004018:	2e616e6f 	.word	0x2e616e6f
1a00401c:	00000a0d 	.word	0x00000a0d
1a004020:	20202020 	.word	0x20202020
1a004024:	41414943 	.word	0x41414943
1a004028:	53202d20 	.word	0x53202d20
1a00402c:	31375448 	.word	0x31375448
1a004030:	ffffff00 	.word	0xffffff00
1a004034:	00003d54 	.word	0x00003d54
1a004038:	00003d48 	.word	0x00003d48
1a00403c:	6f522054 	.word	0x6f522054
1a004040:	3d6f6963 	.word	0x3d6f6963
1a004044:	00000000 	.word	0x00000000
1a004048:	6f4c3d42 	.word	0x6f4c3d42
1a00404c:	0000002c 	.word	0x0000002c
1a004050:	6b4f3d42 	.word	0x6b4f3d42
1a004054:	0000002c 	.word	0x0000002c
1a004058:	4f3d6548 	.word	0x4f3d6548
1a00405c:	00202c6e 	.word	0x00202c6e
1a004060:	4f3d6548 	.word	0x4f3d6548
1a004064:	002c6666 	.word	0x002c6666
1a004068:	2c485238 	.word	0x2c485238
1a00406c:	00543231 	.word	0x00543231
1a004070:	48523231 	.word	0x48523231
1a004074:	5434312c 	.word	0x5434312c
1a004078:	ffffff00 	.word	0xffffff00
1a00407c:	00000000 	.word	0x00000000
1a004080:	00000040 	.word	0x00000040
1a004084:	00000014 	.word	0x00000014
1a004088:	00000054 	.word	0x00000054

1a00408c <ExtRateIn>:
1a00408c:	00000000                                ....

1a004090 <GpioButtons>:
1a004090:	08000400 09010900                       ........

1a004098 <GpioLeds>:
1a004098:	01050005 0e000205 0c010b01              ............

1a0040a4 <GpioPorts>:
1a0040a4:	03030003 0f050403 05031005 07030603     ................
1a0040b4:	ffff0802                                ....

1a0040b8 <OscRateIn>:
1a0040b8:	00b71b00                                ....

1a0040bc <InitClkStates>:
1a0040bc:	01010f01                                ....

1a0040c0 <pinmuxing>:
1a0040c0:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0040d0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0040e0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0040f0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004100:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004110:	00d50301 00d50401 00160107 00560207     ..............V.
1a004120:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004130:	00570206                                ..W.

1a004134 <UART_BClock>:
1a004134:	01a201c2 01620182                       ......b.

1a00413c <UART_PClock>:
1a00413c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00414c:	ffff00ff                                ....

1a004150 <periph_to_base>:
1a004150:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004160:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004170:	000100e0 01000100 01200003 00060120     .......... . ...
1a004180:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004190:	01820013 00120182 01a201a2 01c20011     ................
1a0041a0:	001001c2 01e201e2 0202000f 000e0202     ................
1a0041b0:	02220222 0223000d 001c0223              "."...#.#...

1a0041bc <InitClkStates>:
1a0041bc:	00010100 00010909 0001090a 01010701     ................
1a0041cc:	00010902 00010906 0101090c 0001090d     ................
1a0041dc:	0001090e 0001090f 00010910 00010911     ................
1a0041ec:	00010912 00010913 00011114 00011119     ................
1a0041fc:	0001111a 0001111b                       ........

1a004204 <lpcUarts>:
1a004204:	40081000 06020406 00180205 40081000     ...@...........@
1a004214:	09070509 00180706 40082000 00000000     ......... .@....
1a004224:	00190000 400c1000 07060107 001a0602     .......@........
1a004234:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004244:	02020302 001b0204                       ........

1a00424c <gpioPinsInit>:
1a00424c:	02000104 00050701 05010d03 04080100     ................
1a00425c:	02020002 02000304 00000403 04070002     ................
1a00426c:	030c0300 09050402 05040103 04030208     ................
1a00427c:	04020305 06040504 0802000c 03000b06     ................
1a00428c:	00090607 07060503 060f0504 03030004     ................
1a00429c:	02000404 00050404 06040502 04060200     ................
1a0042ac:	0c050408 05040a04 0003010e 14010a00     ................
1a0042bc:	010f0000 0d000012 00001101 0010010c     ................
1a0042cc:	07070300 000f0300 01000001 00000000     ................
1a0042dc:	000a0600 08060603 06100504 04030005     ................
1a0042ec:	03000106 04090400 04010d05 010b0000     ................
1a0042fc:	0200000f 00000001 00010104 02010800     ................
1a00430c:	01090000 09010006 05040002 04010200     ................
1a00431c:	02020105 02020504 0e00000a 01000b02     ................
1a00432c:	000c020b 00040c01 04000200 01020001     ................
1a00433c:	02000204 00030402 03070302 070b0300     ................
1a00434c:	0c030004 03000507 0006070d 01020e03     ................
1a00435c:	04010504 06020006 02000504 00040405     ................
1a00436c:	08040402 040c0504 0d050409 05040a04     ................
1a00437c:	0005010e ffff0801                       ........

1a004384 <ultrasonicSensorsIrqMap>:
1a004384:	ff020100 31676f6c 00000030              ....log10...
